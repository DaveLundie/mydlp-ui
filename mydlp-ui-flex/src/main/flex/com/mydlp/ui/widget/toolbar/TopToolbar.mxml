<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 width="100%" height="36"
		 creationComplete="onCreationComplete(event)">

	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.policy.rule.RuleContainer;
			
			import flash.net.navigateToURL;
			
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Decoder;
			import mx.validators.EmailValidator;
			
			protected var currentUser:AuthUser = null;
			
			protected var compileInProgress:Boolean = false;
			
			protected var installPopup:InstallPolicyPopup = null;
			
			protected var reloadFlag:Boolean = false;
			
			protected var logoutFlag:Boolean = false;
			
			public var policyInstallationState:Boolean = true;
			
			[Bindable]
			protected var compileProgress:String = "post_compile"; // done, compile, post_compile
			
			protected var timerInterval:uint = 5000;
			
			protected var compileStatusTimer:Timer = null;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				getCurrentUserHandler();
				fetchCompileStatus();
			}
			
			public function getCurrentUserHandler(): void
			{
				if(!(FlexGlobals.topLevelApplication.user is AuthUser))
					return;
				currentUser = FlexGlobals.topLevelApplication.user as AuthUser;
				
				if (currentUser != null)
					userLabel.text = 	LangUtil.getString("messages", "toptoolbar.loggedinas") + " " +
										currentUser.username + " <" +currentUser.email + ">";
			}
			
			protected function compilePolicyHandler(event:ResultEvent): void
			{
				fetchCompileStatus();
			}
			
			protected function fetchCompileStatus(): void
			{
				if (SessionUtil.isDevelopment())
				{
					var e:ResultEvent = new ResultEvent(ResultEvent.RESULT, false, true, "done");
					getCompileStatusHandler(e);
				}
				else
				{
					pe.getCompileStatus();
				}
			}
			
			protected function scheduleCompileStatusTimer(): void
			{
				if (compileStatusTimer != null)
				{
					compileStatusTimer.stop();
					compileStatusTimer == null;
				}
				compileStatusTimer = new Timer(timerInterval, 1);
				compileStatusTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onCompileStatusTimerComplete);
				compileStatusTimer.start();
			}
			
			public function onCompileStatusTimerComplete(event:TimerEvent):void
			{
				fetchCompileStatus();
			}
			
			protected function getCompileStatusHandler(event:ResultEvent): void
			{
				compileProgress = event.result as String;
				if (compileProgress == "done")
				{
					timerInterval = 60000;
					if (installPopup != null)
					{
						installPopup.currentState = "completed";
					}
					if (compileInProgress)
					{
						compileInProgress = false;
						compileCompletedHandler();
					}
				}
				else
				{
					timerInterval = 3000;
					if (compileProgress == "compile")
					{
						if (installPopup != null)
						{
							installPopup.currentState = "compile";
						}
					}
					else if (compileProgress == "post_compile")
					{
						if (installPopup != null)
						{
							installPopup.currentState = "post_compile";
						}
					} 
				}
				scheduleCompileStatusTimer();
			}
			
			protected function compileCompletedHandler(): void
			{
				policyInstallationState = true;
				if (installPopup != null)
				{
					installPopup.currentState = "revision";
				}
				rev.save();
			}
			
			protected function saveRevisionHandler(event:ResultEvent): void
			{
				if (reloadFlag)
				{
					if (installPopup != null)
					{
						installPopup.currentState = "reload";
					}
					reloadApp();
				}
				else if(logoutFlag)
				{
					if(installPopup != null)
					{
						installPopup.currentState = "logout";
					}
					logoutApp();
				}
				else
				{
					if (installPopup != null)
					{
						installPopup.currentState = "completed";
						FlexGlobals.topLevelApplication.revisionContainer.refreshAll();
						installPopup = null;
					}
				}			
			}
			
			public function logoutApp():void
			{
				navigateToURL(new URLRequest ('j_spring_security_logout'), '_self');
			}
			
			public function reloadApp(): void
			{
				navigateToURL(new URLRequest ("/"), "_self");
			}
			
			public function installPolicy(): void
			{
				reloadFlag = false;
				logoutFlag = false;
				installPolicyFunc();
			}
			
			protected function installPolicyFunc(): void
			{
				compileInProgress = true;
				installPopup = InteractionUtil.newPopup(InstallPolicyPopup) as InstallPolicyPopup;
				var sanityReturn:String = FlexGlobals.topLevelApplication.ruleContainer.sanityCheck();
				if (sanityReturn == "ok")
				{
					pe.compilePolicy(1);
					fetchCompileStatus();
				}
				else
				{
					installPopup.currentState = "error";
					installPopup.installationStatus.text = 
						LangUtil.getString("messages", "installPolicy.sanityCheck." + sanityReturn);
				}
			}
			
			public function installPolicyAndReload(): void
			{
				reloadFlag = true;
				logoutFlag = false;
				installPolicyFunc();
			}
			
			public function installPolicyAndLogout():void
			{
				reloadFlag = false;
				logoutFlag = true;
				installPolicyFunc();
			}
			
			protected function settingButtonClickHandler(event:MouseEvent):void
			{
				var eup:EditUserPopup = InteractionUtil.newPopup(EditUserPopup) as EditUserPopup;
				eup.currentUser = currentUser;
				eup.initialUserName = currentUser.username;
				eup.visible = true;
			}
			
			protected function logoutButtonClickHandler(event:Event):void
			{
				if(policyInstallationState)
					logoutApp();
				else
					var ipwp:InstallPolicyWarningPopup = InteractionUtil.newPopup(InstallPolicyWarningPopup) as InstallPolicyWarningPopup;
			}
			
			protected function canInstall():Boolean
			{
				if(	SessionUtil.hasRole(AuthSecurityRole.ROLE_ADMIN) ||
					SessionUtil.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN) ||
					SessionUtil.hasRole(AuthSecurityRole.ROLE_CLASSIFIER)
				)
					return true;
				else return false;
			}
				
		]]>
	</fx:Script>

	
	<fx:Declarations>
		<my:remote id="pe" destination="policyBRS" >
			<my:method name="compilePolicy" result="compilePolicyHandler(event)" />
			<my:method name="getCompileStatus" result="getCompileStatusHandler(event)" />
		</my:remote>
		<my:remote id="rev" destination="revisionBRS" >
			<my:method name="save" result="saveRevisionHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="nolicense"/>
		<s:State name="default"/>
	</s:states>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="right"/>
	</s:layout>
	
	<s:Group includeIn="default" includeInLayout="{canInstall()}" visible="{canInstall()}">
		<s:Button id="installButton" skinClass="com.mydlp.ui.skin.InstallBitmapLabelButton24Skin" 
				  label="@Resource(bundle = 'messages', key = 'toptoolbar.installPolicy')"
				  styleName="fontSize24Style" click="{installPolicy()}" 
				  includeInLayout="{compileProgress == 'done'}" visible="{compileProgress == 'done'}"/>
		<s:HGroup verticalAlign="middle"
				  includeInLayout="{compileProgress != 'done'}" visible="{compileProgress != 'done'}">
			<s:Label text="@Resource(bundle = 'messages', key = 'toptoolbar.compiling.message')" />
			<mx:ProgressBar indeterminate="true" width="100" height="10"
							labelPlacement="center" label="" labelWidth="0"/>
		</s:HGroup>
	</s:Group>
	
	<s:Spacer width="6" />
	<s:Label id="userLabel" />
	<s:Spacer width="4" />
	<s:Button skinClass="com.mydlp.ui.skin.SettingsBitmapButton16Skin" 
			  toolTip="@Resource(bundle = 'messages', key = 'toptoolbar.settings')"
			  click="settingButtonClickHandler(event)"/>
	<s:Button skinClass="com.mydlp.ui.skin.CloseBitmapButton16Skin" 
			  click="logoutButtonClickHandler(event)"
			  toolTip="@Resource(bundle = 'messages', key = 'toptoolbar.logout')"/>
</s:Group>
