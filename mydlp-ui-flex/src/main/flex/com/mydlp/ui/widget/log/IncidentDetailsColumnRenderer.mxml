<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					clipAndEnableScrolling="true"
					width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.IncidentLog;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.widget.policy.rule.RuleContainer;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			protected function getPolicyText(value:*):String {
				if (value == null) return "";
				var log:IncidentLog = value as IncidentLog;
				var labelText:String = "";
				
				if (log.informationTypeId != -1)
				{
					var rule:Rule = RuleContainer.getRule(log.ruleId, false);
					var informationType:InformationType = findInformationType(rule, log.informationTypeId);
					
					labelText += LangUtil.getString("messages","log.container.column.policy.informationType") + ": ";
					if (informationType != null)
						labelText += informationType.coupledInventoryItem.label;
					else
						labelText += "id(" + log.informationTypeId + ")";
				}
				
				if (log.matcherMessage != null && log.matcherMessage.length > 0 )
				{
					if (labelText != "")
						labelText += "\n";
					if (log.matcherMessage.substr(0,5) == "score" )
					{
						labelText += "\n" + LangUtil.getString("messages","log.container.column.details.score") + ": ";
						labelText += log.matcherMessage.substr(6);
					}
					else
					{
						var sIndex:int = log.matcherMessage.indexOf(" ");
						var appendix:String = "";
						var keyAppendix:String = log.matcherMessage;
						if (sIndex != -1)
						{
							appendix = " " + log.matcherMessage.substr(sIndex + 1);
							keyAppendix = log.matcherMessage.substr(0, sIndex);
						}
						
						labelText += LangUtil.getString("messages","log.container.column.details.reason") + ": ";
						labelText += LangUtil.getString("messages","log.container.column.details.reason." + keyAppendix);
						labelText += appendix;
					}
				}
				
				return labelText;
			}
			
			protected static function findInformationType(rule:Rule,informationTypeId:Number): InformationType
			{
				if (rule == null || isNaN(informationTypeId)) return null;
				for each (var i:* in rule.ruleItems)
				{
					var ri:RuleItem = i as RuleItem;
					if (ri.item is InformationType && (ri.item as InformationType).id == informationTypeId)
						return ri.item as InformationType;
				}
				return null;
			}
			
			protected function detailButtonClickHandler(event:MouseEvent):void
			{
				var lmdp:LogMatcherDetailsPopup = InteractionUtil.newPopup(LogMatcherDetailsPopup) as LogMatcherDetailsPopup;
				lmdp.matcherDetails = (data as IncidentLog).matchingDetails;
				lmdp.populate();
			}
			
			protected function hasMatchingDetails(value:*): Boolean
			{
				if (value == null) return false;
				var log:IncidentLog = value as IncidentLog;
				if (log == null) return false;
				if (log.matchingDetails != null && log.matchingDetails.length > 0) return true;
				return false;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	
	<s:VGroup width="100%"
			  paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4">
		<s:Label id="lblData" text="{getPolicyText(data)}"/>
	</s:VGroup>
	
	<s:Group includeIn="selected" 
			 includeInLayout="{hasMatchingDetails(data)}" visible="{hasMatchingDetails(data)}"
			 top="0" bottom="0" right="2" width="16" >
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="left"/>
		</s:layout>
		<s:Button id="matchingDetailButton" 
				  click="detailButtonClickHandler(event)" 
				  skinClass="com.mydlp.ui.skin.GenerateReportBitmapButton16Skin"
				  toolTip="@Resource(bundle = 'messages', key = 'log.matchingDetails.tooltip')"/>
	</s:Group>
	
</s:GridItemRenderer>
