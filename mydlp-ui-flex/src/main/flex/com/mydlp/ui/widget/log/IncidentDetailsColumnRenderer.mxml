<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.IncidentLog;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			protected function getPolicyText(value:*):String {
				if (value == null) return "";
				
				var log:IncidentLog = value as IncidentLog;
				var labelText:String = "";
				
				if (log.informationTypeId != -1)
				{
					var rule:Rule = FlexGlobals.topLevelApplication.ruleContainer.getRule(log.ruleId);
					var informationType:InformationType = findInformationType(rule, log.informationTypeId);
					
					labelText += LangUtil.getString("messages","log.container.column.policy.informationType") + ": ";
					if (informationType != null)
						labelText += informationType.coupledInventoryItem.label;
					else
						labelText += "id(" + log.informationTypeId + ")";
					
					if (log.matcherMessage.substr(0,5) == "score" )
					{
						labelText += "\n" + LangUtil.getString("messages","log.container.column.details.score") + ": ";
						labelText += log.matcherMessage.substr(6);
					}
				} else
				{
					if (log.matcherMessage != null && (
						log.matcherMessage == "archive_inbound" ||
						log.matcherMessage == "max_size_exceeded" ||
						log.matcherMessage == "timeout" ||
						log.matcherMessage == "usb_device_id_unknown" ||
						log.matcherMessage == "usb_device_rejected"
						))
					{
						labelText += LangUtil.getString("messages","log.container.column.details.reason") + ": ";
						labelText += LangUtil.getString("messages","log.container.column.details.reason." + log.matcherMessage);
					}
				}
				
				return labelText;
			}
			
			protected static function findInformationType(rule:Rule,informationTypeId:Number): InformationType
			{
				if (rule == null || isNaN(informationTypeId)) return null;
				for each (var i:* in rule.ruleItems)
				{
					var ri:RuleItem = i as RuleItem;
					if (ri.item is InformationType && (ri.item as InformationType).id == informationTypeId)
						return ri.item as InformationType;
				}
				return null;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="4" paddingTop="4" paddingLeft="4"/>
	</s:layout>
	
	<s:Label id="lblData" text="{getPolicyText(data)}"/>
	
</s:GridItemRenderer>
