<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  xmlns:util="com.mydlp.ui.util.*" 
					  xmlns:dashboard="com.mydlp.ui.widget.dashboard.*"
					  width="100%" height="100%"
					  creationComplete="{refreshDashboard()}">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.DashboardItem;
			import com.mydlp.ui.domain.UserSettings;
			import com.mydlp.ui.util.InteractionUtil;
			
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var userSettings:UserSettings = null;
			
			public function refreshDashboard(): void
			{
				if(isAdmin())
					re.getUserSettings();
			}
			
			protected function getUserSettingsHandler(event:ResultEvent): void
			{
				userSettings = event.result as UserSettings;
				populateDashboardItems();
			}
			
			protected function populateDashboardItems(): void
			{
				if (userSettings == null) return;
				dashboardItems.removeAllElements();
				for each (var i:* in userSettings.dashboardItems)
				{
					var dashboardItem:DashboardItem = i as DashboardItem;
					var dashboardItemBox:DashboardItemBox = null;
					if (dashboardItem.dasboardItemKey == DashboardItem.INCIDENTS_BY_PROTOCOLS_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.INCIDENTS_BY_PROTOCOLS_24H )
					{
						dashboardItemBox = new PieChartBox();
					} else if (dashboardItem.dasboardItemKey == DashboardItem.INCIDENT_BY_ACTIONS_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.INCIDENT_BY_ACTIONS_24H )
					{
						dashboardItemBox = new PieChartBox();
					} else if (dashboardItem.dasboardItemKey == DashboardItem.TOP_5_ADDRESS_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.TOP_5_ADDRESS_24H )
					{
						dashboardItemBox = new HBarChartBox();
					} else if (dashboardItem.dasboardItemKey == DashboardItem.TOP_5_USERS_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.TOP_5_USERS_24H )
					{
						dashboardItemBox = new HBarChartBox();
					} else if (dashboardItem.dasboardItemKey == DashboardItem.TOP_5_RULES_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.TOP_5_RULES_24H )
					{
						dashboardItemBox = new HBarChartBox();
					} else if (dashboardItem.dasboardItemKey == DashboardItem.TOP_5_ITYPES_1H ||
						dashboardItem.dasboardItemKey == DashboardItem.TOP_5_ITYPES_24H )
					{
						dashboardItemBox = new HBarChartBox();
					} // else if (dashboardItem.dasboardItemKey == DashboardItem.RSS_MYDLP_BLOG) 
						//dashboardItem.dasboardItemKey == DashboardItem.RSS_DATALOSSDB )
					//{
					//	dashboardItemBox = new RSSFeedBox();
					//} 
					
					if (dashboardItemBox != null)
					{
						var dashboardItemContainer:DashboardItemContainer = new DashboardItemContainer();
						dashboardItemBox.itemKey = dashboardItem.dasboardItemKey;
						dashboardItemContainer.container.addElement(dashboardItemBox);
						dashboardItemContainer.itemKey = dashboardItem.dasboardItemKey; 
						dashboardItems.addElement(dashboardItemContainer);
					}
				}
			}
			
			public function addDashboardItem(value:String): void {
				for each (var i:* in userSettings.dashboardItems)
					if ((i as DashboardItem).dasboardItemKey == value)
						return;
				var d:DashboardItem = new DashboardItem();
				d.dasboardItemKey = value;
				d.userSettings = userSettings;
				re.register(value);
				d.save();
			}
			
			public function removeDashboardItem(value:String): void {
				for each (var i:* in userSettings.dashboardItems)
					if ((i as DashboardItem).dasboardItemKey == value)
					{
						i.deleteRecord();
						return;
					}
			}
			
			protected function newDashboardItem(event:MouseEvent):void
			{
				var dip:DasboardItemPopup = InteractionUtil.newPopup(DasboardItemPopup) as DasboardItemPopup;
				FlexGlobals.topLevelApplication.currentPopup = dip;
			}
			
			public function addLicenseElements(licenseState:String):void
			{
				this.currentState = licenseState;
				var licenseDayInformation:LicenseDayInformation = new LicenseDayInformation();
				//licenseGroup.addElement(licenseDayInformation);
				/*
				if(isAdmin())
				{
					var licenseKeyEntrance:LicenseKeyEntrance = new LicenseKeyEntrance();
					licenseGroup.addElement(licenseKeyEntrance);
				}
				*/
			}
			
			protected function isAdmin():Boolean
			{
				var currentUser:AuthUser = FlexGlobals.topLevelApplication.user;
				if(currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN) || currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					return true;
				else return false;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="dashboardBRS" >
			<my:method name="getUserSettings" result="getUserSettingsHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="default" />
		<s:State name="nolicense" />
		<s:State name="softLimit"/>
		<s:State name="near"/>
	</s:states>
	
	
	<s:layout>
		<s:HorizontalLayout horizontalAlign="center" />
	</s:layout>
	
	<!--<s:Group width="400" height="100%" id="licenseGroup" includeIn="default, softLimit, near">
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center" gap="20"/>
		</s:layout>
		<s:Spacer height="12%" />
		<dashboard:LicenseBox id="licenseBox" currentState.nolicense="nolicense" currentState="default"/>
		<s:Spacer height="2%" />
	</s:Group>-->
	<s:VGroup width="100%" height="100%" paddingLeft="20" paddingTop="20" gap="20" includeIn="default, softLimit, near">
		<s:HGroup gap="30">
			<s:Button skinClass="com.mydlp.ui.skin.AddBitmapLabelButton24Skin" 
					  label="@Resource(key='dashboard.additem', bundle='messages')"
					  click="{newDashboardItem(event)}" styleName="fontSize24Style"
					  includeInLayout="{isAdmin()}"
					  visible="{isAdmin()}"/>
			
			<s:Button skinClass="com.mydlp.ui.skin.GetReportBitmapLabelButton24Skin"
					  label="@Resource(bundle = 'messages', key = 'dashboard.displayWeeklyReport.label')"
					  styleName="fontSize24Style" click="{InteractionUtil.newPopup(ReportPopup) as ReportPopup}"
					  includeInLayout="{isAdmin()}"
					  visible="{isAdmin()}"/>
		</s:HGroup>

		<s:Scroller height="100%" width="100%">
			<s:Group id="dashboardItems" width="100%" height="100%">
				<s:layout>
					<s:TileLayout horizontalGap="40" verticalGap="25"/>
				</s:layout>
			</s:Group>
		</s:Scroller>
	</s:VGroup>
</s:SkinnableContainer>
