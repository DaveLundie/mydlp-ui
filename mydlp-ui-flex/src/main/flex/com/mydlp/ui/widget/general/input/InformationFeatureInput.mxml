<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:domain="com.mydlp.ui.domain.*"
					  xmlns:input="com.mydlp.ui.widget.general.input.*"
					  xmlns:popup="com.mydlp.ui.widget.general.popup.*"
					  width="{InputLabel.VERTICAL_INPUT_WIDTH}" height="150"
					  creationComplete="{refreshDisplay()}" 
					  xmlns:util="com.mydlp.ui.util.*">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.InformationFeature;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.NonCascadingArgument;
			import com.mydlp.ui.domain.RegularExpression;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.general.popup.GenericEditContainer;
			import com.mydlp.ui.widget.general.popup.InputLabel;
			
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			
			public var deleteList:ListCollectionView = null;
			
			protected static const distancesMatchers:ListCollectionView = new ArrayCollection(new Array(
				"cc",
				"cc_track1",
				"cc_track2",
				"cc_track3",
				"ssn",
				"iban",
				"aba",
				"trid",
				"canada_sin",
				"france_insee",
				"uk_nino",
				"said",
				"pan",
				"cpf",
				"china_icn",
				"cc_edate",
				"birthdate",
				"gdate",
				"keyword",
				"keyword_group",
				"regex",
				"spain_dni",
				"italy_fc",
				"dna",
				"ten_digit",
				"nine_digit",
				"fe_digit",
				"ip",
				"mac",
				"icd10"
			));
			
			protected static const exclusiveMatchers:ListCollectionView = new ArrayCollection(new Array(
				"all", 
				"encrypted_file",
				"encrypted_archive",
				"document_hash",
				"document_pdm",
				"scode",
				"scode_ada"
			));
			
			protected function removeClickHandler(event:MouseEvent):void
			{
				ifList.dataGroup.invalidateDisplayList();
				for each (var o:Object in ifList.selectedIndices)
				{
					deleteList.addItem(informationFeatures.getItemAt(o as int));
					informationFeatures.removeItemAt(o as int);		
				}
				
				refreshDisplay();
			}
			
			protected function isDuplicateIft(ift:InformationFeature, matcherName:String, arg:* = null): Boolean
			{	
				if (ift.matcher.functionName == matcherName)
				{
					if (matcherName == "keyword" || matcherName == "regex") 
					{
						return (ift.matcher.matcherArguments.getItemAt(0).coupledArgument as RegularExpression).regex == arg
					}
					else if (matcherName == "document_hash" || matcherName == "document_pdm" || matcherName == "keyword_group" )
					{
						return (ift.matcher.matcherArguments.getItemAt(0).coupledArgument as NonCascadingArgument).argument.uid == arg.uid;
					}
					
					return true;
				}
				return false;
			}
			
			public function validateAddFor(matcherName:String, isEdit:Boolean = false, arg:* = null): String
			{
				if (isExclusive())
				{
					return "error.anExclusiveMatcherIsPresent";
				}
				
				if (exclusiveMatchers.contains(matcherName))
				{
					if (informationFeatures.length == 0 )
					{
						return isMatcherSane(matcherName, arg);
					}
					else
					{
						return "error.exclusiveCanOnlyBeenAddToEmptyList";
					}
				}
				else if (distancesMatchers.contains(matcherName))
				{
					for each (var i:InformationFeature in informationFeatures)
					{
						if (!isEdit && isDuplicateIft(i, matcherName, arg))
						{
							return "error.duplicateExists";
						}
						if (! distancesMatchers.contains(i.matcher.functionName))
						{
							// currently non distance means exclusive, please change this message if behaviour changes.
							return "error.anExclusiveMatcherIsPresent";
						}
					}
					
					return isMatcherSane(matcherName, arg);
				}
				else 
					throw new Error ("Unexpected matcher");
			}
			
			protected function isMatcherSane(matcherName:String, arg:* = null): String
			{
				if (matcherName == "document_hash" || matcherName == "document_pdm")
				{
					if (arg == null)
					{
						return "error.shouldSelectADocumentDatabase";
					}
				}
				else if (matcherName == "keyword_group")
				{
					if (arg == null)
					{
						return "error.shouldSelectAKeywordGroup";
					}
				}
				else if (matcherName == "keyword" || matcherName == "regex")
				{
					if (arg == null || ! arg is String || (arg as String).length == 0)
					{
						return "error.shouldEnter." + matcherName;
					}
					var regexStrArg:String = arg as String;
					regexStrArg = regexStrArg.replace( /^\s+/ , '');
					regexStrArg = regexStrArg.replace( /\s+$/ , '');
					
					if ( regexStrArg.length == 0 || regexStrArg.match( /^\s+$/ ) )
					{
						return "error.enteredTextOnlyConsistsOfWhiteSpaces";
					}
					
					if ((matcherName == "keyword" && regexStrArg.length < 3) ||
						(matcherName == "regex" && regexStrArg.length < 8) )
					{
						return "error.enteredTextIsTooShort." + matcherName;
					}
				}
				
				return "ok";
			}
			
			public function isExclusive(): Boolean
			{
				return 	informationFeatures.length == 1 &&
						exclusiveMatchers.contains(informationFeatures.getItemAt(0).matcher.functionName);
			}
			
			public function addInformationFeature(ift:InformationFeature): void
			{
				informationFeatures.addItem(ift);
				refreshDisplay();
			}
			
			public function refreshDisplay(): void
			{
				addButton.enabled=(! isExclusive());
				setDistanceInputEnabled();
				ifList.invalidateList();
			}
			
			protected function setDistanceInputEnabled(): void
			{
				var distanceApplicable:Boolean = isDistanceInputEnabled();
				distanceGroup.enabled = distanceApplicable;
				if (!distanceApplicable)
					distanceEnabled = false; 
			}
			
			protected function isDistanceInputEnabled(): Boolean
			{
				if (informationFeatures == null || informationFeatures.length < 1)
					return false;
				for each (var ift:InformationFeature in informationFeatures)
					if (!distancesMatchers.contains(ift.matcher.functionName))
						return false;
				return true;
			}
			
			protected function addClickHandler(event:MouseEvent):void
			{
				var ifp:InformationFeaturePopup = InteractionUtil.newPopup(InformationFeaturePopup) as InformationFeaturePopup;
				ifp.informationFeatureInput = this;
				ifp.isEdit = false;
				ifp.populate();
			}
			
			protected function editClickHandler(event:MouseEvent):void
			{
				ifList.invalidateDisplayList();
				if(ifList.selectedItem == null)
					return;
				var ifp:InformationFeaturePopup = InteractionUtil.newPopup(InformationFeaturePopup) as InformationFeaturePopup;
				ifp.informationFeatureInput = this;
				ifp.informationFeatureObject = ifList.selectedItem;
				ifp.isEdit = true;
				ifp.populate();
				ifList.validateDisplayList();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:ListCollectionView id="informationFeatures"/>
		<fx:String id="distance"/>
		<fx:Boolean id="distanceEnabled"/>
	</fx:Declarations>

	<s:layout>
		<s:VerticalLayout verticalAlign="middle" paddingTop="10"/>
	</s:layout>
	
	<s:HGroup id="distanceGroup" gap="3" verticalAlign="middle" 
			  includeInLayout="{SessionUtil.isEnterprise()}" visible="{SessionUtil.isEnterprise()}">
		<s:CheckBox id="distanceEnabledInput" selected="@{distanceEnabled}" width="15" />
		<s:Label width="120" text="@Resource(bundle = 'messages', key = 'generic.edit.InformationDescription.distance.label')"  
				 fontWeight="bold" />
		<s:TextInput id="distanceValueInput" width="{InputLabel.HORIZONTAL_INPUT_WIDTH - 18}" text="@{distance}" 
					 enabled="{distanceEnabledInput.selected}" />
	</s:HGroup>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout gap="2" verticalAlign="middle"/>
		</s:layout>
		<util:MyList id="ifList" width="87%" height="100%" dataProvider="{informationFeatures}"
				itemRenderer="com.mydlp.ui.widget.general.input.InformationFeatureRenderer"/>
		
		<s:Group width="13%" height="100%">
			<s:layout>
				<s:VerticalLayout gap="2" horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:Button id="addButton" 
					  click="addClickHandler(event)"
					  skinClass="com.mydlp.ui.skin.AddBitmapButton32Skin"/>
			<s:Button click="editClickHandler(event)"
					  enabled="{ifList.selectedItem != null}"
					  skinClass="com.mydlp.ui.skin.EditBitmapButton32Skin"/>
			<s:Button click="removeClickHandler(event)"
					  enabled="{ifList.selectedItem != null}"
					  skinClass="com.mydlp.ui.skin.RemoveBitmapButton32Skin"/>
			
		</s:Group>
	</s:Group>
	
</s:SkinnableContainer>
