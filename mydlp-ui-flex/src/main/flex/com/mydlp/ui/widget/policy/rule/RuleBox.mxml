<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my" 
		 xmlns:domain="com.mydlp.ui.domain.*" 
		 xmlns:rule="com.mydlp.ui.widget.policy.rule.*" 
		 creationComplete="onCreationComplete(event)"
		 dragEnter="onDragEnter(event)"
		 dragDrop="onDragDrop(event)"
		 >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.RuleItem;
			
			import flashx.textLayout.formats.ITabStopFormat;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			[Bindable]
			public var ruleObject:* = null;
			
			[Bindable]
			protected var sourceDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var matcherDataProvider:ArrayCollection = new ArrayCollection();
			
			public function refreshDataProviders(): void
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				for each (var ruleItem:* in ruleItems)
				{
					if (ruleItem.item is Network)
						sourceDataProvider.addItem(ruleItem);
					else if (ruleItem.item is InformationType)
						matcherDataProvider.addItem(ruleItem);
				}
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				invalidateDisplayList();
				refreshDataProviders();
				validateNow();
			}
			
			protected function onDragEnter(dragEvent:DragEvent):void
			{
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				var dragInitiator:IUIComponent = dragEvent.dragInitiator;
				
				if(FlexGlobals.topLevelApplication.inventoryTree.selectedItem.item is Network && this.currentState != "webRule")
					DragManager.showFeedback(DragManager.NONE);
				else
					DragManager.acceptDragDrop(dropTarget);
			}
			
			protected function onDragDrop(dragEvent:DragEvent):void
			{
				var dragSource:DragSource = dragEvent.dragSource;
				var dragInitiator:IUIComponent = dragEvent.dragInitiator;
				var dropTarget:Object = dragEvent.currentTarget;
				DragManager.showFeedback(DragManager.COPY);
	
				var sourceItem:Item = FlexGlobals.topLevelApplication.inventoryTree.selectedItem.item;
				
				if(sourceItem is Network && (this.currentState == "webRule" ))
					saveDroppedObject(sourceItem);
				else if(sourceItem is InformationType)
					saveDroppedObject(sourceItem);
			}
			
			protected function saveDroppedObject(sourceItem:Item):void
			{
				var newItem:RuleItem = new RuleItem();
				newItem.item = sourceItem;
				newItem.rule = ruleObject;
				ruleObject.ruleItems.addItem(newItem);
				re.save(ruleObject);
			}
			
			protected function saveHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="save" result="saveHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<s:states>
		<s:State name="defaultState"/>
		<s:State name="webRule"/>
		<s:State name="mailRule"/>
		<s:State name="endpointRule"/>
	</s:states>
	
	<s:SkinnableContainer id="labelBox" width="175" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" gap="2"/>
		</s:layout>
		<s:BitmapImage includeIn="webRule" source="@Embed('/assets/icons/32x32/wireless.png')"/>
		<s:BitmapImage includeIn="mailRule" source="@Embed('/assets/icons/32x32/mail.png')"/>
		<s:BitmapImage includeIn="endpointRule" source="@Embed('/assets/icons/32x32/computer.png')"/>
		<s:Label id="nameLabel" text="{ruleObject.label}"/>
	</s:SkinnableContainer>
	
	<rule:RuleItemList id="sourceList" includeIn="webRule" 
					 width="210" height="100%"
					 dataProvider="{sourceDataProvider}"
					 />
	
	<rule:RuleItemList id="matcherList" 
					 width="210" height="100%"
					 dataProvider="{matcherDataProvider}" 
					 />
	
	<rule:ActionBox id="actionBox" width="100" height="100%" action="@{ruleObject.action}" />
	
</s:SkinnableContainer>