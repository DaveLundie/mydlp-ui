<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:input="com.mydlp.ui.widget.general.input.*"
			   close="{close()}"
			   visible="false" width="400" height="100%"
			   title="@Resource(bundle = 'messages', key = 'regularExpression.title.label')" xmlns:util="com.mydlp.ui.util.*"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.InformationFeature;
			import com.mydlp.ui.domain.RegularExpressionGroupEntry;
			import com.mydlp.ui.util.FileUtil;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SpecialCharacterUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.messaging.messages.ISmallMessage;
			
			import spark.events.TextOperationEvent;
			
			public var regularExpressionGroupInput:RegularExpressionGroupInput = null;
			
			[Bindable]
			public var regexEntry:RegularExpressionGroupEntry = null;
			
			public var fileReference:FileReference = null;
			
			[Bindable]
			public var keywordsFromFileDP:ArrayCollection = new ArrayCollection();
			
			public static var selectedKeywordsFromFile:ArrayCollection = new ArrayCollection();
			
			
			protected function close(): void
			{
				InteractionUtil.closePopup(this);
			}
			
			protected function addNewFeature(event:MouseEvent):void
			{
				var isEdit:Boolean = false;
				if (regexEntry == null)
					regexEntry = new RegularExpressionGroupEntry();
				else 
					isEdit = true;
				
				if(selectedKeywordsFromFile.length != 0)
				{
					for (var i:int = 0; i < selectedKeywordsFromFile.length; i++)
					{
						var escapedRegex:String = SpecialCharacterUtil.escapeSpecialCharacters(
								selectedKeywordsFromFile.getItemAt(i) as String, 
								SpecialCharacterUtil.regex);
						var newregex:RegularExpressionGroupEntry = new RegularExpressionGroupEntry;
						newregex.regex = escapedRegex;
						regularExpressionGroupInput.addEntry(newregex);
					}
				}
				else
				{
					regexEntry.regex = SpecialCharacterUtil.escapeSpecialCharacters(keyword.text, SpecialCharacterUtil.regex);
				
					if (!isEdit)
						regularExpressionGroupInput.addEntry(regexEntry);
				}
				
				selectedKeywordsFromFile.removeAll();
				close();
			}
			
			public function populate():void
			{
				if (regexEntry != null)
				{
					keyword.text = InformationFeature.removeEscapeCharacter(regexEntry.regex.toString());
				}
				
				visible = true;
			}
			
			protected function addToKeywordList(i:*): void
			{
				if (keywordsFromFileDP == null)
					keywordsFromFileDP = new ArrayCollection();
				keywordsFromFileDP.addItem(i);
				if (selectedKeywordsFromFile == null)
					selectedKeywordsFromFile = new ArrayCollection();
				selectedKeywordsFromFile.addItem(i);
			}
			
			protected function onUploadCompleteHandler(event:Event):void
			{
				var data:ByteArray = new ByteArray();
				fileReference.data.readBytes(data, 0, fileReference.data.length);
				var fileData:String = data.readUTFBytes(data.length);
				var extractedKeywords:ListCollectionView = FileUtil.splitString(fileData);
				for each (var i:* in extractedKeywords)
					if (isKeywordSane(i) == "ok")
						addToKeywordList(i);
				
				if (selectedKeywordsFromFile.length > 0)
				{
					selectFromFileButton.enabled = false;
					saveButton.enabled = true;
				}
				if(selectedKeywordsFromFile.length < 10)
					fileKeywordList.height = 150;
				else
					fileKeywordList.height = 200;
				saveButton.enabled = true;
			}
			
			protected function onFileSelectHandler(event:Event):void
			{
				fileReference.addEventListener(Event.COMPLETE, onUploadCompleteHandler);
				fileReference.load();
			}
			
			protected function selectButtonHandler(event:Event):void
			{
				fileReference = new FileReference;
				fileReference.addEventListener(Event.SELECT, onFileSelectHandler);
				fileReference.browse();	
			}
			
			protected function onSelectionHandler(event:ItemClickEvent):void
			{
				if(event.currentTarget.selectedValue == "file")
				{
					this.currentState = "file";
				}
				else
				{
					this.currentState = "text";
				}
				clearInputs();
			}
			
			protected function hasKeyword(k:String): Boolean
			{
				for each (var s:String in keywordsFromFileDP)
					if (s.toLowerCase() == k.toLowerCase())
						return true;
				return false;
			}
			
			protected function isKeywordSane(arg:* = null): String
			{
				if (arg == null || ! arg is String || (arg as String).length == 0) 
				{
					return "error.keywordFromFile.isNull";
				}
				var regexStrArg:String = arg as String;
				regexStrArg = regexStrArg.replace( /^\s+/ , '');
				regexStrArg = regexStrArg.replace( /\s+$/ , '');
				
				if ( regexStrArg.length == 0 || regexStrArg.match( /^\s+$/ ) )
				{
					return "error.keywordFromFile.isOnlyConsistsOfWhiteSpaces";
				}
				
				if (regexStrArg.length < 3)
				{
					return "error.keywordFromFile.isTooShort";
				}
				
				if (hasKeyword(regexStrArg))
				{
					return "error.keywordFromFile.alreadyAdded";
				}
				
				if (regularExpressionGroupInput.hasRegex(
					SpecialCharacterUtil.escapeSpecialCharacters(
							regexStrArg, 
							SpecialCharacterUtil.regex)))
				{
					return "error.keywordFromFile.alreadyIncluded";
				}
				
				return "ok";
			}
			
			protected function clearInputs():void
			{
				keywordsFromFileDP = new ArrayCollection();
				selectedKeywordsFromFile = new ArrayCollection();
				fileReference = null;
				if (keyword != null)
					keyword.text = "";
				if (saveButton != null)
					saveButton.enabled = false;
				if (selectFromFileButton != null)
					selectFromFileButton.enabled = true;
				if (fileKeywordList != null)
					fileKeywordList.invalidateList();
			}
			
			protected function keywordInputChangeHandler(event:TextOperationEvent):void
			{
				var saneRes:String = isKeywordSane(keyword.text);
				if (saneRes == "ok")
				{
					saveButton.enabled = true;
					msgLabel.text = "";
					msgGroup.includeInLayout = false;
					msgGroup.visible = false;
				}
				else
				{
					saveButton.enabled = false;
					msgLabel.text = LangUtil.getString("messages", "regexGroupEntryFeature.popup.add." + saneRes + ".message");
					msgGroup.includeInLayout = true;
					msgGroup.visible = true;
				}
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:RadioButtonGroup id="selection" itemClick="onSelectionHandler(event)"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="default"/>
		<s:State name="file" enterState="clearInputs()"/>
		<s:State name="text" enterState="clearInputs()"/>
		<s:State name="edit"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="10"
						  paddingLeft="8" paddingRight="8"
						  paddingTop="5" paddingBottom="5"/>
	</s:layout>
	
	<s:Group>
		<s:layout >
			<s:VerticalLayout horizontalAlign="left"/>
		</s:layout>
		
	<s:RadioButton id="fromFile" groupName="selection" value="file" excludeFrom="edit"
				   label="@Resource(bundle = 'messages', key = 'regularExpression.add.importFromFile.label')" />
	<s:RadioButton id="asText" groupName="selection" value="text" excludeFrom="edit"
				   label="@Resource(bundle = 'messages', key = 'regularExpression.add.asText.label')" />
	</s:Group>
	
	<s:Form id="form" includeIn="text, edit"  >
		<s:FormItem label="@Resource(bundle = 'messages', key = 'regularExpression.name.label')" >
			<s:TextInput id="keyword" includeIn="text, edit" itemCreationPolicy="immediate"
						 change="keywordInputChangeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	
	<s:Button id="selectFromFileButton" label="@Resource(bundle = 'messages', key = 'regularExpression.selectFile.button.label')"
			  includeIn="file" click="selectButtonHandler(event)"/>
	<s:Group width="100%" height="100%">
		<util:MyList dataProvider="{keywordsFromFileDP}" id="fileKeywordList" includeIn="file" 
					 borderVisible="false" width="100%" horizontalScrollPolicy="auto"
					 itemRenderer="com.mydlp.ui.widget.general.input.RegularExpressionGroupPopupListRenderer"/>
	</s:Group>
	
	<s:VGroup width="100%" gap="5" horizontalAlign="center" paddingBottom="10" paddingTop="5">
		<s:HGroup id="msgGroup" width="100%" includeInLayout="false" visible="false" 
				  paddingLeft="5" paddingRight="5" gap="5"
				  verticalAlign="middle" horizontalAlign="left">
			<s:BitmapImage source="@Embed('/assets/icons/16x16/warning.png')" width="16" height="16"/>
			<s:Label id="msgLabel" width="100%" text=""/>
		</s:HGroup> 
		<s:Group>
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle" gap="10"/>
			</s:layout>
			<s:Button id="saveButton" label="@Resource(bundle = 'messages', key = 'regularExpression.button.save.label')" 
					  click="addNewFeature(event)" enabled="false" />
			<s:Button label="@Resource(bundle = 'messages', key = 'regularExpression.button.cancel.label')" click="{close()}"/>
		</s:Group>
	</s:VGroup>
</s:TitleWindow>
