<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:option="com.mydlp.ui.widget.option.*"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  creationComplete="{init()}"
					  visible="false">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.Config;
			import com.mydlp.ui.util.SessionUtil;
			
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			[Bindable]
			public var configs:ListCollectionView = null;
			
			protected var inputValidationObject:Object = new Object();
			
			public var validators:Array = new Array();
			
			protected function getConfigsHandler(event:ResultEvent):void
			{
				configs = event.result as ListCollectionView;
				populate();
			}
			
			protected function initValidators(): void
			{
				validators.push(protocolsTab.icapRegExValidator);
				validators.push(protocolsTab.icapConValidator);
				validators.push(enterpriseTab.icapLogPassValidator);
				validators.push(protocolsTab.icapTTLValidator);
				validators.push(protocolsTab.smtpHeloNameValidator);
				validators.push(protocolsTab.smtpNextHopHostValidator);
				validators.push(protocolsTab.smtpNextHopPortValidator);
				validators.push(epTab.epLogValidator);
				validators.push(epTab.epSyncValidator);
				validators.push(epTab.discSyncValidator);
			}
			
			protected function initEnterprise(): void
			{
				var tempMiscTab:UIComponent = tabbar.dataGroup.getElementAt(4) as UIComponent;
				tempMiscTab.visible = SessionUtil.isEnterprise();
				tempMiscTab.enabled = SessionUtil.isEnterprise();
				tempMiscTab.includeInLayout = SessionUtil.isEnterprise();
				var tempEnterpriseTab:UIComponent = tabbar.dataGroup.getElementAt(5) as UIComponent;
				tempEnterpriseTab.visible = SessionUtil.isEnterprise();
				tempEnterpriseTab.enabled = SessionUtil.isEnterprise();
				tempEnterpriseTab.includeInLayout = SessionUtil.isEnterprise();
				var tempIRMTab:UIComponent = tabbar.dataGroup.getElementAt(6) as UIComponent;
				tempIRMTab.visible = SessionUtil.isEnterprise();
				tempIRMTab.enabled = SessionUtil.isEnterprise();
				tempIRMTab.includeInLayout = SessionUtil.isEnterprise();
			}
			
			protected function init():void
			{
				initValidators();
				refresh();
				initEnterprise();
			}
			
			public function refresh(): void
			{
				re.getConfigs();
			}
			
			protected function populate():void
			{
				if (configs == null) return;
				for each (var c:* in configs)
				{
					var config:Config = c as Config;
					if (config.key == "error_action") advancedTab.errorAction = config;
					else if (config.key == "mail_archive") enterpriseTab.mailArchive = config;
						
					else if (config.key == "smtp_helo_name") protocolsTab.smtpHeloName = config;
					else if (config.key == "smtp_next_hop_host") protocolsTab.smtpNextHopHost = config;
					else if (config.key == "smtp_next_hop_port") protocolsTab.smtpNextHopPort = config;
					else if (config.key == "smtp_bypass_on_fail") protocolsTab.smtpBypassOnFail = config;
						
					else if (config.key == "icap_reqmod_path") protocolsTab.icapReqModPath = config;
					else if (config.key == "icap_respmod_path") protocolsTab.icapRespModPath = config;
					else if (config.key == "icap_max_connections") protocolsTab.icapMaxConnections = config;
					else if (config.key == "icap_options_ttl") protocolsTab.icapOptionsTTL = config;
					else if (config.key == "icap_log_pass") enterpriseTab.icapLogPass = config;
					else if (config.key == "icap_log_pass_lower_limit") enterpriseTab.icapLogPassLowerLimit = config;
						
					else if (config.key == "archive_inbound") enterpriseTab.archiveInbound = config;
					else if (config.key == "archive_minimum_size") enterpriseTab.archiveMinimumSize = config;
					else if (config.key == "maximum_object_size") advancedTab.maximumObjectSize = config;
					else if (config.key == "maximum_memory_object") advancedTab.maximumMemoryObject = config;
					else if (config.key == "maximum_chunk_size") advancedTab.maximumChunkSize = config;
					else if (config.key == "supervisor_max_restart_count") advancedTab.supervisorMaxRestartCount = config;
					else if (config.key == "supervisor_max_restart_time") advancedTab.supervisorMaxRestartTime = config;
					else if (config.key == "supervisor_kill_timeout") advancedTab.supervisorKillTimeout = config;
					else if (config.key == "fsm_timeout") advancedTab.fsmTimeout = config;
					else if (config.key == "spawn_timeout") advancedTab.spawnTimeout = config;
					else if (config.key == "query_cache_cleanup_interval") advancedTab.queryCacheCleanupInterval = config;
					else if (config.key == "query_cache_maximum_size") advancedTab.queryCacheMaximumSize = config;					
						
					else if (config.key == "auto_distribution") advancedTab.autoDistribution = config;
					else if (config.key == "auto_distribution_nodes") advancedTab.autoDistributionNodes = config;
						
					else if (config.key == "print_monitor") epTab.printMonitor = config;
					else if (config.key == "log_level") epTab.logLevel = config;
					else if (config.key == "log_limit") epTab.logLimit = config;
					else if (config.key == "sync_interval") epTab.syncInterval = config;
					else if (config.key == "discover_fs_interval") epTab.discoverFSInterval = config;
					else if (config.key == "discover_fs_paths") epTab.discoverFSPaths = config;
					else if (config.key == "discover_fs_on_startup") epTab.discoverFSOnStartup = config;
					else if (config.key == "ignore_discover_max_size_exceeded") epTab.ignoreDiscoverFSMaxSizeExceeded = config;
					
					else if (config.key == "usb_serial_access_control") usbAclTab.usbSerialAccessControl = config;
					
					else if (config.key == "syslog_acl_host") enterpriseTab.syslogAclHost = config;
					else if (config.key == "syslog_acl_port") enterpriseTab.syslogAclPort = config;
					else if (config.key == "syslog_acl_facility") enterpriseTab.syslogAclFacility = config;
					else if (config.key == "syslog_diag_host") enterpriseTab.syslogDiagHost = config;
					else if (config.key == "syslog_diag_port") enterpriseTab.syslogDiagPort = config;
					else if (config.key == "syslog_diag_facility") enterpriseTab.syslogDiagFacility = config;
					else if (config.key == "syslog_report_host") enterpriseTab.syslogReportHost = config;
					else if (config.key == "syslog_report_port") enterpriseTab.syslogReportPort = config;
					else if (config.key == "syslog_report_facility") enterpriseTab.syslogReportFacility = config;
					
					else if (config.key == "seclore_fs_enable")
					{
						irmTab.secloreFSEnable = config;
						IRMCustomActionPopup.secloreEnabled = (config.value == "true");
					}
					else if (config.key == "seclore_fs_address") irmTab.secloreFSAddress = config;
					else if (config.key == "seclore_fs_port") irmTab.secloreFSPort = config;
					else if (config.key == "seclore_fs_app_name") irmTab.secloreFSAppName = config;
					else if (config.key == "seclore_fs_hot_folder_cabinet_id") irmTab.secloreFSHotFolderCabinetId = config;
					else if (config.key == "seclore_fs_hot_folder_cabinet_passphrase") irmTab.secloreFSHotFolderCabinetPassphrase = config;
					else if (config.key == "seclore_fs_server_pool_size") irmTab.secloreFSServerPoolSize = config;
					else if (config.key == "seclore_fs_endpoint_pool_size") irmTab.secloreFSEndpointPoolSize= config;
					
					visible = true;
				}
			}
			
			public function saveButtonHandler(event:MouseEvent):void
			{
				var validationErrorArray:Array = Validator.validateAll(validators);
				if(validationErrorArray.length == 0)
				{
					re.saveAll(configs);
					saveButton.enabled = false;
				}
			}
			
			protected function saveAllHandler(event:ResultEvent):void
			{
				saveButton.enabled = true;
				// TODO: may be a local refresh
				FlexGlobals.topLevelApplication.refresh();
			}
			
			public function invalidInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = false;
				saveButton.enabled = false;
			}
			
			public function validInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = true;
				for (var i:* in inputValidationObject)
					if(inputValidationObject[i] as Boolean == false) return;
				saveButton.enabled = true;				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="configBRS">
			<my:method name="getConfigs" result="getConfigsHandler(event)"/>
			<my:method name="saveAll" result="saveAllHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout gap="0" paddingTop="4" />
	</s:layout>
	
	<s:TabBar dataProvider="{vs}" fontSize="14" fontWeight="bold" id="tabbar"/>
	
	<s:Group id="optionContainerGroup" width="980" height="580">
		<s:Rect left="0" right="0" top="0" bottom="30">
			<s:stroke>
				<s:SolidColorStroke color="0xACADAF" weight="3"/>
			</s:stroke>		
		</s:Rect>
		<s:VGroup paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6" width="100%" top="0" bottom="30" >
			<mx:ViewStack id="vs" width="100%" height="100%" creationPolicy="all">
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.protocols')" width="100%" height="100%">
					<option:ProtocolsTab id="protocolsTab" optionContainer="{this}"/>
				</s:NavigatorContent>
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.user')" width="100%" height="100%">
					<option:UserManagerTab id="userManagerTab" />
				</s:NavigatorContent>		
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.ep')" width="100%" height="100%">
					<option:EpTab id="epTab" optionContainer="{this}"/>
				</s:NavigatorContent>		
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.advanced')" width="100%" height="100%">
					<option:AdvancedTab id="advancedTab"/>
				</s:NavigatorContent>
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.misc')" width="100%" height="100%">
					<option:USBDeviceTab id="usbAclTab"/> <!--enabled="{SessionUtil.isEnterprise()}" visible="{SessionUtil.isEnterprise()}"/>-->
				</s:NavigatorContent>
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.enterprise')" width="100%" height="100%">
					<option:EnterpriseTab id="enterpriseTab" optionContainer="{this}"/>
				</s:NavigatorContent>
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'options.tab.irm')" width="100%" height="100%">
					<option:IRMTab id="irmTab" optionContainer="{this}"/>
				</s:NavigatorContent>
			</mx:ViewStack>
		</s:VGroup>		
		
		<s:Spacer height="10" />
		
		<s:HGroup bottom="5" right="30">
			<s:Button id="saveButton" label="@Resource(bundle = 'messages', key = 'options.button.save.label')" 
					  click="saveButtonHandler(event)"/>
		</s:HGroup>	
	</s:Group>		
	
	
	
</s:SkinnableContainer>
