<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			protected function clickAddButton(event:MouseEvent):void
			{
				if(treeListData.item.classType == DataFormat)
				{
					var newDataFormat:DataFormat = new DataFormat();
					InteractionUtil.newEditDialog(newDataFormat);
				}
				if(treeListData.item.classType == RegularExpressionGroup)
				{
					var newRegularExpressionGroup:RegularExpressionGroup = new RegularExpressionGroup();
					InteractionUtil.newEditDialog(newRegularExpressionGroup);
				}
				if(treeListData.item.classType == DocumentDatabase)
				{
					var newDocumnetDatabase:DocumentDatabase = new DocumentDatabase();
					InteractionUtil.newEditDialog(newDocumnetDatabase);
				}
				event.stopPropagation();
			}
			
			protected function hasAddButton(item:*): Boolean
			{
				if (item is ObjectGroup && (item as ObjectGroup).classType != null)
					return true;
				return false;
			}
			
			protected function isRemovable(selectedItem:*):Boolean
			{
				var ruleList:ArrayCollection = FlexGlobals.topLevelApplication.ruleContainer.ruleDP;
				for(var i:int = 0; i < ruleList.length; i++)
				{
					var ruleItems:ListCollectionView = ruleList[i].ruleItems;
					for(var j:int = 0; j < ruleItems.length; j++)
					{
						if(ruleItems[j].item.uid == selectedItem.item.uid)
							return false;
					}
				}
				return true;
			}
			
			protected function removeButtonClickHandler(event:Event):void
			{
				if(treeListData.item is InventoryItem)
				{
					var selectedItem:InventoryItem = treeListData.item as InventoryItem;
					if(selectedItem.item is InformationType || selectedItem.item is Network)
						if(isRemovable(treeListData.item))
							InteractionUtil.newDeleteDialog(treeListData.item);
						else
							Alert.show(LangUtil.getString("messages", "inventory.delete.error.message"), LangUtil.getString("messages", "inventory.delete.error.title"));
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" verticalAlign="middle"
			  paddingTop="2" paddingBottom="2">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:BitmapImage source="{treeListData.icon}" />
		<s:Label id="labelField" text="{treeListData.label}" paddingTop="2" width="100%"/>
		<s:Spacer width="10"/>
		<s:HGroup width="45" height="20" verticalAlign="middle">
			<s:Button includeIn="selected" styleName="addButtonStyle"
					  click="clickAddButton(event)"
					  visible="{hasAddButton(treeListData.item)}"/>
			<s:Button includeIn="selected" styleName="removeButtonStyle"
					  click="{InteractionUtil.newDeleteDialog(treeListData.item)}"
					  visible="{treeListData.item is AbstractEntity}"/>
		</s:HGroup>
	</s:HGroup>
</s:MXTreeItemRenderer>
