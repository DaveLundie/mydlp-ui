<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
					  width="100%" height="100%"
					  minWidth="700"
					  xmlns:objects="com.mydlp.ui.widget.objects.*">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.widget.general.popup.GenericEditContainer;
			
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			public function refreshObjects():void
			{
				objectsTree.afterRefreshSelectedIndex = objectsTree.selectedIndex;
				resetView();
				objectsTree.refreshTree();
			}
			
			protected function resetView(): void
			{
				documentDatabaseTokenGroup.includeInLayout=false;
				documentDatabaseTokenGroup.visible=false;
				editFormContainer.visible = false;
				editFormContainer.enabled = true;
				editFormContainer.removeAllElements();
			}
			
			public function refreshDocumentDatabaseTokenControl(): void
			{
				if (objectsTree.selectedItem is DocumentDatabase)
				{
					editFormContainer.enabled = false;
					re.hasAnyValidToken("tools-uploader", "" + objectsTree.selectedItem.id);
				}
			}
			
			public function onSelectedItemChange(event:ListEvent):void
			{
				resetView();
				if(objectsTree.selectedIndex == -1)
				{
					return;
				}
				if(objectsTree.selectedItem is AbstractEntity)
				{
					var editForm:GenericEditContainer = new GenericEditContainer();
					editFormContainer.addElement(editForm);
					editForm.formObject = objectsTree.selectedItem;
					editForm.populate();
					
					refreshDocumentDatabaseTokenControl();
					
					editFormContainer.visible = true;
				}
				else
				{
					editFormContainer.visible=false;
				}
			}
			
			protected function hasAnyValidTokenHandler(event:ResultEvent): void
			{
				if (event.result as Boolean)
				{
					documentDatabaseTokenGroup.includeInLayout=true;
					documentDatabaseTokenGroup.visible=true;
				}
				else
				{
					editFormContainer.enabled = true;
				}
			}
			
			protected function onRefreshClick(event:MouseEvent):void
			{
				refreshObjects();
			}
			
			protected function onRevokateClick(event:MouseEvent):void
			{
				re.revokateAllTokens("tools-uploader", "" + objectsTree.selectedItem.id);
			}
			
			protected function revokateAllTokensHandler(event:ResultEvent): void
			{
				refreshObjects();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="re" destination="tokenBRS">
			<my:method name="hasAnyValidToken" result="hasAnyValidTokenHandler(event)" />
			<my:method name="revokateAllTokens" result="revokateAllTokensHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout paddingTop="10" gap="10"/>
	</s:layout>
	
	<objects:ObjectsTree id="objectsTree" change="onSelectedItemChange(event)"/>
	
	<rule:RSpacer />
	
	<s:VGroup paddingLeft="40" paddingTop="40" width="100%" height="100%" gap="15">
		<s:HGroup id="documentDatabaseTokenGroup"
				  paddingLeft="12"
				  includeInLayout="false" visible="false"
				  gap="10">
			<s:BitmapImage source="@Embed('/assets/icons/16x16/warning.png')" />
			<s:Label text="@Resource(key='documentDatabase.hasValidToken.message', bundle='messages')" width="450"/>
			<s:Button label="@Resource(key='documentDatabase.hasValidToken.refresh.label', bundle='messages')" 
					  click="onRefreshClick(event)"/>
			<s:Button label="@Resource(key='documentDatabase.hasValidToken.revokateAllTokens.label', bundle='messages')" 
					  click="onRevokateClick(event)"/>
		</s:HGroup>
		<s:VGroup id="editFormContainer" />
	</s:VGroup>
	
	
	
</s:SkinnableContainer>
