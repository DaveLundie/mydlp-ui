<?xml version="1.0" encoding="utf-8"?>
<popup:GenericCRUDContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:general="com.mydlp.ui.widget.general.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				xmlns:popup="com.mydlp.ui.widget.general.popup.*"
				width="250"
				>
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ADDomain;
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.AbstractNamedEntity;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.USBDevice;
			import com.mydlp.ui.util.ClassMember;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.components.Label;
			
			protected var isAnInventoryItem:Boolean = false;
			
			protected var deleteButton:Button = new Button();
			
			protected var cancelButton:Button = new Button();
			
			public function populateButtons(): void
			{	
				deleteButton.label = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".deleteButton.label");
				deleteButton.addEventListener(MouseEvent.CLICK, deleteButtonClickHandler);
				cancelButton.label = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".cancelButton.label");
				cancelButton.addEventListener(MouseEvent.CLICK, cancelButtonClickHandler);
				var buttonGroup:HGroup = new HGroup();
				buttonGroup.percentHeight = 100;
				buttonGroup.percentWidth = 100;
				buttonGroup.gap = 30;
				buttonGroup.verticalAlign = "middle";
				buttonGroup.horizontalAlign = "center";
				buttonGroup.addElement(deleteButton);
				buttonGroup.addElement(cancelButton);
				deleteForm.addElement(buttonGroup);
			}
			
			public function populateDialogMessage(): void
			{	
				var message:String = "";
				var message2:String = "";
				
				message += LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".dialogMessage");
				message += " ";
				
				if(formObject is AuthUser)
				{
					message += formObject.username;
				}
				else if(formObject is USBDevice)
				{					
					message += formObject.uniqId;
				}
				else if (formObject["label"] != null) 
				{
					message += formObject.label;
				}
				else if (formObject is AbstractEntity)
				{
					var entity:AbstractEntity = formObject as AbstractEntity;
					message += getSimpleName() + "[" + entity.id + "]";
				}
				else
				{
					message += formObject.toString();
				}
				
				message +="?";
				
				if (message != "") 
				{
					var dialogMessage:Label = new Label();
					dialogMessage.percentWidth = 100;
					dialogMessage.text = message;
					deleteForm.addElement(dialogMessage);
				}
				
				if (formObject is InventoryCategory)
				{
					message2 += LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".removeAllSubitems");	
				}
				
				if (message2 != "")
				{
					var dialogMessage2:Label = new Label();
					dialogMessage2.percentWidth = 100;
					dialogMessage2.text = message2;
					deleteForm.addElement(dialogMessage2);
				}
			}
			
			override public function populate(): void
			{
				windowTitle = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".title");
				
				if (ReflectionUtil.hasMemberOfType(formObject, "category", InventoryCategory))
					isAnInventoryItem = true;
					
				populateDialogMessage();
				populateButtons();
				
				super.populate();
			}
			
			protected function deleteButtonClickHandler(event:Event): void
			{
				if (formObject is ADDomain) {
					var adfo:ADDomain = formObject as ADDomain;
					re.remove(getQualifiedClassName(adfo), adfo.id);
				}
				else
				{
					if (formObject is Rule)
					{
						FlexGlobals.topLevelApplication.policyContainer.ruleContainer.disableAddRule();
					}
					re.remove(formObject);
				}
				
				deleteButton.enabled = false;
				cancelButton.enabled = false;
			}
			
			protected function cancelButtonClickHandler(event:Event): void
			{
				InteractionUtil.closeCurrentPopup();
			}
			
			protected function okHandler(event:Event): void
			{
				if (formObject is Rule)
				{
					FlexGlobals.topLevelApplication.policyContainer.ruleContainer.enableAddRule();
				}
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				InteractionUtil.closeCurrentPopup();
				FlexGlobals.topLevelApplication.refreshRespectively(formObject);
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				FlexGlobals.topLevelApplication.faultHandler(event);
				if (formObject is Rule)
				{
					FlexGlobals.topLevelApplication.policyContainer.ruleContainer.enableAddRule();
					FlexGlobals.topLevelApplication.ruleContainer.refreshRules();
				}
				InteractionUtil.closeCurrentPopup();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="genericBRS" >
			<my:method name="remove" result="okHandler(event)" fault="faultHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:Group id="deleteForm" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center"
							  paddingTop="20" paddingBottom="15"
							  paddingLeft="10" paddingRight="10"
							  gap="15" />
		</s:layout>
	</s:Group>
</popup:GenericCRUDContainer>
