<?xml version="1.0" encoding="utf-8"?>
<popup:GenericCRUDContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:general="com.mydlp.ui.widget.general.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				xmlns:popup="com.mydlp.ui.widget.general.popup.*"
				width="400"
				>
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.AbstractNamedEntity;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.util.ClassMember;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.core.FlexGlobals;
			
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.components.Label;
			
			protected var isAnInventoryItem:Boolean = false;
			
			protected var deleteButton:Button = new Button();
			
			protected var cancelButton:Button = new Button();
			
			public function populateButtons(): void
			{	
				deleteButton.label = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".deleteButton.label");
				deleteButton.addEventListener(MouseEvent.CLICK, deleteButtonClickHandler);
				cancelButton.label = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".cancelButton.label");
				cancelButton.addEventListener(MouseEvent.CLICK, cancelButtonClickHandler);
				var buttonGroup:HGroup = new HGroup();
				buttonGroup.percentHeight = 100;
				buttonGroup.percentWidth = 100;
				var spacer1:Spacer = new Spacer();
				spacer1.percentWidth = 100;
				var spacer2:Spacer = new Spacer();
				spacer2.width = 10;
				buttonGroup.addElement(spacer1);
				buttonGroup.addElement(deleteButton);
				buttonGroup.addElement(spacer2);
				buttonGroup.addElement(cancelButton);
				deleteForm.addElement(buttonGroup);
			}
			
			public function populateDialogMessage(): void
			{	
				var message:String = "";
				var message2:String = "";
				
				message += LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".dialogMessage");
				message += ": ";
				
				if (formObject is AbstractNamedEntity) 
				{
					var namedEntity:AbstractNamedEntity = formObject as AbstractNamedEntity;
					message += namedEntity.label;
				}
				else if (formObject is AbstractEntity)
				{
					var entity:AbstractEntity = formObject as AbstractEntity;
					message += getSimpleName() + "[" + entity.id + "]";
				}
				else
				{
					message += formObject.toString();
				}
				
				if (message != "") 
				{
					var dialogMessage:Label = new Label();
					dialogMessage.text = message;
					deleteForm.addElement(dialogMessage);
				}
				
				if (formObject is InventoryCategory)
				{
					message2 += LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".removeAllSubitems");	
				}
				
				if (message2 != "")
				{
					var dialogMessage2:Label = new Label();
					dialogMessage2.text = message2;
					deleteForm.addElement(dialogMessage2);
				}
			}
			
			override public function populate(): void
			{
				windowTitle = LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".title");
				
				if (ReflectionUtil.hasMemberOfType(formObject, "category", InventoryCategory))
					isAnInventoryItem = true;
					
				populateDialogMessage();
				populateButtons();
				
				super.populate();
			}
			
			protected function deleteButtonClickHandler(event:Event): void
			{
				re.remove(formObject);
				deleteButton.enabled = false;
				cancelButton.enabled = false;
			}
			
			protected function cancelButtonClickHandler(event:Event): void
			{
				InteractionUtil.closeCurrentPopup();
			}
			
			protected function okHandler(event:Event): void
			{
				InteractionUtil.closeCurrentPopup();
				Alert.show(	LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".ok.message"),
							LangUtil.getString("messages", "generic.delete." + getSimpleName() + ".title"));
				
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="genericBRS" >
			<my:method name="remove" result="okHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:Group id="deleteForm" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" gap="3"
							  paddingTop="6" paddingBottom="6"
							  paddingLeft="10" paddingRight="10"/>
		</s:layout>
	</s:Group>
</popup:GenericCRUDContainer>
