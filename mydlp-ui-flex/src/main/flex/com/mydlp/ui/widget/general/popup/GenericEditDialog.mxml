<?xml version="1.0" encoding="utf-8"?>
<popup:GenericCRUDDialog xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:general="com.mydlp.ui.widget.general.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				xmlns:popup="com.mydlp.ui.widget.general.popup.*"
				>
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.InformationDescription;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.util.ClassMember;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.widget.general.input.DataFormatInput;
			import com.mydlp.ui.widget.general.input.InformationFeatureInput;
			import com.mydlp.ui.widget.general.input.IpAddressInput;
			
			import flash.utils.getQualifiedClassName;
			
			import flashx.textLayout.container.ISandboxSupport;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.FormItem;
			import spark.components.TextInput;
			
			protected var cButton:Button = new Button();
			protected var formItemOrder:ListCollectionView = new ArrayCollection();
			
			public var deleteList:ListCollectionView;
			
			protected var simpleFormItems:ArrayCollection = new ArrayCollection();
			protected var complexFormItems:ArrayCollection = new ArrayCollection();
			
			
			protected var objectName:ArrayCollection = new ArrayCollection();
			protected var classMemberName:ArrayCollection = new ArrayCollection();
			
			
			
			public function populateClassMembers(targetObject:Object): void
			{
				var classMembers:Array = ReflectionUtil.getClassMembers(targetObject as Object);
				var index:Number = -1;
				
				for each (var classMember:ClassMember in classMembers)
				{
					var visualElement:IVisualElement = null;
					
					if (classMember.name == "category" && classMember.type == InventoryCategory)
					{
						if (targetObject.id == null || isNaN(targetObject.id) ) // means that this is a new object
							if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem == null)
								continue;
							else if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem is InventoryCategory)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.selectedItem;
							else if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem is InventoryBase)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.selectedItem.category;
						continue;
					}
					else if 
						(
							classMember.name == "id" ||
							classMember.name == "optimisticLockVersion" ||
							classMember.name == "nameKey" ||
							classMember.name == "icon" ||
							(classMember.name == "ruleItems" && classMember.type == ListCollectionView) ||
							classMember.name == "enabled" ||
							classMember.name == "priority" ||
							classMember.name == "action" ||
							(classMember.name == "children" && classMember.type == ListCollectionView)||
							(classMember.name == "roles" && classMember.type == ListCollectionView)||
							(classMember.name == "coupledInventoryItem" && classMember.type == InventoryItem) ||
							(classMember.name == "coupledRuleItems" && classMember.type == ListCollectionView) ||
							(classMember.name == "informationType" && classMember.type == InformationType) 
						)
					{
						continue;
					}
					else if (targetObject is InventoryItem && classMember.name == "item")
					{
						if (targetObject.item != null && targetObject.item is Item)
							(targetObject.item as Item).coupledInventoryItem = targetObject as InventoryItem;
						populateClassMembers(targetObject.item);
						continue;
					}
					else if (
							( classMember.name == "ipBase" || classMember.name == "ipMask" )
							&& classMember.type == Number)
					{
						var ipInput:IpAddressInput = new IpAddressInput();
						ipInput.numberValue = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ipInput, "numberValue");
						visualElement = ipInput;
						visualElement.width = 160;
						if(classMember.name == "ipBase"){
							simpleFormItems.addItemAt(ipInput, 2);
							index = 2;
						}
						else{
							simpleFormItems.addItemAt(ipInput, 1);
							index = 1;
						}
					}
					else if (targetObject is InformationType && 
							classMember.name == "dataFormats" && 
							classMember.type == ListCollectionView)
					{
						var dfInput:DataFormatInput = new DataFormatInput();
						if (targetObject[classMember.name] == null)
							dfInput.dataFormats = new ArrayCollection();
						else
							dfInput.dataFormats = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, dfInput, "dataFormats");
						visualElement = dfInput;
						complexFormItems.addItemAt(dfInput, 1);
						index = 9;
					}
					else if (targetObject is InformationDescription &&
							classMember.name == "features" && 
							classMember.type == ListCollectionView)
					{
						var ifInput:InformationFeatureInput = new InformationFeatureInput();
						if (targetObject[classMember.name] == null)
							ifInput.informationFeatures = new ArrayCollection();
						else
							ifInput.informationFeatures = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ifInput, "informationFeatures");
						visualElement = ifInput;
						complexFormItems.addItemAt(ifInput, 0);
						index = 8;
					}
					else if (targetObject is InformationType &&
							classMember.name == "informationDescription" && 
							classMember.type == InformationDescription)
					{
						if (targetObject[classMember.name] == null)
							targetObject[classMember.name] = new InformationDescription();
						
						populateClassMembers(targetObject[classMember.name]);
						continue;
					}
					
					else if(classMember.type == Boolean)
					{
						var checkBox:CheckBox = new CheckBox();
						checkBox.selected = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, checkBox, "selected");
						visualElement = checkBox;
						simpleFormItems.addItemAt(checkBox, 6);
						index = 6;
					}
					else
					{
						var textInput:TextInput = new TextInput();
						textInput.text = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, textInput, "text");
						visualElement = textInput;
						visualElement.width = 160;
						if(classMember.name == "name"){
							simpleFormItems.addItemAt(textInput, 0);
							index = 0;
						}
						else if(classMember.name == "username"){
							simpleFormItems.addItemAt(textInput, 3);
							index = 3;
						}
						else if(classMember.name == "email"){
							simpleFormItems.addItemAt(textInput, 4);
							index = 4;
						}
						else if(classMember.name == "password"){
							simpleFormItems.addItemAt(textInput, 5);
							index = 5;
						}
						else if(classMember.name == "threshold"){
							simpleFormItems.addItemAt(textInput, 7);
							index = 7;
						}
					}
					
					if (visualElement != null)//index tuttum ama gerek yok sanirim, direk burada edip string olarak tutarim!
					{
						var fi:FormItem = new FormItem();
						fi.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						fi.addElement(visualElement);
						form.addElement(fi);
					}
				}
			}
			
			public function populateCreateButton(): void
			{	
				cButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".createButton.label");
				cButton.addEventListener(MouseEvent.CLICK, createButtonClickHandler);
				var cbfi:FormItem = new FormItem();
				cbfi.addElement(cButton);
				form.addElement(cbfi);
			}
				
			
			override public function populate(): void
			{
				deleteList = new ArrayCollection();
				
				title = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".title");
				
				populateClassMembers(formObject);
				
				populateCreateButton();
				
				super.populate();
			}
			
			protected function createButtonClickHandler(event:Event): void
			{
				re.save(formObject);
				cButton.enabled = false;
			}
			
			protected function okHandler(event:Event): void
			{
				InteractionUtil.closePopup(this);
				Alert.show(	LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".ok.message"),
							LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".title"));
				
				if (deleteList.length == 0)
					FlexGlobals.topLevelApplication.refresh();
				else
					re.removeAll(deleteList);
			}
			
			protected function removeAllHandler(event:Event): void
			{
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="genericBRS" >
			<my:method name="save" result="okHandler(event)" />
			<my:method name="removeAll" result="removeAllHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:Form id="form" />
	
</popup:GenericCRUDDialog>
