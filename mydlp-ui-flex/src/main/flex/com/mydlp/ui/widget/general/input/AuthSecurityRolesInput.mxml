<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:my="http://www.mydlp.com/flex/my"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="{InputLabel.VERTICAL_INPUT_WIDTH}"
		  creationComplete="{re.getRoles()}"
		  xmlns:util="com.mydlp.ui.util.*">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.general.popup.InputLabel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;

			
			[Bindable]
			protected var allAuthSecurity:ListCollectionView;
			
			protected function regulatePopupWindow():void
			{
				var isAuditorRoleAvailable:Boolean = false;
				var isClassifierRoleAvailable:Boolean = false;
				var e:ItemClickEvent = new ItemClickEvent(ItemClickEvent.ITEM_CLICK, true);
				for(var i:int = 0; i < authSecurityRoles.length; i++)
				{
					if(authSecurityRoles[i].roleName == "ROLE_AUDITOR")
						isAuditorRoleAvailable = true;
					if(authSecurityRoles[i].roleName == "ROLE_CLASSIFIER")
						isClassifierRoleAvailable = true;
				}
				if(!isAuditorRoleAvailable)
				{
					e.item = allAuthSecurity[1];//1 means ROLE_AUDITOR
					e.index = -1;
					dispatchEvent(e);
				}
				if(!isClassifierRoleAvailable)
				{
					e.item = allAuthSecurity[2];//2 means ROLE_CLASSIFIER
					e.index = -1;
					dispatchEvent(e);
				}
			}
			
					
			protected function getRolesHandler(event:ResultEvent): void
			{
				allAuthSecurity = event.result as ListCollectionView;
				var tempAuthSecurityRoles:ListCollectionView = new ArrayCollection();
				if(!SessionUtil.isEnterprise())
				{
					for(var j:int = 0; j < allAuthSecurity.length; j++)
					{
						if(allAuthSecurity[j].roleName == "ROLE_ADMIN")
							tempAuthSecurityRoles.addItem(allAuthSecurity[j]);
					}
					allAuthSecurity.removeAll();
					allAuthSecurity = tempAuthSecurityRoles;
				}
				
				FlexGlobals.topLevelApplication.userRoles.removeAll();
			
				for (var i:int=0; i < allAuthSecurity.length; i++)				
				{
					for each (var role:AuthSecurityRole in authSecurityRoles)
					{
						if (allAuthSecurity[i].roleName == role.roleName)
						{
							FlexGlobals.topLevelApplication.userRoles.addItem(i);
						}
					}					
				}
				regulatePopupWindow();
			}
			
			
			public function onChange(event:IndexChangeEvent): void
			{
				authSecurityRoles.removeAll();
				var roles:ArrayCollection = FlexGlobals.topLevelApplication.userRoles;
				for(var i:int = 0; i < roles.length; i++ )		
				{
					authSecurityRoles.addItem(allAuthSecurity[roles[i]]);
				}
				for(var j:int = 0; j < allAuthSecurity.length; j++)
					srList.dataProvider.itemUpdated(allAuthSecurity.getItemAt(j));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:ListCollectionView id="authSecurityRoles" />		
		<my:remote id="re" destination="userBRS">
			<my:method name="getRoles" result="getRolesHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" gap="2"/>
	</s:layout>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
		<s:Label text="@Resource(bundle = 'messages', key = 'generic.edit.input.authSecurity.srList.label')" />
		<s:List id="srList" dataProvider="{allAuthSecurity}"
				width="100%" height="64"
				itemRenderer="com.mydlp.ui.widget.general.input.AuthSecurityRoleRenderer"
				allowMultipleSelection="true"
				change="onChange(event)" />
	</s:Group>
	
</s:SkinnableContainer>
