<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 labelField="label"
		 width="320" height="100%"
		 selectionColor="0xA8C6EE"
		 showRoot="false"
		 borderVisible="false"
		 allowMultipleSelection="false"
		 creationComplete="populateTree()"
		 dataProvider="{objects}"
		 itemRenderer="com.mydlp.ui.widget.objects.ObjectsTreeRenderer"
		 folderOpenIcon="@Embed('/assets/icons/16x16/folder.png')"
		 folderClosedIcon="@Embed('/assets/icons/16x16/folder.png')"
		 itemClick="onItemClick(event)"
		 variableRowHeight="true"
		 >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ADDomain;
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.RDBMSConnection;
			import com.mydlp.ui.domain.RegularExpression;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			protected var objects:ListCollectionView = null;
			
			protected var dataFormats:ArrayCollection = new ArrayCollection();
			protected var regularExpressionGroups:ArrayCollection = new ArrayCollection();
			protected var documentDatabases:ArrayCollection = new ArrayCollection();
			protected var adDomains:ArrayCollection = new ArrayCollection();
			protected var rdbmsConnections:ArrayCollection = new ArrayCollection();
			
			protected var tempOpenItems:Object;
			
			public function refreshTree(): void
			{
				/*
				if(FlexGlobals.topLevelApplication.objectsContainer.objectsTree.selectedItem == null ||
				    !FlexGlobals.topLevelApplication.objectsContainer.objectsTree.selectedItem is AbstractEntity)
					FlexGlobals.topLevelApplication.objectsContainer.editFormContainer.visible = false;
				*/
				tempOpenItems = openItems;
				invalidateList();
				re.getObjects();
			}
			
			protected function saveAllHandler(event:ResultEvent): void
			{
				refreshTree();
			}
			
			protected function getObjectsHandler(event:ResultEvent): void
			{
				var _objects:ListCollectionView = event.result as ListCollectionView;
				var currentUser:AuthUser = FlexGlobals.topLevelApplication.user as AuthUser;
				
				dataFormats.removeAll();
				regularExpressionGroups.removeAll();
				documentDatabases.removeAll();
				adDomains.removeAll();
				rdbmsConnections.removeAll();
				
				for each(var item:* in _objects)
				{
					if (item is DataFormat )
						dataFormats.addItem(item);
					else if(item is RegularExpressionGroup)
						regularExpressionGroups.addItem(item);
					else if(item is DocumentDatabase)
					{
						if(!(currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN) || currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN)))
						{
							var ddOfUser:ListCollectionView = currentUser.documentDatabases;
							for(var i:int = 0; i < ddOfUser.length; i++)
							{
								if(ddOfUser[i].name == item.name)
									documentDatabases.addItem(item);
							}
						}
						else
							documentDatabases.addItem(item);
					}
					else if(item is ADDomain)
						adDomains.addItem(item);
					else if(item is RDBMSConnection)
						rdbmsConnections.addItem(item);
				}
				redf.getDataFormats();
			}
			
			protected function getDataFormatsHandler(event:ResultEvent): void
			{
				var _objects:ListCollectionView = event.result as ListCollectionView;
				
				dataFormats.removeAll();
				
				for each(var item:* in _objects)
				{
					if (item is DataFormat )
						dataFormats.addItem(item);
				}
				read.getADDomains();
			}
			
			protected function getADDomainsHandler(event:ResultEvent): void
			{
				var _objects:ListCollectionView = event.result as ListCollectionView;
				
				adDomains.removeAll();
				
				for each(var item:* in _objects)
				{
					if(item is ADDomain)
						adDomains.addItem(item);
				}
				
				openItems = tempOpenItems;
				validateNow();
			}
			
			protected function populateTree():void
			{
				if (objects == null)
				{
					objects = new ArrayCollection();
					
					var currentUser:AuthUser = FlexGlobals.topLevelApplication.user as AuthUser;
					
					if(currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN) || currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					{
						var parentDataFormats:ObjectGroup = new ObjectGroup();
						parentDataFormats.label = LangUtil.getString("messages", "objects.dataFormats.label");
						parentDataFormats.classType = DataFormat;
						parentDataFormats.children = dataFormats;
						objects.addItem(parentDataFormats);
						
						var parentRegularExpressionGroups:ObjectGroup = new ObjectGroup();
						parentRegularExpressionGroups.label = LangUtil.getString("messages", "objects.regularExpressionGroups.label");
						parentRegularExpressionGroups.classType = RegularExpressionGroup;
						parentRegularExpressionGroups.children = regularExpressionGroups;
						objects.addItem(parentRegularExpressionGroups);
					}
					if(currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN) || currentUser.hasRole(AuthSecurityRole.ROLE_CLASSIFIER)  || currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					{
						var parentDocumentDatabases:ObjectGroup = new ObjectGroup();
						parentDocumentDatabases.label = LangUtil.getString("messages", "objects.documentDatabases.label");
						parentDocumentDatabases.classType = DocumentDatabase;
						parentDocumentDatabases.children = documentDatabases;
						objects.addItem(parentDocumentDatabases);
					}
					if(currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN) || currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					{
						var parentADDomains:ObjectGroup = new ObjectGroup();
						parentADDomains.label = LangUtil.getString("messages", "objects.adDomains.label");
						parentADDomains.classType = ADDomain;
						parentADDomains.children = adDomains;
						objects.addItem(parentADDomains);
						
						var parentRDBMSConnections:ObjectGroup = new ObjectGroup();
						parentRDBMSConnections.label = LangUtil.getString("messages", "objects.rdbmsConnections.label");
						parentRDBMSConnections.classType = RDBMSConnection;
						parentRDBMSConnections.children = rdbmsConnections;
						objects.addItem(parentRDBMSConnections);
					}
				}
				refreshTree();
			}
			
			protected var previousSelectedItem:Object = null;
			
			protected function onItemClick(event:ListEvent):void
			{
				if (dataDescriptor.isBranch(selectedItem) && 
					(!isItemOpen(selectedItem) || selectedItem == previousSelectedItem)
				) {
					expandItem(selectedItem, !isItemOpen(selectedItem), true);
				}
				previousSelectedItem = selectedItem;
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<my:remote id="re" destination="objectsBRS">
			<my:method name="getObjects" result="getObjectsHandler(event)" />
		</my:remote>
		<my:remote id="read" destination="adDomainBRS">
			<my:method name="getADDomains" result="getADDomainsHandler(event)" />
		</my:remote>
		<my:remote id="redf" destination="dataFormatBRS">
			<my:method name="getDataFormats" result="getDataFormatsHandler(event)" />
		</my:remote>
	</fx:Declarations>
</mx:Tree>