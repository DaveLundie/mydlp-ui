<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 labelField="label"
		 width="600" height="100%"
		 showRoot="false"
		 borderVisible="false"
		 allowMultipleSelection="false"
		 creationComplete="populateTree()"
		 dataProvider="{objects}"
		 itemRenderer="com.mydlp.ui.widget.objects.ObjectsTreeRenderer"
		 folderOpenIcon="@Embed('/assets/icons/16x16/folder.png')"
		 folderClosedIcon="@Embed('/assets/icons/16x16/folder.png')"
		 itemClick="onItemClick(event)"
		 >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			protected var objects:ListCollectionView = null;
			
			protected var dataFormats:ArrayCollection = new ArrayCollection();
			protected var networks:ArrayCollection = new ArrayCollection();
			protected var informationTypes:ArrayCollection = new ArrayCollection();
			protected var keywordGroups:ArrayCollection = new ArrayCollection();
			protected var others:ArrayCollection = new ArrayCollection();
			
			protected var tempOpenItems:Object;
			
			public function refreshTree(): void
			{
				/*
				if(FlexGlobals.topLevelApplication.objectsContainer.objectsTree.selectedItem == null ||
				    !FlexGlobals.topLevelApplication.objectsContainer.objectsTree.selectedItem is AbstractEntity)
					FlexGlobals.topLevelApplication.objectsContainer.editFormContainer.visible = false;
				*/
				tempOpenItems = openItems;
				invalidateList();
				re.getObjects();
			}
			
			protected function saveAllHandler(event:ResultEvent): void
			{
				refreshTree();
			}
			
			protected function getObjectsHandler(event:ResultEvent): void
			{
				var _objects:ListCollectionView = event.result as ListCollectionView;
				
				dataFormats.removeAll();
				networks.removeAll();
				informationTypes.removeAll();
				keywordGroups.removeAll();
				others.removeAll();
				
				for each(var item:* in _objects)
				{
					if (item is DataFormat )
						dataFormats.addItem(item);
					else if (item is InventoryItem && (item as InventoryItem).item is Network)
						networks.addItem(item);
					else if (item is InventoryItem && (item as InventoryItem).item is InformationType)
						informationTypes.addItem(item);
					else
						others.addItem(item);
				}
				openItems = tempOpenItems;
				validateNow();
			}
			
			protected function populateTree():void
			{
				if (objects == null)
				{
					objects = new ArrayCollection();
					
					var parentDataFormats:ObjectGroup = new ObjectGroup();
					parentDataFormats.label = LangUtil.getString("messages", "objects.dataFormats.label");
					parentDataFormats.classType = DataFormat;
					parentDataFormats.children = dataFormats;
					objects.addItem(parentDataFormats);
					
					var parentNetworks:ObjectGroup = new ObjectGroup();
					parentNetworks.label = LangUtil.getString("messages", "objects.networks.label");;
					parentNetworks.classType = null;
					parentNetworks.children = networks;
					objects.addItem(parentNetworks);
					
					var parentInformationTypes:ObjectGroup = new ObjectGroup();
					parentInformationTypes.label = LangUtil.getString("messages", "objects.informationTypes.label");;
					parentInformationTypes.classType = null;
					parentInformationTypes.children  = informationTypes;
					objects.addItem(parentInformationTypes);
					
					var parentKeywordGroup:ObjectGroup = new ObjectGroup();
					parentKeywordGroup.label = LangUtil.getString("messages", "objects.keywordGroups.label");;
					parentKeywordGroup.classType = null;
					parentKeywordGroup.children = keywordGroups;
					objects.addItem(parentKeywordGroup);
					
					var parentOthers:ObjectGroup = new ObjectGroup();
					parentOthers.label = LangUtil.getString("messages", "objects.others.label");;
					parentOthers.classType = null;
					parentOthers.children  = others;
					objects.addItem(parentOthers);
				}
				refreshTree();
			}
			
			protected var previousSelectedItem:Object = null;
			
			protected function onItemClick(event:ListEvent):void
			{
				if (dataDescriptor.isBranch(selectedItem) && 
					(!isItemOpen(selectedItem) || selectedItem == previousSelectedItem)
				) {
					expandItem(selectedItem, !isItemOpen(selectedItem), true);
				}
				previousSelectedItem = selectedItem;
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<my:remote id="re" destination="objectsBRS">
			<my:method name="getObjects" result="getObjectsHandler(event)" />
		</my:remote>
	</fx:Declarations>
</mx:Tree>