<?xml version="1.0" encoding="utf-8"?>
<s:List xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:my="http://www.mydlp.com/flex/my" 
		contentBackgroundAlpha="0"
		selectionColor="0xCEDBEF"
		rollOverColor="0xDEEBFF"
		borderVisible="false"
		requireSelection="false"
		dragEnabled="true"
		dropEnabled="true"
		horizontalScrollPolicy="off"
		dragEnter="onDragEnter(event)"
		dragOver="onDragOver(event)"
		dragExit="onDragExit(event)"
		dragDrop="onDragDrop(event)"
		initialize="onInitialize(event)"
		>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.Rule;
			
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.DragManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.IndexChangeEvent;
			import spark.layouts.supportClasses.DropLocation;
			
			protected var isSelected:Boolean = false;
			protected var itemClick:Boolean = false;
			
			public var afterRefreshSelectedIndex:int = -1;
			
			public function invalidateList():void
			{
				var _itemRenderer:IFactory = itemRenderer;
				itemRenderer = null;
				itemRenderer = _itemRenderer;
			}
			
			protected function onInitialize(event:FlexEvent):void
			{
				
				this.addEventListener(ItemClickEvent.ITEM_CLICK, onItemClick);
				this.addEventListener(IndexChangeEvent.CHANGE, onChange);
				this.addEventListener(MouseEvent.CLICK, onMouseClick);
				
			}
			
			protected function onMouseClick(event:MouseEvent):void
			{
				if(!itemClick && !isSelected)
					RuleContainer.isSelection = false;
				else
					RuleContainer.isSelection = true;
				isSelected = false;
				itemClick = false;
			}
			
			public function setAfterRefreshSelected(afterRefreshSelectedItem:*): void
			{
				var arsi:int = dataProvider.getItemIndex(afterRefreshSelectedItem);
				afterRefreshSelectedIndex = arsi;
			}
			
			protected function onItemClick(event:ItemClickEvent):void
			{
				afterRefreshSelectedIndex = selectedIndex;
				itemClick = true;
				RuleItemList.regulateSelection();
			}
			
			protected function onChange(event:IndexChangeEvent):void
			{
				afterRefreshSelectedIndex = selectedIndex;
				isSelected = true;
				RuleItemList.regulateSelection();
			}
			
			public static function resetRuleItemListList(): void
			{
				RuleItemList.resetListList();
			}
			
			public function acceptDrop(dragEvent:DragEvent = null): void
			{
				if (dragEvent != null)
				{
					var dropLocation:DropLocation = this.layout.calculateDropLocation(dragEvent);
					this.layout.showDropIndicator(dropLocation);
				}
				DragManager.showFeedback(DragManager.COPY);
			}
			
			protected function rejectDrop(): void
			{
				this.layout.hideDropIndicator();
				DragManager.showFeedback(DragManager.NONE);
			}
			
			protected function onDragEnter(event:DragEvent):void
			{
				if (event.dragInitiator is RuleList)
				{
					event.preventDefault();
					this.createDropIndicator();
					var currentTarget:IUIComponent = event.currentTarget as IUIComponent;
					if (currentTarget != null)
					{
						DragManager.acceptDragDrop(currentTarget);
					}
				}
			}
			
			protected function getCurrentDropIndex(event:DragEvent): int
			{
				var currentDropLocation:DropLocation = null;
				
				if (event.currentTarget is List)
				{
					var currentDropList:List = event.currentTarget as List;
					currentDropLocation = currentDropList.layout.calculateDropLocation(event);
				}
				else if (event.currentTarget is ItemRenderer)
				{
					var currentDropRenderer:ItemRenderer = event.currentTarget as ItemRenderer;
					currentDropLocation = currentDropRenderer.layout.calculateDropLocation(event);
				}
				else 
					throw new Error("Not handled point target");
				
				return currentDropLocation.dropIndex;
			}
			
			protected function onDragOver(event:DragEvent):void
			{
				event.preventDefault();
				if (event.dragInitiator is RuleList)
				{
					var selectedRuleIndex:int = this.selectedIndex;
					var currentDropIndex:int = getCurrentDropIndex(event);
					
					if (selectedRuleIndex == currentDropIndex ||
						selectedRuleIndex == (currentDropIndex - 1)
						)
					{
						rejectDrop();
					}
					else 
					{
						acceptDrop(event);
					}
				}
				else
				{
					rejectDrop();
				}
			}
			
			protected function onDragExit(event:DragEvent):void
			{
				event.preventDefault();
				rejectDrop();
			}
			
			public function getItemFromRuleList(index:int): *
			{
				var object:Object = this.dataProvider.getItemAt(index);
				if (object is Rule)
				{
					return object as Rule;
				}
				else if (object is NewRuleShadow) 
				{
					return object as NewRuleShadow
				}
				else
				{
					throw new Error("Unhandled type");
				}
				return null;
			}
			
			protected function onDragDrop(event:DragEvent):void
			{
				event.preventDefault();
				this.layout.hideDropIndicator();
				var ruleListLength:int = this.dataProvider.length;
				if (event.dragInitiator is RuleList && ruleListLength > 1)
				{
					var selectedRule:Rule = this.selectedItem as Rule;
					var selectedRuleIndex:int = this.selectedIndex;
					var currentDropIndex:int = getCurrentDropIndex(event);
					
					if ( selectedIndex == currentDropIndex ||
						selectedIndex == (currentDropIndex - 1) 
						)
					{
					}
					else
					{
						var maxPriority:Number = 500000;
						var minPriority:Number = 0;
						
						if (currentDropIndex == ruleListLength)
						{
							var lastItemIndex:int = ruleListLength - 1;
							var lastRule:* = getItemFromRuleList(lastItemIndex);
							if (lastRule == null)
							{
								throw new Error("lastRule should not be null");
							}
							maxPriority = lastRule.priority;
						}
						else if (currentDropIndex == 0)
						{
							var firstRule:* = getItemFromRuleList(0);
							if (firstRule == null)
							{
								throw new Error("lastRule should not be null");
							}
							minPriority = firstRule.priority;
						}
						else
						{
							var indexBeforeDroppedLocationIndex:int = currentDropIndex - 1;
							var ruleBeforeDroppedLocation:* = getItemFromRuleList(indexBeforeDroppedLocationIndex);
							if (ruleBeforeDroppedLocation == null)
							{
								throw new Error("ruleBeforeDroppedLocation should not be null");
							}
							maxPriority = ruleBeforeDroppedLocation.priority;
							
							var indexAfterDroppedLocation:int = currentDropIndex;
							var ruleAfterDroppedLocation:* = getItemFromRuleList(indexAfterDroppedLocation);
							if (ruleAfterDroppedLocation == null)
							{
								throw new Error("ruleAfterDroppedLocation should not be null");
							}
							minPriority = ruleAfterDroppedLocation.priority;
						}
						
						afterRefreshSelectedIndex = currentDropIndex;
						if (currentDropIndex > selectedRuleIndex)
						{
							afterRefreshSelectedIndex = currentDropIndex - 1;
						}
						else if (currentDropIndex < selectedRuleIndex)
						{
							afterRefreshSelectedIndex = currentDropIndex;
						}
						
						if (selectedItem is Rule)
						{
							re.ruleMove(selectedRule, minPriority, maxPriority);
						}
						else if (selectedItem is NewRuleShadow) 
						{
							var calculatedPriority:Number = Math.round((minPriority+maxPriority)/2);
							(selectedItem as NewRuleShadow).priority = calculatedPriority;
						}
						else
						{
							throw new Error("Unhandled type");
						}
						//trace("setRulePriorityBetween: " + minPriority + " and " + maxPriority );
						
						// move rule in display
						this.dataProvider.addItemAt(selectedItem, currentDropIndex);
						this.dataProvider.removeItemAt(selectedIndex);
					}
				}
			}
			
			protected function changeHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="ruleMove" result="changeHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout useVirtualLayout="false" requestedMinRowCount="1" 
						  paddingTop="2" paddingBottom="18" gap="2" 
						  paddingLeft="8" paddingRight="8"/>
	</s:layout>
</s:List>
