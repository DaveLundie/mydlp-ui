<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
		 width="100%" height="100%"
		 minWidth="700"
		 creationComplete="onCreationComplete(event)" 
		 >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ApiRule;
			import com.mydlp.ui.domain.CustomActionDescriptionSeclore;
			import com.mydlp.ui.domain.DiscoveryRule;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.PrinterRule;
			import com.mydlp.ui.domain.RemovableStorageInboundRule;
			import com.mydlp.ui.domain.RemovableStorageRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.ScreenshotRule;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.widget.general.popup.NewRuleDialog;
			import com.mydlp.ui.widget.option.IRMCustomActionPopup;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var ruleDP:ListCollectionView = new ArrayCollection();
			
			public var isSelection:Boolean = false;
			
			public static function getRule(value:Number): Rule
			{
				if (FlexGlobals.topLevelApplication.ruleContainer == null)
					return null;
				return FlexGlobals.topLevelApplication.ruleContainer.getRuleI(value);
			}
			
			public function getRuleI(value:Number): Rule
			{
				for each (var rule:* in ruleDP) 
					if ((rule as Rule).id == value)
						return rule as Rule;
				return null;
			}
			
			public static function getRuleLabel(value:Number) : String
			{
				var labelText:String = "";
				if (value == -1)
				{
					labelText +=  LangUtil.getString("messages","policy.rule.default");
				}
				else
				{
					var rule:Rule = getRule(value);
					
					if (rule != null)
					{
						labelText +=  rule.label;
					}
					else
					{
						labelText += "id(" + value + ")";
					}
				}
				return labelText;
			}
			
			
			public function refreshRules():void
			{
				//TODO: maintain scrool position
				//ruleList.invalidateDisplayList();
				//ruleList.dataGroup.invalidateDisplayList();
				rec.getCustomActions();
			}
			
			protected function acceptDrop(dragEvent:DragEvent):void
			{
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				DragManager.acceptDragDrop(dropTarget);
				DragManager.showFeedback(DragManager.COPY);
			}
			
			protected function getRulesHandler(event:ResultEvent): void
			{
				var ruleDP2:ArrayCollection = event.result as ArrayCollection;
				for each (var rule:* in ruleDP2) 
				{
					if (rule is WebRule)
					{
						rule = rule as WebRule;
					}
					else if (rule is MailRule)
					{
						rule = rule as MailRule;
					}
					else if (rule is RemovableStorageRule)
					{
						rule = rule as RemovableStorageRule;
					}
					else if (rule is PrinterRule)
					{
						rule = rule as PrinterRule;
					}
					else if (rule is DiscoveryRule)
					{
						rule = rule as DiscoveryRule;
					}
					else if (rule is ApiRule)
					{
						rule = rule as ApiRule;
					}
					else if (rule is RemovableStorageInboundRule)
					{
						rule = rule as RemovableStorageInboundRule;
					}
					else if (rule is ScreenshotRule)
					{
						rule = rule as ScreenshotRule;
					}
					else
						throw new Error("Unknown rule type;");
				}
				RuleList.resetRuleItemListList();
				ruleList.invalidateList();
				ruleDP = ruleDP2;
				ruleList.validateNow();
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				if(!isSelection)
					ruleList.selectedIndex = -1;
				isSelection = false;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				this.addEventListener(DragEvent.DRAG_ENTER, acceptDrop);
				this.addEventListener(MouseEvent.CLICK, clickHandler);
				refreshRules();
			}
			
			protected function getCustomActionsHandler(event:ResultEvent): void
			{
				var customActions:ListCollectionView = null;
				if (event.result == null) 
					customActions = new ArrayCollection();
				customActions = event.result as ListCollectionView;
				ActionBox.generateCustomActions(customActions);
				re.getRules();
			}
			
			public function sanityCheck(): String
			{
				var retStr:String = "ok";
				ruleLoop: for each (var r:Rule in ruleDP)
				{
					var hasSource:Boolean = false;
					var hasIType:Boolean = false;
					var hasDestination:Boolean = false;
					ruleItemLoop: for each (var ri:RuleItem in r.ruleItems)
					{
						if (hasSource == false && RuleBoxRenderer.isSourceRuleItem(ri.item))
							hasSource = true;
						if (hasIType == false && RuleBoxRenderer.isITypeRuleItem(ri.item))
							hasIType = true;
						if (hasDestination == false && RuleBoxRenderer.isDestinationRuleItem(ri.item))
							hasDestination = true;
						if (hasSource && hasIType && hasDestination)
							break ruleItemLoop;
					}
					if (!hasSource)
					{
						retStr = "error.ruleHasNoMatchers";
						gotoRule(r);
						break ruleLoop;
					}
					if (!hasIType && RuleBoxRenderer.isMatcherApplicable(r))
					{
						retStr = "error.ruleHasNoITypes";
						gotoRule(r);
						break ruleLoop;
					}
					if (!hasDestination && RuleBoxRenderer.isDestinationApplicable(r))
					{
						retStr = "error.ruleHasNoDestinations";
						gotoRule(r);
						break ruleLoop;
					}
					
					if (r is DiscoveryRule && 
						RuleBoxRenderer.ruleHasAllDestination(r) && 
						RuleBoxRenderer.ruleHasAllIType(r) &&
						( r.action == Rule.ACTION_BLOCK || r.action == Rule.ACTION_QUARANTINE ) )
					{
						retStr = "error.discoveryRuleHasAllDestinationsAllMatcherDelete";
						gotoRule(r);
						break ruleLoop;
					}
					
					if (r.customAction != null)
					{
						if (r.customAction.customActionDescription is CustomActionDescriptionSeclore &&
							IRMCustomActionPopup.secloreEnabled == false)
						{
							retStr = "error.secloreIntegrationDisabledButUsed";
							gotoRule(r);
							break ruleLoop;
						}
					}
				}
				
				return retStr;
			}
			
			public function gotoRule(r:Rule): void 
			{
				ruleList.selectedItem = r;
				FlexGlobals.topLevelApplication.tapBar.selectedIndex = 1; // index of policy tab
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="getRules" result="getRulesHandler(event)" />
		</my:remote>
		<my:remote id="rec" destination="customActionBRS">
			<my:method name="getCustomActions" result="getCustomActionsHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout gap="5"/>
	</s:layout>
	
	<s:Group width="100%">
		<s:layout>
			<s:HorizontalLayout paddingTop="10" paddingBottom="5"/>
		</s:layout>
		<s:Button skinClass="com.mydlp.ui.skin.AddBitmapLabelButton24Skin" label="@Resource(key='rules.addrule', bundle='messages')"
				  click="{InteractionUtil.newPopup(NewRuleDialog)}" styleName="fontSize24Style" toolTip="@Resource(key='rules.addrule.tooltip.label', bundle='messages')"/>
	</s:Group>
	
	<s:Group>
		<s:layout>
			<s:HorizontalLayout gap="60" paddingLeft="250"/>
		</s:layout>
		
		<s:Label text="@Resource(key='rules.sources.label', bundle='messages')" styleName="fontSize24Style" visible="{ruleDP.length != 0}"/>
		<s:Label text="@Resource(key='rules.destinations.label', bundle='messages')" styleName="fontSize24Style" visible="{ruleDP.length != 0}"/>
		<s:Label text="@Resource(key='rules.informationTypes.label', bundle='messages')" styleName="fontSize24Style" visible="{ruleDP.length != 0}"/>
	</s:Group>
	
	<rule:RuleList id="ruleList" dataProvider="{ruleDP}" 
				width="100%" height="100%"
			itemRenderer="com.mydlp.ui.widget.policy.rule.RuleBoxRenderer"/>

</s:SkinnableContainer>
