<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
					  width="100%" height="100%"
					  minWidth="800"
                      xmlns:discovery="com.mydlp.ui.widget.policy.rule.discovery.*" 
					  creationComplete="onCreationComplete(event)"
					  >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ApiRule;
			import com.mydlp.ui.domain.CustomActionDescriptionSeclore;
			import com.mydlp.ui.domain.DiscoveryRule;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.PrinterRule;
			import com.mydlp.ui.domain.RemoteStorageRule;
			import com.mydlp.ui.domain.RemovableStorageEncryptionRule;
			import com.mydlp.ui.domain.RemovableStorageInboundRule;
			import com.mydlp.ui.domain.RemovableStorageRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.ScreenshotRule;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.widget.general.popup.NewRuleDialog;
			import com.mydlp.ui.widget.option.IRMCustomActionPopup;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.DragManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var ruleDP:ListCollectionView = new ArrayCollection();
			
			[Bindable]
			protected var resetRuleDP:ListCollectionView;
			
			public static var isSelection:Boolean = false;
			
			public var collapseStates:Dictionary = new Dictionary();
			
			protected var widthWatch:ChangeWatcher;
			protected var resizeExecuting:Boolean = false;
			
			[Bindable]
			public var sourceWidth:Number = 140;
			
			[Bindable]
			public var destinationWidth:Number = 140;
			
			[Bindable]
			public var informationTypeWidth:Number = 140;
			
			[Bindable]
			public var actionWidth:Number = 140;
			
			[Bindable]
			public var totalRuleWidth:Number = 774;
			
			public static const DISCOVERY_WIDTH_DIFF:Number = 21;
			
			protected function attachWatchers():void
			{
				widthWatch = ChangeWatcher.watch(this,'width',onSizeChange);
			}
			
			protected function onSizeChange(event:Event):void
			{
				if(!resizeExecuting)
					callLater(handleResize);
				resizeExecuting = true;
			}
			
			protected function handleResize():void
			{
				var currentWidth:Number = this.width;
				var sizeRatio:Number = 0;
				if (currentWidth < 820)
				{
					sizeRatio = 0;
				}
				else
				{
					sizeRatio = (currentWidth - 820)/160;
				}
				
				var diff:Number = 0;
				if (isDiscoveryTab)
				{
					diff = DISCOVERY_WIDTH_DIFF;
				}
				
				sourceWidth = Math.round(140 + (sizeRatio*20)) - diff;
				destinationWidth = Math.round(140 + (sizeRatio*40)) - diff;
				informationTypeWidth = Math.round(140 + (sizeRatio*80)) - diff;
				actionWidth = Math.round(140 + (sizeRatio*20)) - diff;
				
				totalRuleWidth = 190 + sourceWidth + destinationWidth + 8 + informationTypeWidth + 16 + actionWidth + 16 + (4*diff) + 7; 
				
				resizeExecuting = false;
			}
			
			protected function stopWatching(): void
			{
				//invoke this to stop watching the properties and prevent the handleResize method from executing
				widthWatch.unwatch();
			}
			
			protected function copyToResetList():void
			{
				resetRuleDP = new ArrayCollection();
				for(var i:int = 0; i < ruleDP.length; i++)
				{
					resetRuleDP.addItem(ruleDP[i]);
				}
			}
			
			public function filterRules(items:Array):void
			{
				ruleDP = resetRuleDP;
				var filteredRuleDP:ListCollectionView = new ArrayCollection;
				for(var i:int = 0; i < ruleDP.length;i++)
				{
					if (! ruleDP[i] is Rule)
						continue;
					var rule:Rule = ruleDP[i] as Rule;
					Outer: for(var j:int = 0; j < rule.ruleItems.length; j++)
					{
						for(var k:int = 0; k < items.length; k++)
						{
							if(rule.ruleItems[j].item.coupledInventoryItem.uid == items[k].uid)
							{
								filteredRuleDP.addItem(rule);
								break Outer;
							}
						}
					}
				}
				ruleDP = filteredRuleDP;
				showFiltered();
			}
			
			public function resetFilterRules():void
			{
				ruleDP = resetRuleDP;
				hideFiltered();
			}
			
			public static function getRule(value:Number, isDiscovery:Boolean): Rule
			{
				if(isDiscovery)
				{
					if (FlexGlobals.topLevelApplication.discoveryContainer.ruleContainer == null)
						return null;
					return FlexGlobals.topLevelApplication.discoveryContainer.ruleContainer.getRuleI(value);
				}
				else
				{
					if (FlexGlobals.topLevelApplication.ruleContainer == null)
						return null;
					return FlexGlobals.topLevelApplication.ruleContainer.getRuleI(value);
				}
			}
			
			public function getRuleI(value:Number): Rule
			{
				for each (var rule:* in ruleDP) 
					if (rule != null && rule is Rule && (rule as Rule).id == value)
						return rule as Rule;
				return null;
			}			
			
			public function refreshRules():void
			{
				//TODO: maintain scrool position
				//ruleList.invalidateDisplayList();
				//ruleList.dataGroup.invalidateDisplayList();
				rec.getCustomActions();
			}
			
			protected function acceptDrop(dragEvent:DragEvent):void
			{
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				DragManager.acceptDragDrop(dropTarget);
				DragManager.showFeedback(DragManager.COPY);
			}
			
			protected function isDiscoveryTypeRule(rule:*):Boolean
			{
				if(rule is DiscoveryRule || rule is RemoteStorageRule)
					return true;
				else
					return false;
			}
			
			protected function filterRulesTab(): ArrayCollection
			{
				var filteredRules:ArrayCollection = new ArrayCollection;
				if(isDiscoveryTab)
				{
					for(var i:int = 0; i < rulesList.length; i++)
					{
						if(isDiscoveryTypeRule(rulesList[i]))
							filteredRules.addItem(rulesList[i]);
					}
				}
				else
				{
					for(var j:int = 0; j < rulesList.length; j++)
					{
						if(!isDiscoveryTypeRule(rulesList[j]))
							filteredRules.addItem(rulesList[j]);
					}
				}
				return filteredRules;
			}
			
			protected function populateRules(): void
			{
				var ruleDP2:ArrayCollection = filterRulesTab();
				for each (var rule:* in ruleDP2) 
				{
					if (rule is WebRule)
					{
						rule = rule as WebRule;
					}
					else if (rule is MailRule)
					{
						rule = rule as MailRule;
					}
					else if (rule is RemovableStorageRule)
					{
						rule = rule as RemovableStorageRule;
					}
					else if (rule is PrinterRule)
					{
						rule = rule as PrinterRule;
					}
					else if (rule is DiscoveryRule)
					{
						rule = rule as DiscoveryRule;
					}
					else if (rule is RemoteStorageRule)
					{
						rule = rule as RemoteStorageRule;
					}
					else if (rule is ApiRule)
					{
						rule = rule as ApiRule;
					}
					else if (rule is RemovableStorageInboundRule)
					{
						rule = rule as RemovableStorageInboundRule;
					}
					else if (rule is RemovableStorageEncryptionRule)
					{
						rule = rule as RemovableStorageEncryptionRule;
					}
					else if (rule is ScreenshotRule)
					{
						rule = rule as ScreenshotRule;
					}
					else
						throw new Error("Unknown rule type;");
				}
				RuleList.resetRuleItemListList();
				ruleList.invalidateList();
				ruleDP = ruleDP2;
				copyToResetList();
				hideFiltered();
				FlexGlobals.topLevelApplication.policyContainer.resetView();
				
				if (ruleDP.length == 0)
				{
					ruleListGroup.visible=false;
					ruleListGroup.includeInLayout=false;
					noRuleGroup.visible=true;
					noRuleGroup.includeInLayout=true;
				}
				else
				{
					ruleListGroup.visible=true;
					ruleListGroup.includeInLayout=true;
					noRuleGroup.visible=false;
					noRuleGroup.includeInLayout=false;
					
					ruleList.validateNow();
					enableAddRule();
					
					if (ruleList.afterRefreshSelectedIndex != -1)
					{
						var oldAfterRefreshSelectedIndex:int = ruleList.afterRefreshSelectedIndex; 
						ruleList.afterRefreshSelectedIndex = -1;
						callLater(showIndex, [oldAfterRefreshSelectedIndex]);
					}
				}
				if(isDiscoveryTab)
					discoveryReportContainer.refresh();
			}
			
			protected function clickHandler(event:MouseEvent):void
			{
				if(!isSelection)
				{
					ruleList.selectedIndex = -1;
				}
				isSelection = false;
			}
			
			protected function getCustomActionsHandler(event:ResultEvent): void
			{
				var customActions:ListCollectionView = null;
				if (event.result == null) 
					customActions = new ArrayCollection();
				customActions = event.result as ListCollectionView;
				ActionBox.generateCustomActions(customActions);
				populateRules();
			}
			
			public function sanityCheck(): String
			{
				var retStr:String = "ok";
				ruleLoop: for each (var r:Rule in ruleDP)
				{
					var hasSource:Boolean = false;
					var hasIType:Boolean = false;
					var hasDestination:Boolean = false;
					ruleItemLoop: for each (var ri:RuleItem in r.ruleItems)
					{
						if (hasSource == false && RuleBoxRenderer.isSourceRuleItem(ri.item))
							hasSource = true;
						if (hasIType == false && RuleBoxRenderer.isITypeRuleItem(ri.item))
							hasIType = true;
						if (hasDestination == false && RuleBoxRenderer.isDestinationRuleItem(ri.item))
							hasDestination = true;
						if (hasSource && hasIType && hasDestination)
							break ruleItemLoop;
					}
					if (!hasSource)
					{
						retStr = "error.ruleHasNoMatchers";
						gotoRule(r);
						break ruleLoop;
					}
					if (!hasIType && RuleBoxRenderer.isMatcherApplicable(r))
					{
						retStr = "error.ruleHasNoITypes";
						gotoRule(r);
						break ruleLoop;
					}
					if (!hasDestination && RuleBoxRenderer.isDestinationApplicable(r))
					{
						retStr = "error.ruleHasNoDestinations";
						gotoRule(r);
						break ruleLoop;
					}
					
					if (r is DiscoveryRule && 
						RuleBoxRenderer.ruleHasAllDestination(r) && 
						RuleBoxRenderer.ruleHasAllIType(r) &&
						( r.action == Rule.ACTION_BLOCK || r.action == Rule.ACTION_QUARANTINE ) )
					{
						retStr = "error.discoveryRuleHasAllDestinationsAllMatcherDelete";
						gotoRule(r);
						break ruleLoop;
					}
					
					if (r.customAction != null)
					{
						if (r.customAction.customActionDescription is CustomActionDescriptionSeclore &&
							IRMCustomActionPopup.secloreEnabled == false)
						{
							retStr = "error.secloreIntegrationDisabledButUsed";
							gotoRule(r);
							break ruleLoop;
						}
					}
				}
				
				return retStr;
			}
			
			public function gotoRule(r:Rule): void 
			{
				ruleList.selectedItem = r;
				if(isDiscoveryTab)
					FlexGlobals.topLevelApplication.tapBar.selectedIndex = 2; // index of discovery tab
				else
					FlexGlobals.topLevelApplication.tapBar.selectedIndex = 1; // index of policy tab
			}
			
			public function gotoRuleIndex(i:int): void 
			{
				ruleList.selectedIndex = i;
				FlexGlobals.topLevelApplication.tapBar.selectedIndex = 1; // index of policy tab
			}
			
			protected function faultHandler(event:FaultEvent):void
			{
				trace(event.fault.faultDetail);
			}
			
			protected function ruleItemRendererFunction(item:Object):ClassFactory {
				var ir:ClassFactory;
				if (item is Rule)
					ir = new ClassFactory(RuleBoxRenderer);
				else if (item is NewRuleShadow)
					ir = new ClassFactory(NewRuleShadowRenderer);
				else
					throw new Error("Unhandled item type.");
				ir.properties = {isDiscoveryTab: isDiscoveryTab};
				return ir;
			} 
			
			public function disableAddRule(): void
			{
				addRuleButtonBottom.enabled = false;
				addRuleButtonTop.enabled = false;
				addRuleButtonFirst.enabled = false;
			}
			
			public function enableAddRule(): void
			{
				addRuleButtonBottom.enabled = true;
				addRuleButtonTop.enabled = true;
				addRuleButtonFirst.enabled = true;
			}
			
			public function hideFiltered():void
			{
				addRuleButtonBottom.visible = true;
				addRuleButtonBottom.includeInLayout = true;
				addRuleButtonTop.visible = true;
				addRuleButtonTop.includeInLayout = true;
				filteredLabel.visible = false;
				filteredLabel.includeInLayout = false;
			}
			
			public function showFiltered():void
			{
				addRuleButtonBottom.visible = false;
				addRuleButtonBottom.includeInLayout = false;
				addRuleButtonTop.visible = false;
				addRuleButtonTop.includeInLayout = false;
				filteredLabel.visible = true;
				filteredLabel.includeInLayout = true;
			}
			
			protected function addRuleToTop(event:MouseEvent):void
			{
				var itemIndices:Vector.<int> = ruleList.dataGroup.getItemIndicesInView();
				
				if (itemIndices.length > 0)
				{
					addRuleShadow(itemIndices[0]);
				}
			}
			
			protected function addRuleToBottom(event:MouseEvent):void
			{
				var itemIndices:Vector.<int> = ruleList.dataGroup.getItemIndicesInView();
				
				var itemIndicesLength:int = itemIndices.length;
				if (itemIndicesLength > 0)
				{
					addRuleShadow(itemIndices[itemIndicesLength-1] + 1);
				}
			}
			
			public function calculatePriorityFromIndex(index:int): Number
			{
				var calculatedPriority:Number = 0;
				var ruleListLength:int = ruleList.dataProvider.length;
				if (index == 0)
				{
					calculatedPriority = (ruleList.dataProvider.getItemAt(index) as Rule).priority + 100;
				}
				else if (index == ruleListLength)
				{
					calculatedPriority = (ruleList.dataProvider.getItemAt(index - 1) as Rule).priority - 100;
				}
				else
				{
					var maxP:Number = (ruleList.dataProvider.getItemAt(index - 1) as Rule).priority;
					var minP:Number = (ruleList.dataProvider.getItemAt(index) as Rule).priority;
					calculatedPriority = Math.round( (minP+maxP) / 2 );
				}
				
				return calculatedPriority;
			}
			
			protected function showIndex(index:int):void
			{
				ruleList.selectedIndex = index;
				ruleList.ensureIndexIsVisible(index);
			}
			
			protected function addRuleShadow(index:int):void
			{
				var shadow:NewRuleShadow = new NewRuleShadow();
				shadow.priority = calculatePriorityFromIndex(index);
				ruleList.dataProvider.addItemAt(shadow, index);
				ruleList.afterRefreshSelectedIndex = index;
				callLater(showIndex, [index]);
				
				if(!isDiscoveryTab)
					FlexGlobals.topLevelApplication.policyContainer.ruleContainer.disableAddRule();
				else
					FlexGlobals.topLevelApplication.discoveryContainer.ruleContainer.disableAddRule();
			}
			
			protected function expandAllClickHandler(event:MouseEvent):void
			{
				for each (var rule:Rule in ruleDP)
				{
					collapseStates[rule.id] = false;
				}
				ruleList.invalidateList();
			}
			
			protected function collapseAllClickHandler(event:MouseEvent):void
			{
				for each (var rule:Rule in ruleDP)
				{
					collapseStates[rule.id] = true;
				}
				ruleList.invalidateList();
			}

			protected function emptyRuleSetAddButtonClick(event:MouseEvent):void
			{
				//var newRuleDialog:NewRuleDialog = new NewRuleDialog;
				//newRuleDialog.isDiscoveryTab = isDiscoveryTab;
				var popup:NewRuleDialog = InteractionUtil.newPopup(NewRuleDialog) as NewRuleDialog;
				popup.isDiscoveryTab = isDiscoveryTab;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				this.addEventListener(DragEvent.DRAG_ENTER, acceptDrop);
				this.addEventListener(MouseEvent.CLICK, clickHandler);
				attachWatchers();
				FlexGlobals.topLevelApplication.popupulatePolicyOnCreate();
			}
			
			
			protected function getBoxSize(defaultSize:Number): Number
			{
				if (isDiscoveryTab)
					return defaultSize - DISCOVERY_WIDTH_DIFF;
				
				return defaultSize;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="rec" destination="customActionBRS">
			<my:method name="getCustomActions" result="getCustomActionsHandler(event)" />
		</my:remote>
		<mx:ListCollectionView id="rulesList"/>
		<fx:Boolean id="isDiscoveryTab"/>
	</fx:Declarations>
	
	<s:Group id="ruleListGroup" width="100%" height="100%"
			 includeInLayout="false" visible="false">
		<s:layout>
			<s:VerticalLayout gap="2" paddingBottom="8"/>
		</s:layout>
		
		<s:HGroup width="100%" height="40" 
				  horizontalAlign="left" verticalAlign="middle" 
				  paddingLeft="20" paddingBottom="10" paddingRight="50">
			<s:Button id="addRuleButtonTop" skinClass="com.mydlp.ui.skin.AddBitmapLabelButton24Skin" 
					  label="@Resource(key='rules.addrule', bundle='messages')"
					  click="addRuleToTop(event)" styleName="fontSize24Style"/>
			<s:Label id="filteredLabel" visible="false" includeInLayout="false"
					 fontWeight="bold" styleName="fontSize16Style" 
					 text="@Resource(key='rules.filtered.message', bundle='messages')"/>
		
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" gap="8">
				<s:Button id="expandButton" skinClass="com.mydlp.ui.skin.ExpandBitmapLabelButton16Skin"
						  label="@Resource(key='rules.expandAll', bundle='messages')"
						  click="expandAllClickHandler(event)"/>
				<s:Button id="collapseButton" skinClass="com.mydlp.ui.skin.CollapseBitmapLabelButton16Skin"
						  label="@Resource(key='rules.collapseAll', bundle='messages')"
						  click="collapseAllClickHandler(event)"/>
			</s:HGroup>
		</s:HGroup>
		
		<s:Group width="100%" includeInLayout="{!isDiscoveryTab}" visible="{!isDiscoveryTab}">
			<s:layout>
				<s:HorizontalLayout gap="0" paddingLeft="4"/>
			</s:layout>
			
			<s:Label text="@Resource(key='rules.type.label', bundle='messages')" 
					 width="190"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
			<s:Label text="@Resource(key='rules.scheduling.label', bundle='messages')"
					 visible="{isDiscoveryTab}"
					 includeInLayout="{isDiscoveryTab}"
					 width="{36 + 8 + 32 + 8}"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
			<s:Label text="@Resource(key='rules.sources.label', bundle='messages')"
					 width="{getBoxSize(sourceWidth) + 8}"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
			<s:Label text="@Resource(key='rules.destinations.label', bundle='messages')"
					 width="{getBoxSize(destinationWidth) + 8}"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
			<s:Label text="@Resource(key='rules.informationTypes.label', bundle='messages')"
					 width="{getBoxSize(informationTypeWidth) + 8}"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
			<s:Label text="@Resource(key='rules.action.label', bundle='messages')"
					 width="{getBoxSize(actionWidth)}"
					 textAlign="center"
					 styleName="fontSize16Style" fontWeight="bold"/>
		</s:Group>
		
		
		<rule:RuleList id="ruleList" dataProvider="{ruleDP}" 
					   width="100%" height="100%"
					   itemRendererFunction="ruleItemRendererFunction"/>
		
		<s:Group width="100%" height="50" includeInLayout="{!isDiscoveryTab}" visible="{!isDiscoveryTab}">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" paddingBottom="5" 
									paddingLeft="20"
									verticalAlign="middle" horizontalAlign="left"/>
			</s:layout>
			<s:Button id="addRuleButtonBottom" skinClass="com.mydlp.ui.skin.AddBitmapLabelButton24Skin" 
					  label="@Resource(key='rules.addrule', bundle='messages')"
					  click="addRuleToBottom(event)" styleName="fontSize24Style" />
		</s:Group>
		<s:Group width="100%" height="250" includeInLayout="{isDiscoveryTab}" visible="{isDiscoveryTab}">
			<s:layout>
				<s:HorizontalLayout paddingTop="5" paddingBottom="5" paddingLeft="20"/>
			</s:layout>
			
			<discovery:DiscoveryReportContainer id="discoveryReportContainer"/>
		</s:Group>
	</s:Group>
	
	<s:Group id="noRuleGroup" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<s:Button id="addRuleButtonFirst" skinClass="com.mydlp.ui.skin.AddBitmapButton128Skin"
				  toolTip="@Resource(bundle='messages', key='rules.addFirstRule.tooltip.label')"
				  click="emptyRuleSetAddButtonClick(event)"/>
	</s:Group>
	
</s:SkinnableContainer>
