<?xml version="1.0" encoding="utf-8"?>
<popup:GenericCRUDContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:general="com.mydlp.ui.widget.general.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				xmlns:popup="com.mydlp.ui.widget.general.popup.*"
				>
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ADDomain;
			import com.mydlp.ui.domain.ADDomainGroup;
			import com.mydlp.ui.domain.ADDomainItem;
			import com.mydlp.ui.domain.ADDomainItemGroup;
			import com.mydlp.ui.domain.ADDomainRoot;
			import com.mydlp.ui.domain.ADDomainUser;
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.AbstractNamedEntity;
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.CustomAction;
			import com.mydlp.ui.domain.CustomActionDescription;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.Endpoint;
			import com.mydlp.ui.domain.FileSystemDirectory;
			import com.mydlp.ui.domain.InformationDescription;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryGroup;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.RDBMSConnection;
			import com.mydlp.ui.domain.RDBMSInformationTarget;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.domain.RemoteStorage;
			import com.mydlp.ui.domain.RemoteStorageFTPFS;
			import com.mydlp.ui.domain.RemoteStorageNFS;
			import com.mydlp.ui.domain.RemoteStorageSSHFS;
			import com.mydlp.ui.domain.RemoteStorageWindowsShare;
			import com.mydlp.ui.domain.RemovableStorageEncryptionRule;
			import com.mydlp.ui.domain.RemovableStorageInboundRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleSchedule;
			import com.mydlp.ui.domain.RuleUserAD;
			import com.mydlp.ui.domain.ScreenshotRule;
			import com.mydlp.ui.domain.USBDevice;
			import com.mydlp.ui.domain.UserSettings;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.domain.WebServer;
			import com.mydlp.ui.util.ClassMember;
			import com.mydlp.ui.util.ErrorTipManager;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.validators.EmptyListValidator;
			import com.mydlp.ui.validators.MyRegExValidator;
			import com.mydlp.ui.validators.NullValidator;
			import com.mydlp.ui.widget.general.input.ADDomainAliasInput;
			import com.mydlp.ui.widget.general.input.ADDomainItemInput;
			import com.mydlp.ui.widget.general.input.ADDomainItemListing;
			import com.mydlp.ui.widget.general.input.ADDomainNameInput;
			import com.mydlp.ui.widget.general.input.ADDomainUserAliasListing;
			import com.mydlp.ui.widget.general.input.AuthSecurityRolesInput;
			import com.mydlp.ui.widget.general.input.AuthorityScopeADItemInput;
			import com.mydlp.ui.widget.general.input.CurrentlyEnumeratingBar;
			import com.mydlp.ui.widget.general.input.DataFormatInput;
			import com.mydlp.ui.widget.general.input.DocumentClassifierItemInput;
			import com.mydlp.ui.widget.general.input.DocumentDatabaseFileEntryInput;
			import com.mydlp.ui.widget.general.input.DocumentDatabaseRemoteStorageInput;
			import com.mydlp.ui.widget.general.input.EndpointInput;
			import com.mydlp.ui.widget.general.input.InformationFeatureInput;
			import com.mydlp.ui.widget.general.input.IpAddressInput;
			import com.mydlp.ui.widget.general.input.MimeTypeInput;
			import com.mydlp.ui.widget.general.input.RDBMSInformationTargetInput;
			import com.mydlp.ui.widget.general.input.RegularExpressionGroupInput;
			import com.mydlp.ui.widget.general.input.UserNotificationInput;
			import com.mydlp.ui.widget.general.input.WebServerInput;
			import com.mydlp.ui.widget.policy.rule.RuleContainer;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ItemClickEvent;
			import mx.events.ValidationResultEvent;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.EmailValidator;
			import mx.validators.NumberValidator;
			import mx.validators.RegExpValidator;
			import mx.validators.Validator;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.ComboBox;
			import spark.components.DropDownList;
			import spark.components.TextArea;
			import spark.components.TextInput;
			
			protected var cButton:Button = new Button();
			protected var miscButton:Button = new Button();
			protected var misc2Button:Button = new Button();
			protected var cancelButton:Button = new Button();
			protected var formItemOrder:ListCollectionView = new ArrayCollection();
			
			public var deleteList:ListCollectionView;
			
			protected var sourceLabelList:Array = new Array();
			protected var inputValidationObject:Object = new Object();
			
			protected var validators:Array = new Array();
			
			protected var inputLabelForEnterprise:InputLabel = null;
			protected var inputLabelForEnterprise2:InputLabel = null;
			protected var inputLabelForClassifier:InputLabel = null;
			protected var inputLabelForClassifier2:InputLabel = null;
			protected var roleAdminSelected:Boolean = false;
			
			protected var emailTextInput:TextInput;
			
			protected function cancelButtonClickHandler(event:Event):void
			{
				ErrorTipManager.hideAllErrorTips();
				if(event is KeyboardEvent)
				{
					if((event as KeyboardEvent).charCode == 32 || (event as KeyboardEvent).charCode == 13)
						InteractionUtil.closeCurrentPopup();
				}
				else
					InteractionUtil.closeCurrentPopup();
			}
			
			protected function isEditable(obj:*): Boolean
			{
				if (obj is ADDomainItem)
					return false;
				return true;
			}
			
			protected function isRemoteStorageObject(obj:*):Boolean
			{
				if(obj is RemoteStorageWindowsShare ||
					obj is RemoteStorageFTPFS || obj is RemoteStorageNFS ||
					obj is RemoteStorageSSHFS)
					return true;
				else 
					return false;
			}
			
			public function populateClassMembers(targetObject:Object): void
			{
				var classMembers:Array = ReflectionUtil.getClassMembers(targetObject as Object);
				var index:Number = -1;
				
				for each (var classMember:ClassMember in classMembers)
				{
					var inputLabel:InputLabel = null;
					
					
					if (	classMember.name.charAt(0) == '_' ||
							classMember.name == "id" ||
							classMember.name == "sortPriority" ||
							classMember.name == "optimisticLockVersion" ||
							classMember.name == "nameKey" ||
							classMember.name == "icon" ||
							(classMember.name == "group" && classMember.type == InventoryGroup) ||
							(classMember.name == "ruleItems" && classMember.type == ListCollectionView) ||
							(classMember.name == "ruleItemGroups" && classMember.type == ListCollectionView) ||
							(targetObject is Rule && classMember.name == "customAction" && classMember.type == CustomAction) ||
							classMember.name == "enabled" ||
							classMember.name == "priority" ||
							classMember.name == "emailHashCode" ||
							//todo refine password
							(classMember.name == "password" && !isRemoteStorageObject(targetObject)) ||
							classMember.name == "distinguishedNameHash" ||
							(classMember.name == "distance" && targetObject is InformationDescription) ||
							(classMember.name == "distanceEnabled" && targetObject is InformationDescription) ||
							(classMember.name == "notificationEnabled" && targetObject is Rule) ||
							(classMember.name == "action" && !(targetObject is USBDevice)) ||
							(classMember.name == "domainId" && classMember.type == Number) ||
							(classMember.name == "children" && classMember.type == ListCollectionView)||						
							(classMember.name == "coupledInventoryItem" && classMember.type == InventoryItem) ||
							(classMember.name == "coupledCustomAction" && classMember.type == CustomAction) ||
							(classMember.name == "coupledRuleItems" && classMember.type == ListCollectionView) ||
							(classMember.name == "informationType" && classMember.type == InformationType) ||
							(classMember.name == "editable" && classMember.type == Boolean) ||
							(classMember.name == "matcher" && classMember.type == Matcher) ||
							(classMember.name == "root" && classMember.type == ADDomainRoot) ||
							(targetObject is ADDomain && classMember.name == "baseDistinguishedName" && classMember.type == String) ||
							(classMember.name == "parent" && classMember.type == ADDomainItemGroup) ||
							(classMember.name == "isDeleted" && classMember.type == Boolean) ||
							(classMember.name == "settings" && classMember.type == UserSettings) ||
							(classMember.name == "ruleSchedule" && classMember.type == RuleSchedule) ||
							(targetObject is CustomAction && classMember.name == "typeKey" && classMember.type == String) ||
							(targetObject is WebServer && classMember.name == "address") ||
							(targetObject is WebServer && classMember.name == "port") ||
							(targetObject is WebServer && classMember.name == "startPath") ||
							(targetObject is DocumentDatabase && classMember.name == "currentlyFingerprinting") ||
							(targetObject is InventoryGroup && classMember.name == "itemType")
						)
					{
						continue;
					}
					
					if(targetObject is AbstractEntity &&
							classMember.type == ListCollectionView &&
							targetObject[classMember.name] == null)
						targetObject[classMember.name] = new ArrayCollection();
					
					if (classMember.name == "category" && classMember.type == InventoryCategory)//should be revised because we have two tab now
					{
						if (targetObject is InventoryItem && targetObject.group != null) // means that this an item of a group
							continue;
						if (targetObject.id == null || isNaN(targetObject.id) ) // means that this is a new object
							if (targetObject[classMember.name] != null)
								continue;
							else if (FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.selectedItem == null)
								continue;
							else if (FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.selectedItem is InventoryCategory)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.selectedItem;
							else if (FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.selectedItem is InventoryBase)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.selectedItem.category;
						continue;
					}
					else if (targetObject is DocumentDatabase && classMember.name == "rdbmsEntries" && classMember.type == ListCollectionView)
					{
						continue;
					}
					else if ( targetObject is USBDevice && classMember.name == "action")
					{
						targetObject[classMember.name] = "PASS"; // TODO: will be deleted after implementing edit dialog.
					}
					else if (targetObject is InventoryItem && classMember.name == "item")
					{
						if (targetObject.item != null && targetObject.item is Item)
							(targetObject.item as Item).coupledInventoryItem = targetObject as InventoryItem;
						populateClassMembers(targetObject.item);
						continue;
					}
					else if (targetObject is CustomAction && classMember.name == "customActionDescription")
					{
						if (targetObject.customActionDescription != null && targetObject.customActionDescription is CustomActionDescription)
							(targetObject.customActionDescription as CustomActionDescription).coupledCustomAction = targetObject as CustomAction;
						populateClassMembers(targetObject.customActionDescription);
						continue;
					}
					
					else if (targetObject is Rule && classMember.name == "notificationItems")
					{	
						if (targetObject is ScreenshotRule || targetObject is RemovableStorageInboundRule || targetObject is RemovableStorageEncryptionRule )
						{
							targetObject["notificationEnabled"] = false;
							targetObject[classMember.name] = new ArrayCollection(); 
							continue;
						}
						var nInput:UserNotificationInput = new UserNotificationInput();
						nInput.deleteList = this.deleteList
						nInput.notificationList = targetObject[classMember.name];
						nInput.notificationEnabled = targetObject["notificationEnabled"];
						nInput.rule = targetObject as Rule;
						BindingUtils.bindProperty(targetObject, classMember.name, nInput, "notificationList");
						BindingUtils.bindProperty(targetObject, "notificationEnabled", nInput, "notificationEnabled");
						inputLabel = new VerticalInputLabel();
						inputLabel.includeInLayout = SessionUtil.isEnterprise();
						inputLabel.visible = SessionUtil.isEnterprise();
						inputLabel.addElement(nInput);
						index = 14;
					}
					else if (
							( classMember.name == "ipBase" || classMember.name == "ipMask" )
							&& classMember.type == Number)
					{
						var ipInput:IpAddressInput = new IpAddressInput();
						ipInput.numberValue = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ipInput, "numberValue");
						ipInput.width = InputLabel.HORIZONTAL_INPUT_WIDTH;
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(ipInput);
						
						if(classMember.name == "ipBase")
							index = 1;
						else
							index = 2;
						
						var regExpValidator:RegExpValidator = new RegExpValidator();
						regExpValidator.source = ipInput;
						regExpValidator.property = "text";
						regExpValidator.expression = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
						ErrorTipManager.registerValidator(regExpValidator);
						validators.push(regExpValidator);
					}
					else if (targetObject is InformationType && 
							classMember.name == "dataFormats" && 
							classMember.type == ListCollectionView)
					{
						var dfInput:DataFormatInput = new DataFormatInput();
						dfInput.dataFormats = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, dfInput, "dataFormats");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(dfInput);
						index = 8;
						var emptyListValidator:EmptyListValidator = new EmptyListValidator();
						emptyListValidator.source = dfInput.dfList;
						emptyListValidator.property = "dataProvider";
						ErrorTipManager.registerValidator(emptyListValidator);
						//nullValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
						//nullValidator.addEventListener(ValidationResultEvent.VALID, validInput);
						validators.push(emptyListValidator);
					}
					
					else if(targetObject is DocumentDatabase &&
							classMember.name == "documentDatabaseRemoteStorages" &&
							classMember.type == ListCollectionView)
					{
						if(targetObject["id"] == null || isNaN(targetObject["id"]))
							continue;
						var ddRemoteStorages:DocumentDatabaseRemoteStorageInput = new DocumentDatabaseRemoteStorageInput();
						ddRemoteStorages.documentDatabaseRemoteStorages = targetObject[classMember.name];
						ddRemoteStorages.documentDatabase = targetObject as DocumentDatabase;
						BindingUtils.bindProperty(targetObject, classMember.name, ddRemoteStorages, "documentDatabaseRemoteStorages");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(ddRemoteStorages);
						index = 10;
					}
					
					else if(targetObject is DocumentDatabase &&
							classMember.name == "fileEntries" &&
							classMember.type == ListCollectionView)
					{
						if(targetObject["id"] == null || isNaN(targetObject["id"]))
							continue;
						var ddInput:DocumentDatabaseFileEntryInput = new DocumentDatabaseFileEntryInput();
						ddInput.deleteList = this.deleteList;
						ddInput.fileEntries = targetObject[classMember.name];
						ddInput.databaseId = targetObject["id"];
						BindingUtils.bindProperty(targetObject, classMember.name, ddInput, "fileEntries");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(ddInput);
						index = 7;
					}
					
					else if (targetObject is RegularExpressionGroup &&
							classMember.name == "entries" &&
							classMember.type == ListCollectionView)
					{
						var regInput:RegularExpressionGroupInput = new RegularExpressionGroupInput();
						regInput.deleteList = this.deleteList;
						regInput.entries = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, regInput, "entries");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(regInput);
						index = 6;
					}
					
					else if(classMember.name == "endpoint" &&
						classMember.type == Endpoint)
					{
						var epInput:EndpointInput = new EndpointInput();
						epInput.endpoint = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, epInput, "endpoint");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(epInput);
						index = 8;
						
						var nullValidator2:NullValidator = new NullValidator();
						nullValidator2.source = epInput;
						nullValidator2.property = "endpoint";
						ErrorTipManager.registerValidator(nullValidator2);
						//nullValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
						//nullValidator.addEventListener(ValidationResultEvent.VALID, validInput);
						validators.push(nullValidator2);
					}
					else if(targetObject is DataFormat &&
						classMember.name == "mimeTypes" &&
						classMember.type == ListCollectionView)
					
					{
						var mtInput:MimeTypeInput = new MimeTypeInput();
						
						BindingUtils.bindProperty(targetObject, classMember.name, mtInput, "mimeTypes");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(mtInput);
						index = 8;
					}
					
					else if (targetObject is WebServer && classMember.name == "proto")
					{
						var wsi:WebServerInput = new WebServerInput();
						wsi.proto = targetObject["proto"];
						wsi.address = targetObject["address"];
						wsi.port = targetObject["port"];
						wsi.startPath = targetObject["startPath"];
						BindingUtils.bindProperty(targetObject, "proto", wsi, "proto");
						BindingUtils.bindProperty(targetObject, "address", wsi, "address");
						BindingUtils.bindProperty(targetObject, "port", wsi, "port");
						BindingUtils.bindProperty(targetObject, "startPath", wsi, "startPath");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(wsi);
						index = 2;
						
						var regExpValidatorP:RegExpValidator = new RegExpValidator();
						regExpValidatorP.source = wsi.addressText;
						regExpValidatorP.required=true;
						regExpValidatorP.property = "text";
						regExpValidatorP.expression =
						"^(http(s?)://[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,6}(/?|(/[\w-]+)*)(/?|/\w+\.[a-zA-Z]{2,4}(/?[\w]+\=[\w\-]+)?)?(?:\&[\w]+=[\w-]+)*)$";
						//"^([a-z0-9\+\.-]+):(?://(?:((?:[a-z0-9-_\.~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\d*))?(/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$"
						regExpValidatorP.noMatchError = "Invalid URI for web server!";
						regExpValidatorP.noExpressionError = "Invalid URI for web server!";
						ErrorTipManager.registerValidator(regExpValidatorP);
						validators.push(regExpValidatorP);
					}
					
					else if (targetObject is AuthUser && classMember.name == "role")
					{
						var srInput:AuthSecurityRolesInput = new AuthSecurityRolesInput();
						srInput.authSecurityRole = targetObject[classMember.name];
						srInput.targetUser = targetObject as AuthUser;
						BindingUtils.bindProperty(targetObject, classMember.name, srInput, "authSecurityRole");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(srInput);
						this.addEventListener(ItemClickEvent.ITEM_CLICK, itemClickHandler);
						index = 5;
					}
					
					else if (targetObject is InformationDescription &&
							classMember.name == "features" && 
							classMember.type == ListCollectionView)
					{
						var ifInput:InformationFeatureInput = new InformationFeatureInput();
						ifInput.deleteList = this.deleteList;
						ifInput.informationFeatures = targetObject[classMember.name];
						if (targetObject["distanceEnabled"] == null)
						{
							targetObject["distanceEnabled"] = false;
						}
						if (isNaN(targetObject["distance"]))
						{
							targetObject["distance"] = 120;
						}
						else if (targetObject["distance"] <= 0)
						{
							targetObject["distance"] = 100;
							targetObject["distanceEnabled"] = false;
						}
						if (!SessionUtil.isEnterprise())
						{
							targetObject["distanceEnabled"] = false;
						}
						ifInput.distance = targetObject["distance"];
						ifInput.distanceEnabled = targetObject["distanceEnabled"];
						BindingUtils.bindProperty(targetObject, classMember.name, ifInput, "informationFeatures");
						BindingUtils.bindProperty(targetObject, "distance", ifInput, "distance");
						BindingUtils.bindProperty(targetObject, "distanceEnabled", ifInput, "distanceEnabled");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(ifInput);
						var numberValidator2:NumberValidator = new NumberValidator();
						numberValidator2.source = ifInput.distanceValueInput;
						numberValidator2.property = "text";
						numberValidator2.domain = "int";
						numberValidator2.minValue = "1";
						numberValidator2.maxValue = "5000";
						ErrorTipManager.registerValidator(numberValidator2);
						validators.push(numberValidator2);
						var emptyListValidator2:EmptyListValidator = new EmptyListValidator();
						emptyListValidator2.source = ifInput.ifList;
						emptyListValidator2.property = "dataProvider";
						ErrorTipManager.registerValidator(emptyListValidator2);
						//nullValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
						//nullValidator.addEventListener(ValidationResultEvent.VALID, validInput);
						validators.push(emptyListValidator2);
						index = 9;
					}
					else if (targetObject is InformationType &&
							classMember.name == "informationDescription" && 
							classMember.type == InformationDescription)
					{
						if (targetObject[classMember.name] == null)
							targetObject[classMember.name] = new InformationDescription();
						
						populateClassMembers(targetObject[classMember.name]);
						continue;
					}
					else if (targetObject is AuthUser &&
						classMember.name == "authorityScopeADItems" && 
						classMember.type == ListCollectionView)
					{
						var asaiInput:AuthorityScopeADItemInput = new AuthorityScopeADItemInput();
						asaiInput.authorityScopeADItems = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, asaiInput, "authorityScopeADItems");
						inputLabelForEnterprise = new VerticalInputLabel();
						
						inputLabelForEnterprise.includeInLayout = SessionUtil.isEnterprise();
						inputLabelForEnterprise.visible = SessionUtil.isEnterprise();
						
						inputLabelForEnterprise.addElement(asaiInput);
						index = 7;
					}
					
					else if (targetObject is AuthUser &&
						classMember.name == "documentDatabases" &&
						classMember.type == ListCollectionView)
					{
						var dciInput:DocumentClassifierItemInput = new DocumentClassifierItemInput();
						dciInput.documentClassifierItems = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, dciInput, "documentClassifierItems");
						inputLabelForClassifier = new VerticalInputLabel();
						
						inputLabelForClassifier.includeInLayout = SessionUtil.isEnterprise();
						inputLabelForClassifier.visible = SessionUtil.isEnterprise();
						
						inputLabelForClassifier.addElement(dciInput);
						index = 8;						
					}
					else if (targetObject is ADDomain &&
						classMember.name == "domainName" &&
						classMember.type == String)
					{
						index = 0;
						var addnInput:ADDomainNameInput = new ADDomainNameInput();
						addnInput.domainName = targetObject["domainName"];
						addnInput.baseDistinguishedName = targetObject["baseDistinguishedName"];
						if (isNaN(targetObject["id"]))
						{
							BindingUtils.bindProperty(targetObject, "domainName", addnInput, "domainName");
							BindingUtils.bindProperty(targetObject, "baseDistinguishedName", addnInput, "baseDistinguishedName");
							ErrorTipManager.registerValidator(addnInput.domainNameValidator);
							validators.push(addnInput.domainNameValidator);
						}
						else
						{
							addnInput.enabled = false;
						}
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(addnInput);
					}
					else if (targetObject is ADDomain &&
						classMember.name == "aliases" && 
						classMember.type == ListCollectionView)
					{
						var adaiInput:ADDomainAliasInput = new ADDomainAliasInput();
						adaiInput.deleteList = this.deleteList;
						adaiInput.adDomainAliases = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, adaiInput, "adDomainAliases");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(adaiInput);
						index = 7;
					}
					else if (targetObject is ADDomainUser &&
						classMember.name == "aliases" && 
						classMember.type == ListCollectionView)
					{
						var aduaiInput:ADDomainUserAliasListing = new ADDomainUserAliasListing();
						aduaiInput.adDomainUserAliases = targetObject[classMember.name];
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(aduaiInput);
						index = 7;
					}
					else if ((targetObject is ADDomainUser && 
								classMember.name == "groups" && 
								classMember.type == ListCollectionView) ||
							(targetObject is ADDomainGroup && 
								classMember.name == "users" &&
								classMember.type == ListCollectionView) )
					{
						var adiInput:ADDomainItemListing = new ADDomainItemListing();
						adiInput.adDomainItems = targetObject[classMember.name];
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(adiInput);
						index = 8;
					}
					else if (targetObject is RuleUserAD &&
						classMember.name == "domainItem" && 
						classMember.type == ADDomainItem)
					{
						var rudiInput:ADDomainItemInput = new ADDomainItemInput();
						rudiInput.domainItem = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, rudiInput, "domainItem");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(rudiInput);
						index = 7;
						var nullValidator:NullValidator = new NullValidator();
						nullValidator.source = rudiInput;
						nullValidator.property = "domainItem";
						ErrorTipManager.registerValidator(nullValidator);
						//nullValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
						//nullValidator.addEventListener(ValidationResultEvent.VALID, validInput);
						validators.push(nullValidator);
					}
					else if (targetObject is ADDomain &&
						classMember.name == "message" && 
						classMember.type == String)
					{
						index = 15;
						var textArea2:TextArea = new TextArea();
						textArea2.text = targetObject[classMember.name];
						textArea2.width = InputLabel.VERTICAL_INPUT_WIDTH;
						textArea2.height = 60;
						textArea2.editable = false;
						textArea2.setStyle("color", "red");
						textArea2.setStyle("borderColor", "0x555555");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(textArea2);
						if (textArea2.text == "" || textArea2.text == null || textArea2.text == "null") {
							inputLabel.includeInLayout = false;
							inputLabel.visible = false;
						}
					}
					else if (classMember.name == "currentlyEnumerating" && classMember.type == Boolean)
					{
						var addps:CurrentlyEnumeratingBar = new CurrentlyEnumeratingBar();
						addps.currentlyEnumerating = targetObject[classMember.name];
						inputLabel = new NoLabelInputLabel();
						inputLabel.addElement(addps);
						index = 9;
					}
					else if ( 
							(targetObject is Rule && classMember.name == "description") ||
							(targetObject is Rule && classMember.name == "userMessage") ||
							(targetObject is USBDevice && classMember.name == "comment") 
						)
					{
						if (classMember.name == "userMessage")
						{
							if (targetObject is WebRule ||
								targetObject is MailRule
								)
							{
							}
							else
							{
								targetObject[classMember.name] = null;
								continue;
							}							
						}
						
						var textArea:TextArea = new TextArea();
						if (classMember.name == "userMessage" &&
								(!(
									targetObject["action"] == Rule.ACTION_BLOCK ||
									targetObject["action"] == Rule.ACTION_QUARANTINE
								))
							)
						{
							textArea.enabled = false;
							textArea.text = LangUtil.getString("messages", "generic.edit.Rule.userMessage.disabledReason.message");
						}
						else
						{
							textArea.text = targetObject[classMember.name];
							BindingUtils.bindProperty(targetObject, classMember.name, textArea, "text");
						}
						textArea.width = InputLabel.VERTICAL_INPUT_WIDTH;
						textArea.height = 60;
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(textArea);
						if (classMember.name == "userMessage")
						{
							index = 13;
						}
						else
						{
							index = 12
						}
					}
					else if (classMember.name == "dbType" && classMember.type == String)
					{
						const finalObjectName:String = getObjectName(targetObject);
						const finalClassMemberName:String = classMember.name;
						var comboBox:ComboBox = new ComboBox();
						comboBox.dataProvider = RDBMSConnection.DB_TYPES;
						comboBox.labelFunction = function(item:Object): String {
							if (item == null) return "";
							return LangUtil.getString("messages", 
								"generic.edit." + finalObjectName + "." + finalClassMemberName + 
								".comboBoxItem." + item.toString() + ".label");
						};
						comboBox.width = InputLabel.HORIZONTAL_INPUT_WIDTH;
						comboBox.selectedItem = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, comboBox, "selectedItem");
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(comboBox);
						index = 1;
					}
					else if (targetObject is AbstractEntity && classMember.type == RDBMSInformationTarget 
						&& ! FlexGlobals.topLevelApplication.hasRole(AuthSecurityRole.ROLE_ADMIN)
						&& ! FlexGlobals.topLevelApplication.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					{
						continue;
					}
					else if (targetObject is AbstractEntity && classMember.type == RDBMSInformationTarget)
					{
						if ( targetObject["id"] == null || isNaN(targetObject["id"]) )
							continue;
						var rdbmsitInput:RDBMSInformationTargetInput = new RDBMSInformationTargetInput();
						rdbmsitInput.informationTarget = targetObject[classMember.name];
						rdbmsitInput.deleteList = this.deleteList;
						BindingUtils.bindProperty(targetObject, classMember.name, rdbmsitInput, "informationTarget");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(rdbmsitInput);
						index = 5;
					}
					
					else if(classMember.type == Boolean)
					{
						var checkBox1:CheckBox = new CheckBox();
						checkBox1.selected = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, checkBox1, "selected");

						if (classMember.name == "isActive")
						{
							inputLabel = new HorizontalInputLabel();
							inputLabel.addElement(checkBox1);
							index = 4;
						}
						else 
						{
							inputLabelForEnterprise2 = new HorizontalInputLabel();
							inputLabelForEnterprise2.addElement(checkBox1);
							if(!SessionUtil.isEnterprise())
							{
								inputLabelForEnterprise2.includeInLayout = true;
								inputLabelForEnterprise2.visible = true;
							}
							index = 6;
						}
					}
					
					else
					{
						var textInput:TextInput = new TextInput();
						if(targetObject is AbstractNamedEntity && classMember.name == "name")
							textInput.text = targetObject["label"];
						else
							textInput.text = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, textInput, "text");
						textInput.width = InputLabel.HORIZONTAL_INPUT_WIDTH;
						textInput.editable = isEditable(targetObject);
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(textInput);
						if(classMember.name == "name"){
							index = 0;
							var regExpValidator2:RegExpValidator = new RegExpValidator();
							regExpValidator2.source = textInput;
							regExpValidator2.property = "text";
							regExpValidator2.expression = "^[a-zA-Z0-9-_/\.\ ]+$";
							regExpValidator2.required = true;
							ErrorTipManager.registerValidator(regExpValidator2);
							validators.push(regExpValidator2);
						}
						else if(classMember.name == "address")
						{
							var regExpValidator8:RegExpValidator = new RegExpValidator();
							regExpValidator8.source = textInput;
							regExpValidator8.property = "text";
							regExpValidator8.expression = MyRegExValidator.domainNameOrIpRegex();
							regExpValidator8.required = true;
							ErrorTipManager.registerValidator(regExpValidator8);
							validators.push(regExpValidator8);
							index = 1;
						}
						else if(classMember.name == "uncPath")
						{	
							var regExpValidator12:RegExpValidator = new RegExpValidator();
							regExpValidator12.source = textInput;
							regExpValidator12.property = "text";
							regExpValidator12.expression = "^\\\\\\\\[a-zA-Z0-9\.\/\\\\ ]*$";
							regExpValidator12.required = false;
							ErrorTipManager.registerValidator(regExpValidator12);
							validators.push(regExpValidator12);
							index = 1;
						}
						else if(classMember.name == "port")
						{
							var numberValidator5:NumberValidator = new NumberValidator();
							numberValidator5.source = textInput;
							numberValidator5.property = "text";
							numberValidator5.domain = "int";
							numberValidator5.minValue = "1";
							numberValidator5.maxValue = "65535";
							ErrorTipManager.registerValidator(numberValidator5);
							validators.push(numberValidator5);
							index = 2;
						}
						else if(classMember.name == "path")
						{
							var regExpValidator9:RegExpValidator = new RegExpValidator();
							regExpValidator9.source = textInput;
							regExpValidator9.property = "text";
							regExpValidator9.expression = "^[a-zA-Z0-9-\.\/_\\\\ ]*$";
							regExpValidator9.required = false;
							ErrorTipManager.registerValidator(regExpValidator9);
							validators.push(regExpValidator9);
							index = 3;
						}
						else if(classMember.name == "displayName"){
							index = 0;
						}
						else if(classMember.name == "serverIp"){
							index = 1;
							var regExpValidator3:RegExpValidator = new RegExpValidator();
							regExpValidator3.source = textInput;
							regExpValidator3.property = "text";
							regExpValidator3.expression = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
							ErrorTipManager.registerValidator(regExpValidator3);
							validators.push(regExpValidator3);
						}
						else if(classMember.name == "netbiosName"){
							index = 2;
							var regExpValidator6:RegExpValidator = new RegExpValidator();
							regExpValidator6.source = textInput;
							regExpValidator6.property = "text";
							regExpValidator6.expression = "^([\\w-]{1,15})$";
							ErrorTipManager.registerValidator(regExpValidator6);
							validators.push(regExpValidator6);
						}
						else if(classMember.name == "loginPassword"){
							index = 4;
							textInput.displayAsPassword = true;
						}
						else if(targetObject is ADDomain && classMember.name == "loginUsername") {
							index = 3;
							var regExpValidator5:RegExpValidator = new RegExpValidator();
							regExpValidator5.source = textInput;
							regExpValidator5.property = "text";
							regExpValidator5.expression = "^[\\w\\.-_]{1,255}@[\\w\\.-]{1,255}$";
							ErrorTipManager.registerValidator(regExpValidator5);
							validators.push(regExpValidator5);
						}
						else if(classMember.name == "destinationString") {
							var regExpValidator10:RegExpValidator = new RegExpValidator();
							if(!(targetObject is FileSystemDirectory))
							{
								regExpValidator10.source = textInput;
								regExpValidator10.property = "text";
								regExpValidator10.expression = MyRegExValidator.domainNameOrIpRegex();
								regExpValidator10.required = true;
								ErrorTipManager.registerValidator(regExpValidator10);
								validators.push(regExpValidator10);
							}
							index = 1;
						}
						if(classMember.name == "hostname"){
							index = 3;
							var regExpValidator13:RegExpValidator = new RegExpValidator();
							regExpValidator13.source = textInput;
							regExpValidator13.property = "text";
							regExpValidator13.expression = "^([a-zA-Z0-9*]|[a-zA-Z0-9*][a-zA-Z0-9\-*]*[a-zA-Z0-9*])(\.([a-zA-Z0-9*]|[a-zA-Z0-9*][a-zA-Z0-9\-*]*[a-zA-Z0-9*]))*$";
							regExpValidator13.required = true;
							ErrorTipManager.registerValidator(regExpValidator13);
							validators.push(regExpValidator13);
						}
						else if(classMember.name == "sourceDomain") {
							index = 1;
						}
						else if(classMember.name == "digDepth") {
							if(isNaN(targetObject[classMember.name]) || targetObject[classMember.name] < 1)
								textInput.text = new String("8");
							textInput.width = 50;
							var numberValidatorP:NumberValidator = new NumberValidator();
							numberValidatorP.source = textInput;
							numberValidatorP.property = "text";
							numberValidatorP.domain = "int";
							numberValidatorP.minValue = "1";
							numberValidatorP.maxValue = "16";
							numberValidatorP.exceedsMaxError = LangUtil.getString('messages', 'webserver.depth.max.error.message');
							ErrorTipManager.registerValidator(numberValidatorP);
							validators.push(numberValidatorP);
							index = 3;
						}
						else if(classMember.name == "loginUsername") {
							index = 3;
						}
						else if(classMember.name == "distinguishedName"){
							index = 1;
						}
						else if(classMember.name == "sAMAccountName"){
							index = 2;
						}
						else if(classMember.name == "userPrincipalName"){
							index = 3;
						}
						else if(classMember.name == "jdbcUrl"){
							index = 2;
						}
						else if(classMember.name == "username"){
							if (targetObject is AuthUser) {
								var regExpValidator7:RegExpValidator = new RegExpValidator();
								regExpValidator7.source = textInput;
								regExpValidator7.property = "text";
								regExpValidator7.expression = "^[a-zA-Z0-9_/\.\ ]+$";
								regExpValidator7.required = true;
								ErrorTipManager.registerValidator(regExpValidator7);
								validators.push(regExpValidator7);
							}
							else if (targetObject is RemoteStorageSSHFS)
							{
								var regExpValidator11:RegExpValidator = new RegExpValidator();
								regExpValidator11.source = textInput;
								regExpValidator11.property = "text";
								regExpValidator11.expression = "^[a-zA-Z0-9_/\.\ ]+$";
								regExpValidator11.required = true;
								ErrorTipManager.registerValidator(regExpValidator11);
								validators.push(regExpValidator11);
							}
							index = 4;
						}
						else if(classMember.name == "deviceId"){
							index = 3;
						}
						else if(classMember.name == "uniqId"){
							index = 6;
						}
						else if(classMember.name == "email"){
							var emailValidator:EmailValidator = new EmailValidator();
							emailValidator.source = textInput;
							emailValidator.property = "text";
							ErrorTipManager.registerValidator(emailValidator);
							validators.push(emailValidator);
							index = 2;
						}
						else if(classMember.name == "password"){
							index = 5;
							textInput.displayAsPassword = true;
						}
						else if(classMember.name == "threshold"){
							if(isNaN(targetObject[classMember.name]))
								textInput.text = new String("1");
							index = 7;
							var numberValidator:NumberValidator = new NumberValidator();
							numberValidator.source = textInput;
							numberValidator.property = "text";
							numberValidator.domain = "int";
							numberValidator.minValue = "1";
							ErrorTipManager.registerValidator(numberValidator);
							validators.push(numberValidator);
						}
						else if(classMember.name == "hotFolderId"){
							if(isNaN(targetObject[classMember.name]))
								textInput.text = new String("");
							index = 3;
							var numberValidator3:NumberValidator = new NumberValidator();
							numberValidator3.source = textInput;
							numberValidator3.property = "text";
							numberValidator3.domain = "int";
							numberValidator3.minValue = "1";
							ErrorTipManager.registerValidator(numberValidator3);
							validators.push(numberValidator3);
						}
						else if(classMember.name == "activityComment"){
							index = 6;
						}
					}
					/// TODO: below may be refined
					if (inputLabel != null)
					{
						inputLabel.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						sourceLabelList.push(new InputLabelIndexTuple(index, inputLabel));
					}
					
					else if(inputLabelForEnterprise != null && classMember.name == "authorityScopeADItems")
					{
						inputLabelForEnterprise.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						sourceLabelList.push(new InputLabelIndexTuple(index, inputLabelForEnterprise));
					}
					
					else if(inputLabelForEnterprise2 != null && classMember.name == "hasAuthorityScope")
					{
						inputLabelForEnterprise2.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						sourceLabelList.push(new InputLabelIndexTuple(index, inputLabelForEnterprise2));
					}
					
					else if(inputLabelForClassifier != null && classMember.name == "documentDatabases")
					{
						inputLabelForClassifier.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						sourceLabelList.push(new InputLabelIndexTuple(index, inputLabelForClassifier));
					}
				}
			}
			
			protected function validInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = true;
				for (var i:* in inputValidationObject)
					if(inputValidationObject[i] as Boolean == false) return;
				cButton.enabled = true;
			}
			
			protected function invalidInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = false;
				cButton.enabled = false;
			}
			
			
			public function populateEachFormItem():void
			{
				sourceLabelList.sortOn("order", [Array.DESCENDING, Array.NUMERIC]);
				//for(var i:int = sourceLabelList.length-1; i >= 0; i--){
				for(var i:int = 0; i < sourceLabelList.length; i++){
					var tempElement:InputLabelIndexTuple = sourceLabelList[i] as InputLabelIndexTuple;
					if(tempElement != null){
						var tempInputLabel:InputLabel = tempElement.vs;
						editForm.addElement(tempInputLabel);
					}
				}
			}
			public function populateButtons(): void
			{	
				cButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".createButton.label");
				cancelButton.label = LangUtil.getString("messages", "generic.edit.cancelButton.label");
				cButton.addEventListener(MouseEvent.CLICK, createButtonClickHandler);
				cButton.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
				cancelButton.addEventListener(MouseEvent.CLICK, cancelButtonClickHandler);
				cancelButton.addEventListener(KeyboardEvent.KEY_DOWN, cancelButtonClickHandler);
				buttonGroup.addElement(cButton);
				/*
				if (formObject is ADDomain)
				{
					miscButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".enumButton.label");
					miscButton.addEventListener(MouseEvent.CLICK, enumADDomainButtonClickHandler);
					miscButton.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
					buttonGroup.addElement(miscButton);
				}
				else */ 
				if (formObject is RDBMSConnection || formObject is ADDomain || 
					(formObject is InventoryItem && (formObject as InventoryItem).item is RemoteStorage))
				{
					miscButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testButton.label");
					miscButton.addEventListener(MouseEvent.CLICK, testConnectionButtonClickHandler);
					miscButton.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
					buttonGroup.addElement(miscButton);
					if (formObject is ADDomain && (formObject as ADDomain).currentlyEnumerating)
					{
						miscButton.enabled=false;
					}
					
					cButton.enabled = false;
				}
				if (formObject is InventoryItem && (formObject as InventoryItem).item is WebServer)
				{
					miscButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testAndValidateButton.label");
					miscButton.addEventListener(MouseEvent.CLICK, testAndValidateButtonClickHandler);
					miscButton.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
					buttonGroup.addElement(miscButton);
					cButton.enabled = false;
				}
				if (!isNaN(formObject.id) &&
							(
								formObject is ADDomain ||
								(formObject is RegularExpressionGroup && 
									(formObject as RegularExpressionGroup).rdbmsInformationTarget != null) || 
								(formObject is DocumentDatabase &&
									(formObject as DocumentDatabase).rdbmsInformationTarget != null)
							)
						) {
					misc2Button.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".enumButton.label");
					misc2Button.addEventListener(MouseEvent.CLICK, enumButtonClickHandler);
					misc2Button.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
					if (formObject is ADDomain && (formObject as ADDomain).currentlyEnumerating)
					{
						misc2Button.enabled=false;
					}
					buttonGroup.addElement(misc2Button);
				}
				buttonGroup.addElement(cancelButton);
			}
			
			override public function populate(): void
			{
				deleteList = new ArrayCollection();
				
				windowTitle = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".title");
				
				populateClassMembers(formObject);
				
				populateEachFormItem();
				
				if (isEditable(formObject))
					populateButtons();
				
				super.populate();
			}
			
			protected function keyPressed(event:KeyboardEvent):void
			{
				if(event.charCode == 13)
					createButtonClickHandler(event);
			}
			
			protected function createButtonClickHandler(event:Event): void
			{
				var validationErrorArray:Array = Validator.validateAll(validators);
				if(validationErrorArray.length == 0)
				{	
					if (formObject is ADDomain)
					{
						(formObject as ADDomain).root = null; // to prevent sending whole tree
					} 
					else if (formObject is Rule)
					{
						FlexGlobals.topLevelApplication.ruleContainer.disableAddRule();
						FlexGlobals.topLevelApplication.ruleContainerDiscovery.disableAddRule();
					}
					
					if (formObject is AuthUser){
						reuser.isEmailValid(((formObject as AuthUser)).id, (formObject as AuthUser).email);
					}
					else
						re.persistChange(formObject, deleteList);
					cButton.enabled = false;
				}
			}
			
			protected function enumButtonClickHandler(event:Event): void
			{
				if (formObject is RegularExpressionGroup) 
				{
					redb.schedule((formObject as RegularExpressionGroup).rdbmsInformationTarget.id, formObject as RegularExpressionGroup);
				}
				else if (formObject is DocumentDatabase) 
				{
					redb.schedule((formObject as DocumentDatabase).rdbmsInformationTarget.id, formObject as DocumentDatabase);
				} 
				else if (formObject is ADDomain) 
				{
					read.schedule((formObject as ADDomain).id);
				}
			}
			
			protected function enumerateHandler(event:Event): void
			{	
				Alert.show(	LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".enum.message"),
							LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".enum.title"));
			}
			
			protected function testConnectionButtonClickHandler(event:Event): void
			{
				var validationErrorArray:Array = Validator.validateAll(validators);
				if(validationErrorArray.length == 0)
				{
					miscButton.enabled = false;
					if (formObject is RDBMSConnection) {
						redb.testConnection(formObject as RDBMSConnection);
					} else if (formObject is ADDomain) {
						read.testConnection(formObject as ADDomain);
					}
					else if (formObject is InventoryItem && (formObject as InventoryItem).item is RemoteStorage) {
						rers.testConnection((formObject.item) as RemoteStorage)
					}
				}
			}
			
			protected function testAndValidateButtonClickHandler(event:Event):void
			{
				var validationErrorArray:Array = Validator.validateAll(validators);
				var ws:WebServer = (formObject.item) as WebServer;
				if(validationErrorArray.length == 0)
				{
					rers.testWebServer((formObject.item) as WebServer);
					miscButton.enabled = false;
				}
			}
			
			protected function testConnectionHandler(event:ResultEvent): void
			{
				var eventResult:String = event.result as String;
				miscButton.enabled = true;
				if (eventResult == "OK")
				{
					cButton.enabled = true;
					misc2Button.enabled = true;
					Alert.show(	LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testConnection.ok.message"),
								LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testConnection.ok.title"));
				}
				else
				{
					cButton.enabled = false;
					misc2Button.enabled = false;
					Alert.show(	LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testConnection.failure.message")
						+ ":\n\n" + eventResult,
						LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".testConnection.failure.title"));
				}
			}
			
			protected function persistChangeHandler(event:ResultEvent): void
			{
				if (formObject is Rule)
				{
					FlexGlobals.topLevelApplication.ruleContainer.enableAddRule();
					FlexGlobals.topLevelApplication.ruleContainerDiscovery.enableAddRule();
				}
				
				var returnCode:String = event.result as String;
				if (returnCode == "ok")
				{
					FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
					InteractionUtil.closeCurrentPopup();
					FlexGlobals.topLevelApplication.refreshRespectively(formObject);
				}
				else if (returnCode.substring(0,6) == "error.")
				{
					Alert.show(	LangUtil.getString("messages", "generic.edit.create." + returnCode + ".message"),
						LangUtil.getString("messages", "generic.edit.create." + returnCode + ".title"));
					cButton.enabled = true;
				}
			}
			
			protected function isEmailValidHandler(event:ResultEvent):void
			{
				var isValid:Boolean = event.result as Boolean;
				if(isValid)
					re.persistChange(formObject, deleteList);
				else
				{
					Alert.show(	LangUtil.getString("messages", "generic.edit.authUser.emailFault.message"),
						LangUtil.getString("messages", "generic.edit.authUser.emailFault.title"));
					cButton.enabled = true;
				}
			}
			
			protected function itemClickHandler(event:ItemClickEvent):void
			{
				if((event.item.roleName == "ROLE_ADMIN" || event.item.roleName == "ROLE_SUPER_ADMIN") && event.index != -1)
				{
					inputLabelForEnterprise.includeInLayout = false;
					inputLabelForEnterprise.visible = false;
					inputLabelForEnterprise2.includeInLayout = false;
					inputLabelForEnterprise2.visible = false;
					inputLabelForClassifier.includeInLayout = false;
					inputLabelForClassifier.visible = false;
				}
				
				else if(event.item.roleName == "ROLE_AUDITOR")
				{	
					if(SessionUtil.isEnterprise() && event.index != -1)
					{
						inputLabelForEnterprise.includeInLayout = true;
						inputLabelForEnterprise.visible = true;
						inputLabelForEnterprise2.includeInLayout = true;
						inputLabelForEnterprise2.visible = true;
						inputLabelForClassifier.includeInLayout = false;
						inputLabelForClassifier.visible = false;
					}
					else
					{
						inputLabelForEnterprise.includeInLayout = false;
						inputLabelForEnterprise.visible = false;
						inputLabelForEnterprise2.includeInLayout = false;
						inputLabelForEnterprise2.visible = false;
					}
				}
				else if(event.item.roleName == "ROLE_CLASSIFIER")
				{
					if(SessionUtil.isEnterprise() && event.index != -1)
					{
						inputLabelForClassifier.includeInLayout = true;
						inputLabelForClassifier.visible = true;
						inputLabelForEnterprise.includeInLayout = false;
						inputLabelForEnterprise.visible = false;
						inputLabelForEnterprise2.includeInLayout = false;
						inputLabelForEnterprise2.visible = false;
					}
					else
					{
						inputLabelForClassifier.includeInLayout = false;
						inputLabelForClassifier.visible = false;
					}
				}
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="genericBRS" >
			<my:method name="persistChange" result="persistChangeHandler(event)"/>
		</my:remote>
		<my:remote id="reuser" destination="userBRS" >
			<my:method name="isEmailValid" result="isEmailValidHandler(event)"/>
		</my:remote>
		<my:remote id="read" destination="adDomainBRS" >
			<my:method name="testConnection" result="testConnectionHandler(event)"/>
			<my:method name="schedule" result="enumerateHandler(event)"/>
		</my:remote>
		<my:remote id="redb" destination="rdbmsConnectionBRS" >
			<my:method name="testConnection" result="testConnectionHandler(event)"/>
			<my:method name="schedule" result="enumerateHandler(event)"/>
		</my:remote>
		<my:remote id="rers" destination="remoteStorageBRS">
			<my:method name="testConnection" result="testConnectionHandler(event)"/>
			<my:method name="testWebServer" result="testConnectionHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
		</s:layout>
		<s:Group id="editForm" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"/>
			</s:layout>
		</s:Group>
		<s:Group id="buttonGroup" width="100%" height="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center" 
									paddingBottom="5" paddingTop="5"
									gap="5" />
			</s:layout>
		</s:Group>
	</s:Group>
	
</popup:GenericCRUDContainer>
