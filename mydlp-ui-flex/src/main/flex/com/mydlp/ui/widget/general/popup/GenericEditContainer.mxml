<?xml version="1.0" encoding="utf-8"?>
<popup:GenericCRUDContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:general="com.mydlp.ui.widget.general.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				xmlns:popup="com.mydlp.ui.widget.general.popup.*"
				>
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ADDomainItem;
			import com.mydlp.ui.domain.ADDomainItemGroup;
			import com.mydlp.ui.domain.ADDomainRoot;
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.AbstractNamedEntity;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InformationDescription;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.USBDevice;
			import com.mydlp.ui.util.ClassMember;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.widget.general.input.ADDomainEnumeratingProcessInput;
			import com.mydlp.ui.widget.general.input.AuthSecurityRolesInput;
			import com.mydlp.ui.widget.general.input.DataFormatInput;
			import com.mydlp.ui.widget.general.input.DocumentDatabaseFileEntryInput;
			import com.mydlp.ui.widget.general.input.InformationFeatureInput;
			import com.mydlp.ui.widget.general.input.IpAddressInput;
			import com.mydlp.ui.widget.general.input.MimeTypeInput;
			import com.mydlp.ui.widget.general.input.RegularExpressionGroupInput;
			
			import flash.utils.getQualifiedClassName;
			
			import flashx.textLayout.container.ISandboxSupport;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.controls.TextArea;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.validators.EmailValidator;
			import mx.validators.NumberValidator;
			import mx.validators.RegExpValidator;
			import mx.validators.Validator;
			
			import spark.components.Button;
			import spark.components.CheckBox;
			import spark.components.TextInput;
			
			protected var cButton:Button = new Button();
			protected var cancelButton:Button = new Button();
			protected var formItemOrder:ListCollectionView = new ArrayCollection();
			
			public var deleteList:ListCollectionView;
			
			protected var sourceLabelList:Array = new Array();
			protected var inputValidationObject:Object = new Object();
			
			protected var validators:Array = new Array();
			
			
			protected function cancelButtonClickHandler(event:Event):void
			{
				if(event is KeyboardEvent)
				{
					if((event as KeyboardEvent).charCode == 32 || (event as KeyboardEvent).charCode == 13)
						InteractionUtil.closeCurrentPopup();
				}
				else
					InteractionUtil.closeCurrentPopup();
			}
			
			protected function isEditable(obj:*): Boolean
			{
				if (obj is ADDomainItem)
					return false;
				return true;
			}
			
			public function populateClassMembers(targetObject:Object): void
			{
				var classMembers:Array = ReflectionUtil.getClassMembers(targetObject as Object);
				var index:Number = -1;
				
				for each (var classMember:ClassMember in classMembers)
				{
					var inputLabel:InputLabel = null;
					
					if (classMember.name == "category" && classMember.type == InventoryCategory)
					{
						if (targetObject.id == null || isNaN(targetObject.id) ) // means that this is a new object
							if (targetObject[classMember.name] != null)
								continue;
							else if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem == null)
								continue;
							else if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem is InventoryCategory)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.selectedItem;
							else if (FlexGlobals.topLevelApplication.inventoryTree.selectedItem is InventoryBase)
								targetObject[classMember.name] = FlexGlobals.topLevelApplication.inventoryTree.selectedItem.category;
						continue;
					}
					else if ( targetObject is USBDevice && classMember.name == "action")
					{
						targetObject[classMember.name] = "PASS"; // TODO: will be deleted after implementing edit dialog.
					}
					else if 
						(
							classMember.name == "id" ||
							classMember.name == "optimisticLockVersion" ||
							classMember.name == "nameKey" ||
							classMember.name == "icon" ||
							(classMember.name == "ruleItems" && classMember.type == ListCollectionView) ||
							classMember.name == "enabled" ||
							classMember.name == "priority" ||
							//todo refine password
							classMember.name == "password" ||
							classMember.name == "action" ||
							(classMember.name == "children" && classMember.type == ListCollectionView)||						
							(classMember.name == "coupledInventoryItem" && classMember.type == InventoryItem) ||
							(classMember.name == "coupledRuleItems" && classMember.type == ListCollectionView) ||
							(classMember.name == "informationType" && classMember.type == InformationType) ||
							(classMember.name == "editable" && classMember.type == Boolean) ||
							(classMember.name == "matcher" && classMember.type == Matcher) ||
							(classMember.name == "root" && classMember.type == ADDomainRoot) ||
							(classMember.name == "parent" && classMember.type == ADDomainItemGroup)
						)
					{
						continue;
					}
					else if (targetObject is InventoryItem && classMember.name == "item")
					{
						if (targetObject.item != null && targetObject.item is Item)
							(targetObject.item as Item).coupledInventoryItem = targetObject as InventoryItem;
						populateClassMembers(targetObject.item);
						continue;
					}
					else if (
							( classMember.name == "ipBase" || classMember.name == "ipMask" )
							&& classMember.type == Number)
					{
						var ipInput:IpAddressInput = new IpAddressInput();
						ipInput.numberValue = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ipInput, "numberValue");
						ipInput.width = InputLabel.HORIZONTAL_INPUT_WIDTH;
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(ipInput);
						
						if(classMember.name == "ipBase")
							index = 1;
						else
							index = 2;
						
						var regExpValidator:RegExpValidator = new RegExpValidator();
						regExpValidator.source = ipInput;
						regExpValidator.property = "text";
						regExpValidator.expression = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
						regExpValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
						regExpValidator.addEventListener(ValidationResultEvent.VALID, validInput);
						validators.push(regExpValidator);
					}
					else if (targetObject is InformationType && 
							classMember.name == "dataFormats" && 
							classMember.type == ListCollectionView)
					{
						var dfInput:DataFormatInput = new DataFormatInput();
						if (targetObject[classMember.name] == null)
							dfInput.dataFormats = new ArrayCollection();
						else
							dfInput.dataFormats = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, dfInput, "dataFormats");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(dfInput);
						index = 8;
					}
					
					else if(targetObject is DocumentDatabase &&
							classMember.name == "fileEntries" &&
							classMember.type == ListCollectionView)
					{
						var ddInput:DocumentDatabaseFileEntryInput = new DocumentDatabaseFileEntryInput();
						ddInput.deleteList = this.deleteList;
						if(targetObject[classMember.name] == null)
							ddInput.fileEntries = new ArrayCollection();
						else
							ddInput.fileEntries = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ddInput, "fileEntries");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(ddInput);
						index = 8;
					}
					
					else if (targetObject is RegularExpressionGroup &&
							classMember.name == "entries" &&
							classMember.type == ListCollectionView)
					{
						var regInput:RegularExpressionGroupInput = new RegularExpressionGroupInput();
						regInput.deleteList = this.deleteList;
						if(targetObject[classMember.name] == null)
							regInput.entries = new ArrayCollection();
						else
							regInput.entries = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, regInput, "entries");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(regInput);
						index = 8;
					}
					
					else if(targetObject is DataFormat &&
							classMember.name == "mimeTypes" &&
							classMember.type == ListCollectionView)
					{
						var mtInput:MimeTypeInput = new MimeTypeInput();
						mtInput.deleteList = this.deleteList;
						if (targetObject[classMember.name] == null)
							mtInput.mimeTypes = new ArrayCollection();
						else
							mtInput.mimeTypes = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, mtInput, "mimeTypes");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(mtInput);
						index = 8;
					}
					
					else if (targetObject is AuthUser && classMember.name == "roles" && classMember.type == ListCollectionView)
					{
						var srInput:AuthSecurityRolesInput = new AuthSecurityRolesInput();
						if (targetObject[classMember.name] == null)
							srInput.authSecurityRoles = new ArrayCollection();
						else
							srInput.authSecurityRoles = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, srInput, "authSecurityRoles");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(srInput);		
						index = 8;
					}
					
					else if (targetObject is InformationDescription &&
							classMember.name == "features" && 
							classMember.type == ListCollectionView)
					{
						var ifInput:InformationFeatureInput = new InformationFeatureInput();
						ifInput.deleteList = this.deleteList;
						if (targetObject[classMember.name] == null)
							ifInput.informationFeatures = new ArrayCollection();
						else
							ifInput.informationFeatures = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, ifInput, "informationFeatures");
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(ifInput);
						index = 9;
					}
					else if (targetObject is InformationType &&
							classMember.name == "informationDescription" && 
							classMember.type == InformationDescription)
					{
						if (targetObject[classMember.name] == null)
							targetObject[classMember.name] = new InformationDescription();
						
						populateClassMembers(targetObject[classMember.name]);
						continue;
					}
					else if (classMember.name == "currentlyEnumerating" && classMember.type == Boolean)
					{
						var addps:ADDomainEnumeratingProcessInput = new ADDomainEnumeratingProcessInput();
						addps.currentlyEnumerating = targetObject[classMember.name];
						inputLabel = new NoLabelInputLabel();
						inputLabel.addElement(addps);
						index = 9;
					}
					
					else if(classMember.type == Boolean)
					{
						var checkBox:CheckBox = new CheckBox();
						checkBox.selected = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, checkBox, "selected");
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(checkBox);
						index = 6;
					}
					
					else if ( 
							(targetObject is Rule && classMember.name == "description") ||
							(targetObject is USBDevice && classMember.name == "comment") 
						)
					{
						var textArea:TextArea = new TextArea();
						textArea.text = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, textArea, "text");
						textArea.width = InputLabel.VERTICAL_INPUT_WIDTH;
						textArea.height = 60;
						inputLabel = new VerticalInputLabel();
						inputLabel.addElement(textArea);
						index = 12;
					}
					else
					{
						var textInput:TextInput = new TextInput();
						if(targetObject is AbstractNamedEntity && classMember.name == "name")
							textInput.text = targetObject["label"];
						else
							textInput.text = targetObject[classMember.name];
						BindingUtils.bindProperty(targetObject, classMember.name, textInput, "text");
						textInput.width = InputLabel.HORIZONTAL_INPUT_WIDTH;
						textInput.editable = isEditable(targetObject);
						inputLabel = new HorizontalInputLabel();
						inputLabel.addElement(textInput);
						if(classMember.name == "name"){
							index = 0;
							var regExpValidator2:RegExpValidator = new RegExpValidator();
							regExpValidator2.source = textInput;
							regExpValidator2.property = "text";
							regExpValidator2.expression = "^[a-zA-Z0-9_/\.\ ]+$"
							regExpValidator2.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							regExpValidator2.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(regExpValidator2);
						}
						else if(classMember.name == "displayName"){
							index = 0;
						}
						else if(classMember.name == "domainName"){
							index = 0;
							var regExpValidator4:RegExpValidator = new RegExpValidator();
							regExpValidator4.source = textInput;
							regExpValidator4.property = "text";
							regExpValidator4.expression = "^([\\w\\.-]{1,255})$";
							regExpValidator4.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							regExpValidator4.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(regExpValidator4);
						}
						else if(classMember.name == "serverIp"){
							index = 1;
							var regExpValidator3:RegExpValidator = new RegExpValidator();
							regExpValidator3.source = textInput;
							regExpValidator3.property = "text";
							regExpValidator3.expression = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
							regExpValidator3.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							regExpValidator3.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(regExpValidator3);
						}
						else if(classMember.name == "loginPassword"){
							index = 3;
							textInput.displayAsPassword = true;
						}
						else if(classMember.name == "loginUsername") {
							index = 2;
							var regExpValidator5:RegExpValidator = new RegExpValidator();
							regExpValidator5.source = textInput;
							regExpValidator5.property = "text";
							regExpValidator5.expression = "^([\\w\\.-@]{1,255})$";
							regExpValidator5.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							regExpValidator5.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(regExpValidator5);
						}
						else if(classMember.name == "distinguishedName"){
							index = 1;
						}
						else if(classMember.name == "sAMAccountName"){
							index = 2;
						}
						else if(classMember.name == "userPrincipalName"){
							index = 3;
						}
						else if(classMember.name == "username"){
							index = 3;
						}
						else if(classMember.name == "deviceId"){
							index = 3;
						}
						else if(classMember.name == "uniqId"){
							index = 6;
						}
						else if(classMember.name == "email"){
							var emailValidator:EmailValidator = new EmailValidator();
							emailValidator.source = textInput;
							emailValidator.property = "text";
							emailValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							emailValidator.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(emailValidator);
						}
						else if(classMember.name == "password"){
							index = 5;
						}
						else if(classMember.name == "threshold"){
							if(isNaN(targetObject[classMember.name]))
								textInput.text = new String("1");
							index = 7;
							var numberValidator:NumberValidator = new NumberValidator();
							numberValidator.source = textInput;
							numberValidator.property = "text";
							numberValidator.domain = "int";
							numberValidator.minValue = "1";
							numberValidator.addEventListener(ValidationResultEvent.INVALID, invalidInput);
							numberValidator.addEventListener(ValidationResultEvent.VALID, validInput);
							validators.push(numberValidator);
						}
					}
					
					if (inputLabel != null)
					{
						inputLabel.label = LangUtil.getString("messages", "generic.edit." + getObjectName(targetObject) + "." + classMember.name + ".label");
						sourceLabelList.push(new InputLabelIndexTuple(index, inputLabel));
					}
				}
			}
			
			protected function validInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = true;
				for (var i:* in inputValidationObject)
					if(inputValidationObject[i] as Boolean == false) return;
				cButton.enabled = true;
			}
			
			protected function invalidInput(event:ValidationResultEvent):void
			{
				inputValidationObject[event.target.source.uid] = false;
				cButton.enabled = false;
			}
			
			public function populateEachFormItem():void
			{
				sourceLabelList.sortOn("order", Array.DESCENDING, Array.NUMERIC);
				for(var i:int = sourceLabelList.length-1; i >= 0; i--){
					var tempElement:InputLabelIndexTuple = sourceLabelList[i] as InputLabelIndexTuple;
					if(tempElement != null){
						var tempInputLabel:InputLabel = tempElement.vs;
						editForm.addElement(tempInputLabel);
					}
				}
			}
			public function populateButtons(): void
			{	
				cButton.label = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".createButton.label");
				cancelButton.label = LangUtil.getString("messages", "generic.edit.cancelButton.label");
				cButton.addEventListener(MouseEvent.CLICK, createButtonClickHandler);
				cButton.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
				cancelButton.addEventListener(MouseEvent.CLICK, cancelButtonClickHandler);
				cancelButton.addEventListener(KeyboardEvent.KEY_DOWN, cancelButtonClickHandler);
				buttonGroup.addElement(cButton);
				buttonGroup.addElement(cancelButton);
			}
				
			
			override public function populate(): void
			{
				deleteList = new ArrayCollection();
				
				windowTitle = LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".title");
				
				populateClassMembers(formObject);
				
				populateEachFormItem();
				
				if (isEditable(formObject))
					populateButtons();
				
				super.populate();
			}
			
			protected function keyPressed(event:KeyboardEvent):void
			{
				if(event.charCode == 13)
					createButtonClickHandler(event);
			}
			
			protected function createButtonClickHandler(event:Event): void
			{
				var validationErrorArray:Array = Validator.validateAll(validators);
				if(validationErrorArray.length == 0)
				{	
					re.save(formObject);
					cButton.enabled = false;
				}
			}
			
			protected function saveHandler(event:Event): void
			{
				//InteractionUtil.closeCurrentPopup();
				//Alert.show(	LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".ok.message"),
				//			LangUtil.getString("messages", "generic.edit." + getSimpleName() + ".title"));
				
				if (deleteList.length == 0)
				{
					InteractionUtil.closeCurrentPopup();
					FlexGlobals.topLevelApplication.refresh();
				}
				else
				{
					re.removeAll(deleteList);
				}
			}
			
			protected function removeAllHandler(event:Event): void
			{
				InteractionUtil.closeCurrentPopup();
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="genericBRS" >
			<my:method name="save" result="saveHandler(event)" />
			<my:method name="removeAll" result="removeAllHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
		</s:layout>
		<s:Group id="editForm" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"/>
			</s:layout>
		</s:Group>
		<s:Group id="buttonGroup" width="100%" height="100%">
			<s:layout>
				<s:HorizontalLayout gap="5" verticalAlign="middle" paddingBottom="5" paddingTop="5" paddingLeft="135"/>
			</s:layout>
		</s:Group>
	</s:Group>
	
</popup:GenericCRUDContainer>
