<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:my="http://www.mydlp.com/flex/my"
					xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
					>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.CustomAction;
			import com.mydlp.ui.domain.DiscoveryRule;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.RemoteStorage;
			import com.mydlp.ui.domain.RemoteStorageRule;
			import com.mydlp.ui.domain.RemovableStorageEncryptionRule;
			import com.mydlp.ui.domain.RemovableStorageInboundRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.ScreenshotRule;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			
			//[Bindable]
			//public var action:String = Rule.ACTION_PASS;
			
			public static function generateCustomActions(customActionsList:ListCollectionView): void
			{
				var newActionsList:ListCollectionView = new ArrayCollection();
				var newActionsListD:ListCollectionView = new ArrayCollection();
				newActionsList.addAll(actionsDefault);
				newActionsListD.addAll(actionsDiscovery);
				for each (var ca:CustomAction in customActionsList)
				{
					newActionsList.addItem(new ActionObject(Rule.ACTION_CUSTOM, ca));
					newActionsListD.addItem(new ActionObject(Rule.ACTION_CUSTOM, ca));
				}
				actionsCustom = newActionsList;
				actionsCustomDiscovery = newActionsListD;
				isCustomActionsInitialized = true;
			}

			[Bindable]
			public var ruleObject:Rule;
			
			protected static var actionsDefault:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_BLOCK),
						new ActionObject(Rule.ACTION_LOG),
						new ActionObject(Rule.ACTION_QUARANTINE),
						new ActionObject(Rule.ACTION_ARCHIVE)
					)
				);
			
			protected static var actionsDiscovery:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_BLOCK),
						new ActionObject(Rule.ACTION_LOG),
						new ActionObject(Rule.ACTION_QUARANTINE),
						new ActionObject(Rule.ACTION_ARCHIVE)
					)
				);
			
			protected static var actionsInbound:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_LOG),
						new ActionObject(Rule.ACTION_ARCHIVE)
					)
				);
			
			protected static var actionsEncrypt:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_ENCRYPT)
					)
				);
			
			protected static var actionsInboundC:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_LOG)
					)
				);
			
			protected static var actionsScreenshot:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_BLOCK)
					)
				);
			
			protected static var actionsRemoteStorage:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_LOG),
						new ActionObject(Rule.ACTION_ARCHIVE)
					)
				);
			
			[Bindable]
			protected static var actions:ListCollectionView = actionsDefault;
			
			[Bindable]
			protected static var actionsCustom:ListCollectionView = new ArrayCollection();
			
			public static var isCustomActionsInitialized:Boolean = false;
			
			[Bindable]
			protected static var actionsCustomDiscovery:ListCollectionView = new ArrayCollection();
			
			[Bindable]
			protected static var actionsCommunity:ListCollectionView = 
				new ArrayCollection(
					new Array(
						new ActionObject(Rule.ACTION_PASS),
						new ActionObject(Rule.ACTION_LOG),
						new ActionObject(Rule.ACTION_BLOCK)
					)
				);
			
			protected function actionListChangeHandler(event:IndexChangeEvent):void
			{
				var ao:ActionObject = actionList.selectedItem;
				
				if (ruleObject is DiscoveryRule && (
					ao.actionKey == Rule.ACTION_BLOCK ||
					ao.actionKey == Rule.ACTION_QUARANTINE ))
				{
					Alert.show(LangUtil.getString("messages", "rule.discovery.deleteaction.warning"),
						LangUtil.getString("messages", "rule.discovery.deleteaction.warning.title"));
				}
				
				re.changeRuleAction(ruleObject.id, ao.actionKey, ao.customAction);
			}
			
			protected function actionListItemRendererFunction(item:Object):ClassFactory {
				if (ruleObject is DiscoveryRule)
				{
					return new ClassFactory(DiscoveryActionListItemRenderer);	
				}
				else
				{
					return new ClassFactory(GenericActionListItemRenderer);
				}
			}
			
			protected function getRuleType(rule:Rule): String {
				var ruleType:String = "generic";
				if (rule is DiscoveryRule)
					ruleType = "discovery";
				return ruleType;
			}
			
			protected function actionLabelFunction(item:Object): String {
				if (item == null) return "";
				if (!item is ActionObject) return "";
				var ao:ActionObject = item as ActionObject;
				return getActionLabel(ao.actionKey, ao.customAction);
			}
			
			protected function getActionLabel(actionKey:String, customAction:CustomAction): String {
				if (actionKey == Rule.ACTION_CUSTOM)
				{
					return LangUtil.getString("messages","rule.action.customPrefix.label") + customAction.label;
				}
				else
				{
					return LangUtil.getString("messages","rule.action." + getRuleType(ruleObject) + "." + actionKey + ".label");
				}
			}
			
			protected function getComboBoxDataProvider(rule:Rule): ListCollectionView
			{
				if (SessionUtil.isEnterprise())
				{
					if (rule is DiscoveryRule)
						return actionsCustomDiscovery;
					else if (rule is RemoteStorageRule)
						return actionsRemoteStorage;
					else if (rule is MailRule)
						return actionsCustom;
					else if (rule is RemovableStorageInboundRule)
						return actionsInbound;
					else if (rule is RemovableStorageEncryptionRule)
						return actionsEncrypt;
					else if (rule is ScreenshotRule)
						return actionsScreenshot;
					else 
						return actions;
				}
				else
				{
					if (rule is RemovableStorageInboundRule)
						return actionsInboundC;
					else if (rule is ScreenshotRule)
						return actionsScreenshot;
					else if (rule is RemoteStorage)
						return actionsRemoteStorage;
					return actionsCommunity;
				}
			}
			
			protected function actionListCreationCompleteHandler(event:FlexEvent):void
			{
				actionList.selectedItem = getCurrentActionObject();
			}
			
			protected function getCurrentActionObject(): ActionObject
			{
				for each (var ao:ActionObject in getComboBoxDataProvider(ruleObject))
				{
					if (ruleObject.action == Rule.ACTION_CUSTOM)
					{
						if (ruleObject.customAction == null)
							throw new Error("customaction object can not be null for custom action key");
						if (ao.actionKey == Rule.ACTION_CUSTOM && 
							ao.customAction.id == ruleObject.customAction.id)
						return ao;
					}
					else 
					{
						if (ruleObject.action == ao.actionKey)
							return ao;
					}
				}
				return null;
			}
			
			protected function changeRuleActionHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.refreshRespectivelyRule(event.result as Rule);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="changeRuleAction" result="changeRuleActionHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:layout>
		<s:VerticalLayout horizontalAlign="left" verticalAlign="middle" />
	</s:layout>
	
	<!--
		should align using padding prop.
	-->
	<s:Group includeIn="normal, hovered" width="100%">
		<s:Spacer width="20" />
		<rule:ActionBoxElement ruleType="{getRuleType(ruleObject)}" 
							   action="{ruleObject.action}" customAction="{ruleObject.customAction}"/>
	</s:Group>
	
	<s:Group includeIn="selected" width="100%">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group width="100%">
			<s:layout>
				<s:HorizontalLayout />
			</s:layout>
			<s:Spacer width="13" />
			<s:DropDownList id="actionList" width="100%"
							contentBackgroundAlpha="1"
							dataProvider="{getComboBoxDataProvider(ruleObject)}" 
							change="actionListChangeHandler(event)" 
							labelFunction="actionLabelFunction"
							creationComplete="actionListCreationCompleteHandler(event)"
							/>
			<s:Spacer width="13" />
		</s:Group>
	</s:Group>
	
</s:SkinnableContainer>
