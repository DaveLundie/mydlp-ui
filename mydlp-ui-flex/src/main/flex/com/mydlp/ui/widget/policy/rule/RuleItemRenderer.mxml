<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true"
				width="100%" height="100%"
				click="onClickHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.RuleItemGroup;
			import com.mydlp.ui.widget.policy.inventory.InventoryItemToolTip;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			
			public override function set data(value:Object):void
			{
				if (value is RuleItem)
					super.data = value as RuleItem;
				else if (value is RuleItemGroup)
					super.data = value as RuleItemGroup;
				dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
			}
			
			protected function onClickHandler(event:MouseEvent):void
			{
				if(this.selected)//This item is also selected. Show this item in 'Inventory Tree'
				{
					if (this.data is RuleItem)
					{
						var ri:RuleItem = this.data as RuleItem;
						if(isDiscoveryTab)
							FlexGlobals.topLevelApplication.inventoryTreeDiscovery.myInventoryTree.displayItem(ri.item.coupledInventoryItem);
						else
							FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.displayItem(ri.item.coupledInventoryItem);
					}
					else if (this.data is RuleItemGroup)
					{
						var rig:RuleItemGroup = this.data as RuleItemGroup;
						if(isDiscoveryTab)
							FlexGlobals.topLevelApplication.inventoryTreeDiscovery.myInventoryTree.displayItem(rig.group);
						else
							FlexGlobals.topLevelApplication.inventoryTree.myInventoryTree.displayItem(rig.group);
					} 
				}
			}
			
			protected function onToolTipCreate(event:ToolTipEvent):void
			{
				if (data == null) return;
				if (!data is RuleItem) return; 
				var toolTip:InventoryItemToolTip = new InventoryItemToolTip();
				toolTip.detailsContainer.formObject = data.item;
				event.toolTip = toolTip;
			}
			
			protected function getLabel(item:*): String
			{
				if (item == null) return "";
				if (item is RuleItem)
				{
					return item.item.coupledInventoryItem.label;
				}
				if (item is RuleItemGroup)
				{
					return item.group.label;
				}
				throw new Error("unexpected type for renderer");
			}
			
			protected function getIcon(item:*): Class
			{
				if (item == null) return null;
				if (item is RuleItem)
				{
					return item.item.coupledInventoryItem.icon;
				}
				if (item is RuleItemGroup)
				{
					return item.group.icon;
				}
				throw new Error("unexpected type for renderer");
			}
			
			protected function deleteClickHandler(event:MouseEvent):void
			{
				if (data == null) return;
				if (data is RuleItem) (data as RuleItem).deleteRecord();
				else if (data is RuleItemGroup) (data as RuleItemGroup).deleteRecord();
				else data.deleteRecord();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Boolean id="isDiscoveryTab"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	
	<s:Group left="0" right="0" top="0" bottom="0"
			 minHeight="16"
			 toolTip="{data is RuleItem ? ' ' : ''}" 
			 toolTipCreate="onToolTipCreate(event)"
			 >
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"
					paddingLeft="4" paddingRight="4"/>
		</s:layout>
		<s:BitmapImage source="{getIcon(data)}" />
		<s:Label width="98%" 
				 text="{getLabel(data)}" />
	</s:Group>
	
	<s:HGroup left="0" right="0" top="0" bottom="0" includeIn="selected"
			  height="16"
			  verticalAlign="middle" horizontalAlign="right">
		<s:SkinnableContainer backgroundColor="0xCEDBEF" backgroundAlpha="1">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"
									horizontalAlign="right"
									paddingLeft="2" paddingRight="2"/>
			</s:layout>
			<s:Button styleName="removeButtonStyle" 
					  click="deleteClickHandler(event)" 
					  toolTip="@Resource(key='ruleItems.removeButton.tooltip.label', bundle='messages')"/>
		</s:SkinnableContainer>

	</s:HGroup>
	
	<s:Rect left="0" right="0" top="0" bottom="0"
			includeIn="hovered,selected">
		<s:fill>
			<s:SolidColor color="0x000000"
						  alpha="0.12" alpha.selected="0.18" />
		</s:fill>
	</s:Rect>
	
</s:ItemRenderer>
