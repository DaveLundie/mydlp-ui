<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:my="http://www.mydlp.com/flex/my"
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:domain="com.mydlp.ui.domain.*" 
		  xmlns:input="com.mydlp.ui.widget.general.input.*" 
		  width="{InputLabel.VERTICAL_INPUT_WIDTH}" 
		  creationComplete="onCreationComplete(event)">
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.RDBMSInformationTarget;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.widget.general.popup.InputLabel;
			
			import mx.collections.ListCollectionView;
			import mx.events.FlexEvent;

			[Bindable]
			public var informationTarget:RDBMSInformationTarget = null;
			
			public var deleteList:ListCollectionView = null;
			
			public function refresh(): void
			{
				label.text = getText(informationTarget);
			}
			
			protected function isNull(i:RDBMSInformationTarget) : Boolean
			{
				if (i == null || i.rdbmsConnection == null || i.tableName == null || i.columnName == null)
					return true;
				return false;
			}
			
			protected function getText(i:RDBMSInformationTarget): String 
			{
				if (isNull(i))
					return LangUtil.getString("messages","rdbmsInformationTarget.input.null.message");
				else
				{
					var strRet:String = LangUtil.getString("messages","rdbmsInformationTarget.input.configured.message") + "\n";
					strRet += i.rdbmsConnection.label + "-> ";
					if (i.schemaName != null && i.schemaName.length > 0)
						strRet += "[schema: " + i.schemaName + "] ";
					if (i.catalogName != null && i.catalogName.length > 0)
						strRet += "[category: " + i.catalogName + "] ";
					strRet += i.tableName + "-> ";
					strRet += i.columnName;
					return strRet;
				}
			}
			
			protected function configureClickHandler(event:MouseEvent):void
			{
				if (informationTarget == null)
					informationTarget = new RDBMSInformationTarget();
				var popup:RDBMSInformationTargetPopup = InteractionUtil.newPopup(RDBMSInformationTargetPopup)
					as RDBMSInformationTargetPopup;
				popup.informationTarget = informationTarget;
				popup.rdbmsInformationTargetInput = this;
				popup.populate();
			}
			
			protected function removeClickHandler(event:MouseEvent):void
			{
				deleteList.addItem(informationTarget);
				informationTarget = null;
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				if (isNull(informationTarget))
				{
					enableViewCheckbox.selected = false;
				}
				else
				{
					enableViewCheckbox.selected = true;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout gap="4" paddingBottom="8"/>
	</s:layout>
	
	<s:CheckBox id="enableViewCheckbox" width="100%" selected="false" 
				label="@Resource(bundle = 'messages', key = 'documentdatabase.rdbmsinformationtarget.enabled.checkbox.label')" />
	
	<s:HGroup verticalAlign="middle" 
			  includeInLayout="{enableViewCheckbox.selected}" visible="{enableViewCheckbox.selected}">
		<s:Label id="label" text="{getText(informationTarget)}" width="240"/>
		<s:Spacer width="10" />
		<s:Button label="@Resource(bundle = 'messages', key = 'rdbmsInformationTarget.input.configureButton.label')"
				  click="configureClickHandler(event)"/>
		<s:Button label="@Resource(bundle = 'messages', key = 'rdbmsInformationTarget.input.removeButton.label')"
				  click="removeClickHandler(event)" enabled="{informationTarget != null}"/>
	</s:HGroup>
	
</s:SkinnableContainer>
