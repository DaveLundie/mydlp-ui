<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:my="http://www.mydlp.com/flex/my"
			   xmlns:input="com.mydlp.ui.widget.general.input.*"
			   close="{close()}"
			   visible="false" width="475"
			   title="@Resource(bundle = 'messages', key = 'feature.matcher.title.label')"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.Argument;
			import com.mydlp.ui.domain.InformationFeature;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.MatcherArgument;
			import com.mydlp.ui.domain.NonCascadingArgument;
			import com.mydlp.ui.domain.RegularExpression;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SpecialCharacterUtil;
			
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ToolTipEvent;
			import mx.events.ValidationResultEvent;
			import mx.states.State;
			
			import spark.events.IndexChangeEvent;
			
			public var informationFeatureInput:InformationFeatureInput = null;
			
			[Bindable]
			public var informationFeatureObject:InformationFeature = null;
			
			protected var closePopup:Boolean;
			
			protected function close(): void
			{
				InteractionUtil.closePopup(this);
			}
			
			protected function addNewFeature(event:MouseEvent):void
			{
				if(featureThresholdInput != null)
				{
					var validationResult:ValidationResultEvent = thresholdValidator.validate();//Validation Before Saving
					if(validationResult.results != null) 
						return;
				}
				
				closePopup = true;
				
				var isEdit:Boolean = false;
				if (informationFeatureObject == null)
					informationFeatureObject = new InformationFeature();
				else 
					isEdit = true;
				
				var m:Matcher = informationFeatureObject.matcher;
				
				if (m != null &&
					m.functionName != null &&
					matcherCombobox.selectedItem != null &&
					(m.functionName != matcherCombobox.selectedItem.data) )  // if there is a matcher and it is changed 
				{
					informationFeatureInput.deleteList.addItem(m);
					m = null;
				}
				
				if (m == null)
				{
					m = new Matcher();
					informationFeatureObject.matcher = m;
				}
				
				m.functionName = matcherCombobox.selectedItem.data;
				
				if (matcherCombobox.selectedItem.data == "keyword" || matcherCombobox.selectedItem.data == "regex")
				{
					var r:RegularExpression = null;
					if (m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						r = new RegularExpression();
						var ma:MatcherArgument = new MatcherArgument();
						m.matcherArguments = new ArrayCollection();
						ma.coupledMatcher = m;
						ma.coupledArgument = r;
						m.matcherArguments.addItem(ma);
					}
					else
					{
						r = m.matcherArguments.getItemAt(0).coupledArgument as RegularExpression;
					}
					
					// TODO: there should be regex validation. escaping special characters.
					if(regexValue.text == "")
						closePopup = false;
					else
					{
						if(matcherCombobox.selectedItem.data == "keyword")
							r.regex = SpecialCharacterUtil.escapeSpecialCharacters(regexValue.text, SpecialCharacterUtil.regex);
						else
							r.regex = regexValue.text;
					}
				}
				else if(matcherCombobox.selectedItem.data == "document_hash" ||
						matcherCombobox.selectedItem.data == "document_pdm")
				{
					var nca:NonCascadingArgument = null;
					if(m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						nca = new NonCascadingArgument();
						var mar:MatcherArgument = new MatcherArgument();
						m.matcherArguments = new ArrayCollection();
						mar.coupledMatcher = m;
						mar.coupledArgument = nca;
						m.matcherArguments.addItem(mar);
					}
					else
					{
						nca = m.matcherArguments.getItemAt(0).coupledArgument as NonCascadingArgument;
					}
					if(documentDatabaseComboBox.selectedItem == null)
						closePopup = false;
					else
						nca.argument = documentDatabaseComboBox.selectedItem;
				}
				else if(matcherCombobox.selectedItem.data == "keyword_group")
				{
					var ncar:NonCascadingArgument = null;
					if(m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						var marg:MatcherArgument = new MatcherArgument();
						m.matcherArguments = new ArrayCollection();
						marg.coupledMatcher = m;
						marg.coupledArgument = new NonCascadingArgument();
						m.matcherArguments.addItem(marg);
					}
					
					ncar = m.matcherArguments.getItemAt(0).coupledArgument as NonCascadingArgument;
					
					ncar.argument = keywordGroupComboBox.selectedItem;
				}
				
				if (isAtState("threshold"))
				{
					informationFeatureObject.threshold = int(featureThreshold);
				}
				else
				{
					informationFeatureObject.threshold = 1;
				}
				
				if (!isEdit)
				{
					informationFeatureInput.addInformationFeature(informationFeatureObject);
				}
				
				informationFeatureInput.refreshDisplay();
				
				close();
			}
			
			public function populate():void
			{
				matcherDefinitions.refresh();
				
				if (informationFeatureObject != null)
				{
					for (var i:int; i < matcherDefinitions.length; i++)
					{
						var mdd:String = (matcherDefinitions.getItemAt(i) as MatcherDefinition).data;
						if ( mdd == informationFeatureObject.matcher.functionName )
						{
							matcherCombobox.selectedIndex = i;
							currentState = mdd;
							break;
						}
					}
					featureThreshold = informationFeatureObject.threshold.toString();
				}
				
				visible = true;
			}
			
			protected function getNCArgument(): Argument
			{
				if (informationFeatureObject != null && 
						informationFeatureObject.matcher != null &&
						informationFeatureObject.matcher.matcherArguments != null &&
						informationFeatureObject.matcher.matcherArguments.length > 0)
					return informationFeatureObject.matcher.matcherArguments.getItemAt(0).coupledArgument.argument;
				return null;
			}
			
			protected function getArgument(): Argument
			{
				
				if (informationFeatureObject != null && 
						informationFeatureObject.matcher != null &&
						informationFeatureObject.matcher.matcherArguments != null &&
						informationFeatureObject.matcher.matcherArguments.length > 0)
					return informationFeatureObject.matcher.matcherArguments.getItemAt(0).coupledArgument;
				return null;
			}
			
			protected function regexValueCreationCompleteHandler(event:FlexEvent):void
			{
				var r:RegularExpression = getArgument() as RegularExpression;
				if(r == null)
					regexValue.text = "";
				else
				{
					if(this.currentState == "keyword")
						regexValue.text = InformationFeature.removeEscapeCharacter(r.regex);
					else
						regexValue.text = r.regex;
				}
				refreshButtonState();
			}
			
			protected function onToolTipCreate(event:ToolTipEvent):void
			{
				if (isAtState("matcher"))
				{
					var iftt:InformationFeatureToolTip = new InformationFeatureToolTip();
					iftt.matcherName = currentState;
					iftt.argument = isAtState("argument");
					iftt.distance = isAtState("distance");
					iftt.threshold = isAtState("threshold");
					event.toolTip = iftt;
				}
			}
			
			protected function isAtState(stateName:String): Boolean
			{
				if (currentState == stateName)
					return true;
				
				for (var i:int = 0; i < states.length; i++)
				{
					var s:State = states[i];
					if (s.name == currentState)
					{
						for (var j:int = 0; j < s.stateGroups.length; j++)
						{
							var g:String = s.stateGroups[j];
							if (g == stateName)
								return true;
						}
						break;
					}
				}
				
				return false;
			}
			
			protected function getNPArgument(): *
			{
				if (currentState == "regex")
				{
					return regexValue.text;
				}
				else if (currentState == "keyword")
				{
					return SpecialCharacterUtil.escapeSpecialCharacters(regexValue.text, SpecialCharacterUtil.regex);
				}
				else if (currentState == "document_hash" || currentState == "document_pdm")
				{
					return documentDatabaseComboBox.selectedItem;
				}
				else if (currentState == "keyword_group")
				{
					return keywordGroupComboBox.selectedItem;
				}
				else
				{
					return null;
				}
			}
			
			protected function refreshButtonState(): void
			{
				if (informationFeatureObject != null && informationFeatureInput.isExclusive())
				{
					saveButton.enabled = true;
				}
				else 
				{
					var id:Number = Number.NaN;
					if (informationFeatureObject != null)
						id = informationFeatureObject.id;
					
					var arg:* = getNPArgument();
					
					var ret:String = informationFeatureInput.validateAddFor(matcherCombobox.selectedItem.data, id, arg);
					if (ret == "ok")
					{
						saveButton.enabled = true;
					}
					else
					{
						saveButton.enabled = false;
						msgLabel.text = LangUtil.getString("messages", "informationFeature.popup.add." + ret + ".message");
					}
				}
			}
			
			protected function matcherComboboxChangeHandler(event:IndexChangeEvent): void
			{
				refreshButtonState();
				currentState = (matcherCombobox.selectedItem == null ? 'normal' : matcherCombobox.selectedItem.data);
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:ArrayCollection id="matcherDefinitions" sort="{labelSort}">
			<input:MatcherDefinition data="all" />
			<input:MatcherDefinition data="cc" />
			<input:MatcherDefinition data="ssn" />
			<input:MatcherDefinition data="iban" />
			<input:MatcherDefinition data="aba" />
			<input:MatcherDefinition data="trid" />
			<input:MatcherDefinition data="canada_sin" />
			<input:MatcherDefinition data="france_insee" />
			<input:MatcherDefinition data="uk_nino" />
			<input:MatcherDefinition data="said" />
			<input:MatcherDefinition data="keyword" />
			<input:MatcherDefinition data="regex" />
			<input:MatcherDefinition data="scode" />
			<input:MatcherDefinition data="scode_ada" />
			<input:MatcherDefinition data="keyword_group" />
			<input:MatcherDefinition data="document_hash" />
			<input:MatcherDefinition data="document_pdm" />
			<input:MatcherDefinition data="encrypted_file" />
			<input:MatcherDefinition data="encrypted_archive" />
			<input:MatcherDefinition data="pan"/>
			<input:MatcherDefinition data="cpf"/>
			<input:MatcherDefinition data="china_icn"/>
			<input:MatcherDefinition data="cc_edate"/>
			<input:MatcherDefinition data="birthdate"/>
			<input:MatcherDefinition data="gdate"/>
		</s:ArrayCollection>
		
		<s:Sort id="labelSort">
			<s:SortField name="label" numeric="false"/>
		</s:Sort>
		
		
		<s:NumberValidator id="thresholdValidator"
						   source="{featureThresholdInput}"
						   property="text"
						   minValue="1"
						   valid="{saveButton.enabled = true}"
						   invalid="{saveButton.enabled = false}"/>
		
		<my:remote id="re" destination="documentDatabaseBRS">
			<my:method name="getDocumentDatabases" result="{
					   documentDatabaseComboBox.dataProvider = event.result as ListCollectionView;
					   documentDatabaseComboBox.selectedItem = getNCArgument();
					   refreshButtonState();
					   }"/>
		</my:remote>
		
		<my:remote id="rek" destination="regularExpressionGroupBRS">
			<my:method name="getRegularExpressions" result="{
					   keywordGroupComboBox.dataProvider = event.result as ListCollectionView;
					   keywordGroupComboBox.selectedItem = getNCArgument();
					   refreshButtonState();
					   }"/>
		</my:remote>
		
		<fx:String id="featureThreshold" />
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="all" stateGroups="matcher,nodistance,nothreshold,noargument"/>
		<s:State name="cc" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="ssn" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="iban" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="aba" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="trid" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="canada_sin" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="france_insee" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="uk_nino" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="said" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="pan" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="cpf" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="china_icn" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="cc_edate" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="birthdate" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="gdate" stateGroups="matcher,distance,threshold,noargument"/>
		<s:State name="keyword" stateGroups="matcher,distance,threshold,argument"/>
		<s:State name="keyword_group" stateGroups="matcher,distance,threshold,argument"/>
		<s:State name="regex" stateGroups="matcher,distance,threshold,argument"/>
		<s:State name="scode" stateGroups="matcher,nodistance,threshold,noargument"/>
		<s:State name="scode_ada" stateGroups="matcher,nodistance,threshold,noargument"/>
		<s:State name="document_hash" stateGroups="matcher,nodistance,nothreshold,argument"/>
		<s:State name="document_pdm" stateGroups="matcher,nodistance,threshold,argument"/>
		<s:State name="encrypted_file" stateGroups="matcher,nodistance,nothreshold,noargument"/>
		<s:State name="encrypted_archive" stateGroups="matcher,nodistance,nothreshold,noargument"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="5"
						  paddingLeft="8" paddingRight="2"
						  paddingTop="5" paddingBottom="5"/>
	</s:layout>
	<s:Form width="400">
		<s:FormItem label="@Resource(bundle = 'messages', key = 'matcher.combobox.label')" >
			<s:Group>
				<s:layout>
					<s:HorizontalLayout gap="10"/>
				</s:layout>
				<s:ComboBox id="matcherCombobox" dataProvider="{matcherDefinitions}" width="250"
							change="matcherComboboxChangeHandler(event)"
							creationComplete="{currentState = (matcherCombobox.selectedItem == null ? 'normal' : matcherCombobox.selectedItem.data)}"
							/>
				<s:VGroup includeIn="matcher" height="100%" verticalAlign="middle"
						  toolTip="{matcherCombobox.selectedItem != null ? ' ': null}" 
						  toolTipCreate="onToolTipCreate(event)">
					<s:Image source="@Embed('/assets/icons/16x16/help.png')" />
				</s:VGroup>
			</s:Group>
		</s:FormItem>
		<s:FormItem label="@Resource(bundle = 'messages', key = 'matcher.threshold.label')" 
					includeIn="threshold">
			<s:TextInput id="featureThresholdInput" text="@{featureThreshold}"/>
		</s:FormItem>
		<s:FormItem includeIn="keyword,regex" 
					label.keyword="@Resource(bundle = 'messages', key = 'matcher.keyword.keywordValue.label')"
					label.regex="@Resource(bundle = 'messages', key = 'matcher.regex.regexValue.label')">
			<s:TextInput id="regexValue" creationComplete="regexValueCreationCompleteHandler(event)" change="{refreshButtonState();}"/>
		</s:FormItem>
		<s:FormItem includeIn="document_hash,document_pdm" label="@Resource(bundle = 'messages', key = 'matcher.documentDatabase.label')">
			<s:ComboBox id="documentDatabaseComboBox" labelField="label" width="100%"
						creationComplete="{re.getDocumentDatabases()}" change="{refreshButtonState();}"/>
		</s:FormItem>
		<s:FormItem includeIn="keyword_group" label="@Resource(bundle = 'messages', key = 'matcher.keywordGroup.label')">
			<s:ComboBox id="keywordGroupComboBox" labelField="label" width="100%"
						creationComplete="{rek.getRegularExpressions()}" change="refreshButtonState();"/>
		</s:FormItem>
	</s:Form>			
	
	<s:VGroup width="100%" gap="5" horizontalAlign="center" paddingBottom="10" paddingTop="5">
		<s:HGroup width="100%" paddingLeft="5" paddingRight="5" gap="5" verticalAlign="middle" horizontalAlign="left"
				  includeInLayout="{!saveButton.enabled}" visible="{!saveButton.enabled}">
			<s:BitmapImage source="@Embed('/assets/icons/16x16/warning.png')" width="16" height="16"/>
			<s:Label id="msgLabel" width="100%" text=""/>
		</s:HGroup> 
		<s:Group>
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle" gap="10"/>
			</s:layout>
			<s:Button id="saveButton" label="@Resource(bundle = 'messages', key = 'matcher.button.save.label')" click="addNewFeature(event)"/>
			<s:Button label="@Resource(bundle = 'messages', key = 'matcher.button.cancel.label')" click="{close()}"/>
		</s:Group>
	</s:VGroup>
	
</s:TitleWindow>
