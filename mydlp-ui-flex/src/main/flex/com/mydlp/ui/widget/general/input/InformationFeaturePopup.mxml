<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:my="http://www.mydlp.com/flex/my"
			   xmlns:input="com.mydlp.ui.widget.general.input.*"
			   close="{close()}"
			   visible="false"
			   title="@Resource(bundle = 'messages', key = 'feature.matcher.title.label')"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InformationFeature;
			import com.mydlp.ui.domain.Matcher;
			import com.mydlp.ui.domain.MatcherArgument;
			import com.mydlp.ui.domain.NonCascadingArgument;
			import com.mydlp.ui.domain.RegularExpression;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.util.InteractionUtil;
			
			import mx.collections.ListCollectionView;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			
			public var informationFeatureInput:InformationFeatureInput = null;
			
			[Bindable]
			public var informationFeatureObject:InformationFeature = null;
			
			protected function close(): void
			{
				InteractionUtil.closePopup(this);
			}
			
			protected function addNewFeature(event:MouseEvent):void
			{
				var isEdit:Boolean = false;
				if (informationFeatureObject == null)
					informationFeatureObject = new InformationFeature();
				else 
					isEdit = true;
				
				var m:Matcher = null;
				if (informationFeatureObject.matcher == null)
				{
					m = new Matcher();
					informationFeatureObject.matcher = m;
				}
				else
				{
					m = informationFeatureObject.matcher;
				}
				
				
				if (matcherCombobox.selectedItem.data == "keyword")
				{
					m.functionName = "keyword";
					var r:RegularExpression = null;
					if (m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						r = new RegularExpression();
						var ma:MatcherArgument = new MatcherArgument;
						m.matcherArguments = new ArrayCollection();
						ma.coupledMatcher = m;
						ma.coupledArgument = r;
						m.matcherArguments.addItem(ma);
					}
					else
					{
						r = m.matcherArguments.getItemAt(0).coupledArgument as RegularExpression;
					}
					
					// TODO: there should be regex validation. escaping special characters.
					r.regex = keywordValue.text;
				}
				else if(matcherCombobox.selectedItem.data == "document_database")
				{
					m.functionName = "document_database";
					var nca:NonCascadingArgument = null;
					if(m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						nca = new NonCascadingArgument;
						var mar:MatcherArgument = new MatcherArgument;
						m.matcherArguments = new ArrayCollection();
						mar.coupledMatcher = m;
						mar.coupledArgument = nca;
						m.matcherArguments.addItem(mar);
					}
					else
					{
						nca = m.matcherArguments.getItemAt(0).coupledArgument as NonCascadingArgument;
					}
					nca.argument = documentDatabaseComboBox.selectedItem;
				}
				else if(matcherCombobox.selectedItem.data == "keyword_group")
				{
					m.functionName = "keyword_group";
					var ncar:NonCascadingArgument = null;
					if(m.matcherArguments == null || m.matcherArguments.length == 0)
					{
						ncar = new NonCascadingArgument;
						var marg:MatcherArgument = new MatcherArgument;
						m.matcherArguments = new ArrayCollection();
						marg.coupledMatcher = m;
						marg.coupledArgument = ncar;
						m.matcherArguments.addItem(marg);
					}
					else
					{
						ncar = m.matcherArguments.getItemAt(0).coupledArgument as NonCascadingArgument;
					}
					ncar.argument = keywordGroupComboBox.selectedItem;
				}
				else
				{
					m.functionName = matcherCombobox.selectedItem.data ;
				}
				
				informationFeatureObject.weight = int(featureWeight.text);
				
				if (!isEdit)
					informationFeatureInput.addInformationFeature(informationFeatureObject);
				
				close();
			}
			
			public function populate():void
			{
				if (informationFeatureObject != null)
				{
					featureWeight.text = informationFeatureObject.weight.toString();
					
					for (var i:int; i < matcherDefinitions.length; i++)
					{
						if ( (matcherDefinitions.getItemAt(i) as MatcherDefinition).data == informationFeatureObject.matcher.functionName )
						{
							matcherCombobox.selectedIndex = i;
							break;
						}
					}
				}
				
				visible = true;
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<s:ArrayCollection id="matcherDefinitions">
			<input:MatcherDefinition data="cc" />
			<input:MatcherDefinition data="ssn" />
			<input:MatcherDefinition data="iban" />
			<input:MatcherDefinition data="trid" />
			<input:MatcherDefinition data="canada_sin" />
			<input:MatcherDefinition data="france_insee" />
			<input:MatcherDefinition data="uk_nino" />
			<input:MatcherDefinition data="keyword" />
			<input:MatcherDefinition data="scode" />
			<input:MatcherDefinition data="scode_ada" />
			<input:MatcherDefinition data="all" />
			<input:MatcherDefinition data="keyword_group" />
			<input:MatcherDefinition data="document_database" />
		</s:ArrayCollection>
		
		<s:NumberValidator source="{featureWeight}"
						   property="text"
						   minValue="1"
						   valid="{saveButton.enabled = true}"
						   invalid="{saveButton.enabled = false}"/>
		<my:remote id="re" destination="documentDatabaseBRS">
			<my:method name="getDocumentDatabases" result="{documentDatabaseComboBox.dataProvider = event.result as ListCollectionView}"/>
		</my:remote>
		
		<my:remote id="rek" destination="regularExpressionGroupBRS">
			<my:method name="getRegularExpressions" result="{keywordGroupComboBox.dataProvider = event.result as ListCollectionView}"/>
		</my:remote>
		
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="cc" />
		<s:State name="ssn" />
		<s:State name="iban" />
		<s:State name="trid" />
		<s:State name="canada_sin" />
		<s:State name="france_insee" />
		<s:State name="uk_nino" />
		<s:State name="keyword" />
		<s:State name="scode" />
		<s:State name="scode_ada" />
		<s:State name="keyword_group"/>
		<s:State name="document_database"/>
		<s:State name="all" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" gap="5"
						  paddingLeft="8" paddingRight="2"
						  paddingTop="5" paddingBottom="5"/>
	</s:layout>
	<s:Form width="400">
		<s:FormItem label="@Resource(bundle = 'messages', key = 'matcher.combobox.label')" >
			<s:ComboBox id="matcherCombobox" dataProvider="{matcherDefinitions}" width="100%"
						change="{currentState = (matcherCombobox.selectedItem == null ? 'normal' : matcherCombobox.selectedItem.data)}"
						creationComplete="{currentState = (matcherCombobox.selectedItem == null ? 'normal' : matcherCombobox.selectedItem.data)}"
						/>
		</s:FormItem>
		<s:FormItem label="@Resource(bundle = 'messages', key = 'matcher.weight.label')" >
			<s:TextInput id="featureWeight"/>
		</s:FormItem>
		<s:FormItem includeIn="keyword" label="@Resource(bundle = 'messages', key = 'matcher.keyword.keywordValue.label')" >
			<s:TextInput id="keywordValue" creationComplete="{
						 if (informationFeatureObject != null)
						 	keywordValue.text = informationFeatureObject.matcher.matcherArguments.getItemAt(0).coupledArgument.regex;
						 }"/>
		</s:FormItem>
		<s:FormItem includeIn="document_database" label="@Resource(bundle = 'messages', key = 'matcher.documentDatabase.label')">
			<s:ComboBox id="documentDatabaseComboBox" labelField="label" width="100%"
						selectedItem="{informationFeatureObject.matcher.matcherArguments.getItemAt(0).coupledArgument.argument}"
						creationComplete="{re.getDocumentDatabases()}"/>
		</s:FormItem>
		<s:FormItem includeIn="keyword_group" label="@Resource(bundle = 'messages', key = 'matcher.keywordGroup.label')">
			<s:ComboBox id="keywordGroupComboBox" labelField="label" width="100%"
						selectedItem="{informationFeatureObject.matcher.matcherArguments.getItemAt(0).coupledArgument.argument}"
						creationComplete="{rek.getRegularExpressions()}"/>
		</s:FormItem>
	</s:Form>			
	
	<s:Group>
		<s:layout>
			<s:HorizontalLayout horizontalAlign="right" verticalAlign="middle" gap="10"/>
		</s:layout>
		<s:Button id="saveButton" label="@Resource(bundle = 'messages', key = 'matcher.button.save.label')" click="addNewFeature(event)"/>
		<s:Button label="@Resource(bundle = 'messages', key = 'matcher.button.cancel.label')" click="{close()}"/>
	</s:Group>
</s:TitleWindow>
