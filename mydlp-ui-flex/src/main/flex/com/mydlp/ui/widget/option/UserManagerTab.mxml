<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:my="http://www.mydlp.com/flex/my"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			protected var userDP:ListCollectionView = new ArrayCollection();
			
			public function refreshUsers():void
			{
				userList.invalidateDisplayList();
				userDP.removeAll();
				re.getUsers();
				editUser.enabled = false;
				deleteUser.enabled = false;
				setPassword.enabled = false;
			}
			
			protected function hasSuperAdminRole(user:AuthUser):Boolean
			{
				if(user.role == null)
					return false;
				if(user.role.roleName == AuthSecurityRole.ROLE_SUPER_ADMIN)
					return true;
				
				return false;
			}
			
			protected function getUsersHandler(event:ResultEvent):void
			{
				var users:ArrayCollection = event.result as ArrayCollection;
				for each(var user:* in users)
					userDP.addItem(user);
				userList.validateNow();
			}
			
			protected function onCreationComplete(event:Event):void
			{
				refreshUsers();
			}
			
			protected function deleteClick(event:MouseEvent):void
			{
				if(!FlexGlobals.topLevelApplication.isSameUserWithLoginUser(userList.selectedItem as AuthUser))
					InteractionUtil.newDeleteDialog(userList.selectedItem);
				editUser.enabled = false;
				deleteUser.enabled = false;
				setPassword.enabled = false;
			}
			
			protected function editClick(event:MouseEvent):void
			{
				InteractionUtil.newEditDialog(userList.selectedItem);
				editUser.enabled = false;
				deleteUser.enabled = false;
				setPassword.enabled = false;
			}
			
			protected function setPasswordClick(event:MouseEvent):void
			{
				var popup:UserSetPasswordPopup = InteractionUtil.newPopup(UserSetPasswordPopup) as UserSetPasswordPopup;
				popup.authUser = userList.selectedItem as AuthUser;
				popup.visible = true;
				editUser.enabled = false;
				deleteUser.enabled = false;
				setPassword.enabled = false;
			}
			
			protected function isButtonEnabled():Boolean
			{
				return true;
			}
			
			protected function isUserHasPrivilege(targetUser:AuthUser):Boolean
			{
				var currentUser:AuthUser = FlexGlobals.topLevelApplication.user as AuthUser;
				
				if(targetUser.role != null && 
					targetUser.role.roleName == AuthSecurityRole.ROLE_SUPER_ADMIN && 
					!currentUser.hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN))
					return false;
				else return true;
			}
			
			protected function onClickDataGrid(event:MouseEvent):void
			{
				var targetUser:AuthUser = userList.selectedItem as AuthUser;
				if(targetUser != null)
				{
					if(FlexGlobals.topLevelApplication.isSameUserWithLoginUser(targetUser))
						deleteUser.enabled = false;
					else
						deleteUser.enabled = true;
					if(!isUserHasPrivilege(targetUser))
					{
						editUser.enabled = false;
						setPassword.enabled = false;
						deleteUser.enabled = false;
					}
					else
					{
						editUser.enabled = true;
						setPassword.enabled = true;
					}
				}
				else
				{
					deleteUser.enabled = false;
					editUser.enabled = false;
					setPassword.enabled = false;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="re" destination="userBRS">
			<my:method name="getUsers" result="getUsersHandler(event)" />
		</my:remote>
	</fx:Declarations>
	<s:VGroup paddingTop="25" paddingLeft="25" paddingRight="25" paddingBottom="25" horizontalAlign="right" gap="5">			
		<s:DataGrid id="userList" width="1100" height="450" dataProvider="{userDP}" 
					 click="onClickDataGrid(event)">
			<s:columns>
				<s:ArrayList>					
					<s:GridColumn dataField="username" headerText="{LangUtil.getString('messages', 'options.user.username')}"/>
					<s:GridColumn dataField="email" headerText="{LangUtil.getString('messages', 'options.user.email')}"/>
					<s:GridColumn dataField="isActive" headerText="{LangUtil.getString('messages', 'options.user.isActive')}" 
								  itemRenderer="com.mydlp.ui.widget.option.GridItemCheckBoxRenderer" />
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<s:Group >
			
			<s:layout>
				<s:HorizontalLayout gap="5"/>
			</s:layout>
			
			<s:Button id="deleteUser" label = "Delete User" skinClass="com.mydlp.ui.skin.RemoveBitmapLabelButton16Skin"
					  click="deleteClick(event)" enabled="false"
					  height="19"/>
			<s:Button id="editUser" label="Edit User" skinClass="com.mydlp.ui.skin.EditBitmapLabelButton16Skin"
					  click="editClick(event)" enabled="false"
					  height="19"/>
			<s:Button id="newUser" label="New User" skinClass="com.mydlp.ui.skin.AddBitmapLabelButton16Skin"
					  click="{InteractionUtil.newEditDialog(new AuthUser())}"
					  height="19"/>
			<s:Button id="setPassword" label="Set Password" skinClass="com.mydlp.ui.skin.PasswordBitmapLabelButton16Skin"
					  click="setPasswordClick(event)" enabled="false"
					  height="19"/>
		</s:Group>
	</s:VGroup>
</s:Group>
