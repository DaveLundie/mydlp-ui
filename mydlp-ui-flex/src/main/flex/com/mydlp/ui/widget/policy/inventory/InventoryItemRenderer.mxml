<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  height="100%">
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.widget.general.popup.NewInventoryItemDialog;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			
			public static const USERDEFINED_NAMEKEY:String = "inventory.userDefined";
			
			
			public static function isAddEnabled(i:*): Boolean
			{
				if (i == null)
					return false;
				if (i is InventoryCategory) {
					var category:InventoryCategory = i as InventoryCategory;
					if (category.nameKey != null && category.nameKey == USERDEFINED_NAMEKEY)
						return true;
					return category.editable;
				}
				return false;
			}
			
			public static function isEditEnabled(i:*): Boolean
			{
				if (i == null)
					return false;
				if (i is InventoryCategory)
					return (i as InventoryCategory).editable;
				if (i is InventoryItem)
				{
					var c:InventoryCategory = (i as InventoryItem).category;
					if (c == null)
						return true;
					if (c.nameKey != null && c.nameKey == USERDEFINED_NAMEKEY)
						return true;
					return c.editable;
				}
				return false;
			}
			
			protected function onToolTipCreate(event:ToolTipEvent):void
			{
				var toolTip:InventoryItemToolTip = new InventoryItemToolTip();
				toolTip.detailsContainer.formObject = treeListData.item;
				event.toolTip = toolTip;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" 
			  verticalAlign="middle" 
			  paddingTop="2" paddingBottom="2">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:HGroup toolTip="{treeListData.item is InventoryItem ? ' ': null}" 
				  toolTipCreate="onToolTipCreate(event)" width="100%">
			<s:BitmapImage source="{treeListData.icon}" />
			<s:Label id="labelField" text="{treeListData.label}" paddingTop="2" width="100%"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:HGroup includeIn="selected" left="0" right="0" top="0" bottom="0"
			  horizontalAlign="right" verticalAlign="middle">
		<s:SkinnableContainer backgroundAlpha="1" backgroundColor="0xA8C6EE">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right"
									verticalAlign="middle"
									paddingLeft="2" paddingRight="2"
									gap="1"/>
			</s:layout>
			
			<s:Button styleName="addButtonStyle"
					  click="{
					  InteractionUtil.newPopup(NewInventoryItemDialog);
					  event.stopPropagation();
					  }"
					  includeInLayout="{isAddEnabled(treeListData.item)}"
					  visible="{isAddEnabled(treeListData.item)}"/>
			<s:Button styleName="copyButtonStyle"
					  click="{
					  InteractionUtil.newEditDialog(ReflectionUtil.cloneDomainObject(treeListData.item));
					  event.stopPropagation();
					  }"
					  includeInLayout="{treeListData.item is InventoryItem}"
					  visible="{treeListData.item is InventoryItem}" 
					  toolTip="@Resource(key='inventoryItem.copyButton.tooltip.label', bundle='messages')"/>
			<s:Button styleName="editButtonStyle" 
					  click="{
					  InteractionUtil.newEditDialog(treeListData.item);
					  event.stopPropagation();
					  }" 
					  includeInLayout="{isEditEnabled(treeListData.item)}"
					  visible="{isEditEnabled(treeListData.item)}" 
					  toolTip="@Resource(key='inventoryItem.editButton.tooltip.label', bundle='messages')"/>
			<s:Button styleName="removeButtonStyle" 
					  click="{InteractionUtil.newDeleteDialog(treeListData.item);
					  event.stopPropagation();}"
					  includeInLayout="{isEditEnabled(treeListData.item)}"
					  visible="{isEditEnabled(treeListData.item)}" 
					  toolTip="@Resource(key='inventoryItem.removeButton.tooltip.label', bundle='messages')"/>
		</s:SkinnableContainer>
	</s:HGroup>
	
</s:MXTreeItemRenderer>
