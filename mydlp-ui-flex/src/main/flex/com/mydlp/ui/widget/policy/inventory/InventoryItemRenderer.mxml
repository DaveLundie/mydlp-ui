<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  height="100%">
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.mydlp.ui.domain.ApplicationName;
			import com.mydlp.ui.domain.Domain;
			import com.mydlp.ui.domain.FileSystemDirectory;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryGroup;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.RemoteStorage;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.general.popup.NewInventoryItemDialog;
			import com.mydlp.ui.widget.policy.rule.RuleBoxRenderer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			
			public static const USERDEFINED_NAMEKEY:String = "inventory.userDefined";
			
			public static function isCloneEnabled(i:*): Boolean
			{
				if (i == null)
				{
					return false;
				}
				
				if (! (i is InventoryItem))
				{
					return false;
				}
				
				var ii:InventoryItem = (i as InventoryItem);
				if (ii == null)
				{
					return false;
				}
				
				if (ii.item == null)
				{
					return false;
				}
				
				if (	ii.nameKey == RuleBoxRenderer.APPLICATION_ALL ||
						ii.nameKey == RuleBoxRenderer.DESTINATION_HASBCC ||
						ii.nameKey == RuleBoxRenderer.DIRECTORY_ALL ||
						ii.nameKey == RuleBoxRenderer.DOMAIN_ALL ||
						ii.nameKey == RuleBoxRenderer.ITYPE_ALL ||
						ii.nameKey == RuleBoxRenderer.SOURCES_ALL
					)
				{
					return false;
				}
				if (!SessionUtil.isEnterprise()) {
					if (	ii.item is Domain ||
							ii.item is FileSystemDirectory ||
							ii.item is RemoteStorage ||
							ii.item is ApplicationName
						) 
					{
						return false;
					}
				}
				
				return true;
			}
			
			public static function isAddEnabled(i:*): Boolean
			{
				if (i == null)
					return false;
				if (i is InventoryCategory) {
					var category:InventoryCategory = i as InventoryCategory;
					if (category.nameKey != null && category.nameKey == USERDEFINED_NAMEKEY)
						return true;
					return category.editable;
				} 
				if (i is InventoryGroup)
				{
					return isAddEnabled((i as InventoryGroup).category);
				}
				return false;
			}
			
			public static function isEditEnabled(i:*): Boolean
			{
				if (i == null)
					return false;
				if (i is InventoryCategory)
					return (i as InventoryCategory).editable;
				
				var c:InventoryCategory = null;
				
				if (i is InventoryItem)
				{
					if ((i as InventoryItem).group != null)
					{
						return isEditEnabled((i as InventoryItem).group);
					}
					c = (i as InventoryItem).category;
				}
				if (i is InventoryGroup)
				{
					c = (i as InventoryGroup).category;
				}
				if (c == null)
					return false;
				
				if (c.nameKey != null && c.nameKey == USERDEFINED_NAMEKEY)
					return true;
				return c.editable;
			}
			
			protected function onToolTipCreate(event:ToolTipEvent):void
			{
				var toolTip:InventoryItemToolTip = new InventoryItemToolTip();
				toolTip.detailsContainer.formObject = treeListData.item;
				event.toolTip = toolTip;
			}
			
			protected function addButtonClickHandler(event:MouseEvent):void
			{
				if (treeListData.item is InventoryCategory)
				{
					var popup:NewInventoryItemDialog = InteractionUtil.newPopup(NewInventoryItemDialog) as NewInventoryItemDialog;
					popup.isDiscoveryTab = isDiscoveryTab
					event.stopPropagation();
					return;
				} 
				if (treeListData.item is InventoryGroup && treeListData.item.itemType == InventoryGroup.TYPE_ITYPE)
				{
					var i:InventoryItem = new InventoryItem;
					i.group = treeListData.item as InventoryGroup;
					i.category = null;
					i.item = new InformationType();
					InteractionUtil.newEditDialog(i);
					
					event.stopPropagation();
					return;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Boolean id="isDiscoveryTab"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" 
			  verticalAlign="middle" 
			  paddingTop="2" paddingBottom="2">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:HGroup toolTip="{treeListData.item is InventoryItem ? ' ': null}" 
				  toolTipCreate="onToolTipCreate(event)" width="100%">
			<s:BitmapImage source="{treeListData.item.icon}" />
			<s:Label id="labelField" text="{treeListData.label}" paddingTop="2" width="100%"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:HGroup includeIn="selected" left="0" right="0" top="0" bottom="0"
			  horizontalAlign="right" verticalAlign="middle">
		<s:SkinnableContainer backgroundAlpha="1" backgroundColor="0xA8C6EE">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="right"
									verticalAlign="middle"
									paddingLeft="2" paddingRight="2"
									gap="1"/>
			</s:layout>
			
			<s:Button styleName="addButtonStyle"
					  click="addButtonClickHandler(event)"
					  includeInLayout="{isAddEnabled(treeListData.item)}"
					  visible="{isAddEnabled(treeListData.item)}"/>
			<s:Button styleName="copyButtonStyle"
					  click="{
					  InteractionUtil.newEditDialog(ReflectionUtil.cloneDomainObject(treeListData.item));
					  event.stopPropagation();
					  }"
					  includeInLayout="{isCloneEnabled(treeListData.item)}"
					  visible="{isCloneEnabled(treeListData.item)}" 
					  toolTip="@Resource(key='inventoryItem.copyButton.tooltip.label', bundle='messages')"/>
			<s:Button styleName="editButtonStyle" 
					  click="{
					  InteractionUtil.newEditDialog(treeListData.item);
					  event.stopPropagation();
					  }" 
					  includeInLayout="{isEditEnabled(treeListData.item)}"
					  visible="{isEditEnabled(treeListData.item)}" 
					  toolTip="@Resource(key='inventoryItem.editButton.tooltip.label', bundle='messages')"/>
			<s:Button styleName="removeButtonStyle" 
					  click="{InteractionUtil.newDeleteDialog(treeListData.item);
					  event.stopPropagation();}"
					  includeInLayout="{isEditEnabled(treeListData.item)}"
					  visible="{isEditEnabled(treeListData.item)}" 
					  toolTip="@Resource(key='inventoryItem.removeButton.tooltip.label', bundle='messages')"/>
		</s:SkinnableContainer>
	</s:HGroup>
	
</s:MXTreeItemRenderer>
