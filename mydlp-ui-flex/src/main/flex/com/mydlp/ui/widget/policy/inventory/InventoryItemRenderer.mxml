<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.widget.general.popup.NewInventoryItemDialog;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ToolTipEvent;
			import mx.managers.ToolTipManager;
			import mx.utils.ObjectUtil;
			
			public static const USERDEFINED_NAMEKEY:String = "inventory.userDefined";
			
			public static function isAddEnabled(i:*): Boolean
			{
				if (i is InventoryCategory) {
					var category:InventoryCategory = i as InventoryCategory;
					if (category.nameKey != null && category.nameKey == USERDEFINED_NAMEKEY)
						return true;
					return category.editable;
				}
				return false;
			}
			
			public static function isEditEnabled(i:*): Boolean
			{
				if (i is InventoryCategory)
					return (i as InventoryCategory).editable;
				else if (i is InventoryItem)
				{
					var c:InventoryCategory = (i as InventoryItem).category;
					if (c == null)
						return true;
					if (c.nameKey != null && c.nameKey == USERDEFINED_NAMEKEY)
						return true;
					return c.editable;
				}
				else
					throw new Error("Unexpected inventory object");
			}
			
			protected function onToolTipCreate(event:ToolTipEvent):void
			{
				var toolTip:InventoryItemToolTip = new InventoryItemToolTip();
				toolTip.detailsContainer.formObject = treeListData.item;
				event.toolTip = toolTip;
			}
			
			protected function hasItems(rule:Rule, selectedItems:ListCollectionView):Boolean
			{
				var ruleItems:ListCollectionView = rule.ruleItems;
				for(var i:int = 0; i < ruleItems.length; i++)
				{
					for(var j:int = 0; j < selectedItems.length; j++)
					{
						if(ruleItems[i].item.uid == selectedItems[j].item.uid)
							return false;
					}
				}
				return true;
			}
			
			protected function isRemovable(selectedItems:ListCollectionView):Boolean
			{
				var ruleList:ArrayCollection = FlexGlobals.topLevelApplication.ruleContainer.ruleDP;
				for(var i:int = 0; i < ruleList.length; i++)
				{
					if(! (hasItems(ruleList[i] as Rule, selectedItems)))
						return false;
				}
				return true;
			}
			
			protected function resolveInventoryCategory(selectedCategory:InventoryCategory):ListCollectionView
			{
				var itemList:ListCollectionView = new ArrayCollection();
				for each (var o:* in selectedCategory.children)
				{
					if (o is InventoryItem)
						itemList.addItem(o as InventoryItem);
					else if (o is InventoryCategory)
						itemList.addAll(resolveInventoryCategory(o as InventoryCategory));
					else
						throw new Error("Unexpected inventory object");
				}
				return itemList;
			}
			
			protected function deleteButtonClickHandler(event:Event):void
			{
				var selectedItems:ListCollectionView = new ArrayCollection();
				if(this.treeListData.item is InventoryItem)
					selectedItems.addItem(this.treeListData.item);
				else if(this.treeListData.item is InventoryCategory)
				{
					selectedItems = resolveInventoryCategory(this.treeListData.item as InventoryCategory);
				}
				if(isRemovable(selectedItems))
				{
					InteractionUtil.newDeleteDialog(treeListData.item);
					event.stopPropagation();
				}
				else
					Alert.show(LangUtil.getString("messages", "inventory.delete.error.message"), LangUtil.getString("messages", "inventory.delete.error.title"));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:HGroup left="0" right="0" top="0" bottom="0" 
			  verticalAlign="middle" 
			  paddingTop="2" paddingBottom="2">
		<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>
		<s:Group id="disclosureGroup">
			<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
		</s:Group>
		<s:HGroup toolTip="{treeListData.item is InventoryItem ? ' ': null}" 
				  toolTipCreate="onToolTipCreate(event)" width="100%">
			<s:BitmapImage source="{treeListData.icon}" />
			<s:Label id="labelField" text="{treeListData.label}" paddingTop="2" width="100%"/>
			<s:Spacer width="10" />
		</s:HGroup>
		<s:HGroup width="85" height="20" verticalAlign="middle" >
			<s:HGroup id="actions" includeIn="selected" gap="1">
				<s:Button styleName="addButtonStyle"
						  click="{
						  InteractionUtil.newPopup(NewInventoryItemDialog);
						  event.stopPropagation();
						  }" 
						  visible="{isAddEnabled(treeListData.item)}"/>
				<s:Button styleName="copyButtonStyle"
						  click="{
						  InteractionUtil.newEditDialog(ReflectionUtil.cloneDomainObject(treeListData.item));
						  event.stopPropagation();
						  }" 
						  visible="{treeListData.item is InventoryItem}"/>
				<s:Button styleName="editButtonStyle" 
						  click="{
						  InteractionUtil.newEditDialog(treeListData.item);
						  event.stopPropagation();
						  }" 
						  visible="{isEditEnabled(treeListData.item)}"/>
				<s:Button styleName="removeButtonStyle" 
						  click="deleteButtonClickHandler(event)"
						  visible="{isEditEnabled(treeListData.item)}"/>
			</s:HGroup>
		</s:HGroup>
		
		
	</s:HGroup>
</s:MXTreeItemRenderer>
