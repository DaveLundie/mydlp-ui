<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:my="http://www.mydlp.com/flex/my"
					  xmlns:util="com.mydlp.ui.util.*"
					  width="100%" height="100%" 
					  creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.IncidentLog;
			import com.mydlp.ui.domain.IncidentLogFileContent;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.skin.DetailSearchLabelButton16Skin;
			import com.mydlp.ui.util.AsyncListDataProvider;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.util.SpecialCharacterUtil;
			import com.mydlp.ui.widget.general.input.IpAddressInput;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridEvent;
			
			protected const LOG_PENDING_OBJECT:Object = 
				{date: LangUtil.getString("messages", "log.container.search.pending.message")};
			
			protected const CONTENT_PENDING_OBJECT:Object = 
				{message: LangUtil.getString("messages", "log.container.search.pending.message")};

			protected var criteriaList:ListCollectionView = new ArrayCollection();
			protected var searchString:String = "";
			protected var contentId:Number = Number.NaN;
			
			[Bindable]
			protected var logSearchDP:AsyncListDataProvider = null;
			
			[Bindable]
			protected var contentSearchDP:AsyncListDataProvider = null;
			
			[Bindable]
			protected var actionSearch:ListCollectionView = 
				new ArrayCollection(
					new Array(
						Rule.ACTION_ARCHIVE,
						Rule.ACTION_BLOCK,
						Rule.ACTION_LOG,
						Rule.ACTION_QUARANTINE
					)
				);
				
			protected static const channels:ListCollectionView = 
				new ArrayCollection(
					new Array(
						{label: "Web", data:"W"},
						{label: "Mail", data:"M"},
						{label: "Removable Storage", data:"R"},
						{label: "Removable Storage Inbound", data:"I"},
						{label: "Printer", data:"P"},
						{label: "Discovery", data:"D"},
						{label: "API", data:"A"}
					)
				);
			
			protected static const channelsCommunity:ListCollectionView = 
				new ArrayCollection(
					new Array(
						{label: "Web", data:"W"},
						{label: "Mail", data:"M"},
						{label: "Removable Storage", data:"R"},
						{label: "Printer", data:"P"},
						{label: "Discovery", data:"D"}
					)
				);
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				if (SessionUtil.isEnterprise())
				{
					channelList.dataProvider = channels;
				}
				else
				{
					channelList.dataProvider = channelsCommunity;
				}
				
				logSearchDP = new AsyncListDataProvider();
				logSearchDP.countFunction = countLogSearch;
				logSearchDP.fetchFunction = fetchLogSearch;
				logSearchDP.pendingObject = LOG_PENDING_OBJECT;
				
				contentSearchDP = new AsyncListDataProvider();
				contentSearchDP.countFunction = countContentSearch;
				contentSearchDP.fetchFunction = fetchContentSearch;
				contentSearchDP.pendingObject = CONTENT_PENDING_OBJECT;
				
				refresh();
			}
			
			protected function countLogSearch(): AsyncToken
			{
				return re.getLogCount(criteriaList);
			}
			
			protected function fetchLogSearch(offset:Number, count:Number): AsyncToken
			{
				return re.getLogs(criteriaList, offset, count);
			}
			
			protected function countContentSearch(): AsyncToken
			{
				return re.getLogContentCount(searchString);
			}
			
			protected function fetchContentSearch(offset:Number, count:Number): AsyncToken
			{
				return re.getLogContents(searchString, offset, count);
			}
			
			protected function generateCriteriaList():void
			{
				criteriaList = new ArrayCollection();
				if (startDate.selectedDate != null && endDate.selectedDate != null)
				{
					var criteria:ListCollectionView = new ArrayCollection();
					criteria.addItem("date");
					criteria.addItem("bw");
					criteria.addItem(startDate.selectedDate);
					criteria.addItem(endDate.selectedDate);
					
					criteriaList.addItem(criteria);
				}
				if (!isNaN(contentId))
				{
					var criteria2:ListCollectionView = new ArrayCollection();
					criteria2.addItem("contentId");
					criteria2.addItem("eq");
					criteria2.addItem(contentId);
					
					criteriaList.addItem(criteria2);
				}
				
				if(ipField.text != "")
				{
					var ipUint:uint = IpAddressInput.ipStrToNumber(ipField.text);
					var ipNumber:Number = new Number(ipUint);
					var criteria3:ListCollectionView = new ArrayCollection();
					criteria3.addItem("sourceIp");
					criteria3.addItem("eq");
					criteria3.addItem(ipNumber);
					criteriaList.addItem(criteria3);
				}
				
				if(destinationField.text != "" && isDestinationEnabled(channelList.selectedItem))
				{
					var criteria4:ListCollectionView = new ArrayCollection();
					criteria4.addItem("destination");
					criteria4.addItem("eq");
					criteria4.addItem(destinationField.text);
					criteriaList.addItem(criteria4);
				}
				
				if(userField.text != "")
				{
					var criteria5:ListCollectionView = new ArrayCollection();
					criteria5.addItem("sourceUser");
					criteria5.addItem("eq");
					criteria5.addItem(userField.text);
					criteriaList.addItem(criteria5);
				}
				
				if(actionList.selectedIndex != -1)
				{
					var actionValue:String;
					switch(actionSearch.getItemAt(actionList.selectedIndex))
					{
						case Rule.ACTION_BLOCK: actionValue = "B"; break;
						case Rule.ACTION_LOG: actionValue = "L"; break;
						case Rule.ACTION_QUARANTINE: actionValue = "Q"; break;
						case Rule.ACTION_ARCHIVE: actionValue = "A"; break;
						default: break;
					}
					var criteria6:ListCollectionView = new ArrayCollection();
					criteria6.addItem("action");
					criteria6.addItem("eq");
					criteria6.addItem(actionValue);
					criteriaList.addItem(criteria6);
				}
				
				if(channelList.selectedIndex != -1)
				{
					var channelValue:String = channelList.selectedItem.data;
					var criteria7:ListCollectionView = new ArrayCollection();
					criteria7.addItem("channel");
					criteria7.addItem("eq");
					criteria7.addItem(channelValue);
					criteriaList.addItem(criteria7);
				}
				
				var criteriaSA:ListCollectionView = new ArrayCollection();
				criteriaSA.addItem("showAll");
				criteriaSA.addItem("eq");
				criteriaSA.addItem(showAll.selected);
				
				criteriaList.addItem(criteriaSA);
			}
			
			protected function searchLogHandler(event:MouseEvent):void
			{
				refresh();
			}
			
			protected function resetHandler(event:MouseEvent):void
			{
				// reset search keys
				criteriaList = new ArrayCollection();
				searchString = "";
				contentId = Number.NaN;
				showAll.selected = false;
				ipField.text = "";
				userField.text = "";
				destinationField.text = "";
				actionList.selectedIndex = -1;
				channelList.selectedIndex = -1;
				
				// requery
				refresh();
				
				// reset view
				currentState = "normal";
				startDate.selectedDate = null;
				endDate.selectedDate = null;
				fulltextInput.text = "";
			}
			
			protected function searchContentHandler(event:MouseEvent):void
			{
				searchString = SpecialCharacterUtil.escapeSpecialCharacters(fulltextInput.text, SpecialCharacterUtil.solr);
				contentSearchDP.init();
				currentState = "fulltext";
			}
			
			protected function onContentClick(event:GridEvent):void
			{
				if (event.item == null || ! event.item is IncidentLogFileContent) return;
				var content:IncidentLogFileContent = 
						event.item as IncidentLogFileContent;
				contentId = content.id;
				refresh();
			}
			
			public function requeueIncident(value:IncidentLog): void
			{
				re.requeueIncident(value);
			}
			
			protected function refresh(): void
			{
				generateCriteriaList();
				logSearchDP.init();
			}
			
			protected function onDetailSearchClickHandler(event:MouseEvent):void
			{
				if(detailSearchGroup.visible == false)
				{
					detailSearchGroup.includeInLayout = true;
					detailSearchGroup.visible = true;
				}
				else
				{
					detailSearchGroup.includeInLayout = false;
					detailSearchGroup.visible = false;
				}
			}
			
			protected function onExportClick(event:MouseEvent):void
			{
				exportButton.enabled=false;
				generateCriteriaList();
				re.exportExcel(criteriaList);
			}
			
			protected function exportHandler(event:ResultEvent): void
			{
				var exportId:String = event.result as String;
				if (exportId != null)
					navigateToURL(new URLRequest("export?id="+exportId), '_blank');
				exportButton.enabled=true;
			}
			
			protected function isDestinationEnabled(item:*): Boolean
			{
				
				if (item == null ||
					item.data == "D" ||
					item.data == "W" ||
					item.data == "M"
					)
				{
					return true;
				}
				
				return false;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<my:remote id="re" destination="logBRS" >
			<my:method name="exportExcel" result="exportHandler(event)" />
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="fulltext" />
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingTop="10" />
	</s:layout>
	
	<s:HGroup width="100%" height="32">
		<s:HGroup verticalAlign="middle" horizontalAlign="left" 
				  width="70%" height="100%">
			<s:Spacer width="5"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.date.start.label')"/>
			<mx:DateField id="startDate"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.date.end.label')"/>
			<mx:DateField id="endDate"/>
			<s:Spacer width="4"/>
			<s:Button label="@Resource(bundle = 'messages', key = 'log.container.search.button.label')"
					  click="searchLogHandler(event)"/>
			<s:Button label="@Resource(bundle = 'messages', key = 'log.container.search.reset.label')"
					  click="resetHandler(event)"/>
			<s:Button label="@Resource(bundle = 'messages', key = 'log.container.refresh.button.label')"
					  click="searchLogHandler(event)"/>
			<s:Button id="detailSearchButton" skinClass="com.mydlp.ui.skin.DetailSearchLabelButton16Skin"
					  label="@Resource(bundle = 'messages', key = 'log.container.detailSearch.button.label')"
					  click="onDetailSearchClickHandler(event)"/>
			<s:Spacer width="16"/>
			<s:Button label="@Resource(bundle = 'messages', key = 'log.container.export.button.label')" 
					  id="exportButton"
					  click="onExportClick(event)"/>
		</s:HGroup>
		<s:HGroup width="30%" height="100%" verticalAlign="middle" includeInLayout="{SessionUtil.isEnterprise()}">
			<s:Button label="@Resource(bundle = 'messages', key = 'log.container.search.fulltext.label')"
					  click="searchContentHandler(event)" enabled="{fulltextInput.text.length > 3}"/>
			<s:TextInput id="fulltextInput" width="100%"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:Group id="detailSearchGroup" height="32" width="100%" includeInLayout="false" visible="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Spacer width="1"/>
			<s:CheckBox id="showAll" label="@Resource(bundle = 'messages', key = 'log.container.showAll.checkbox.label')" />
			<s:Spacer width="5"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.sourceIp.label')"/>
			<s:TextInput  id="ipField" width="110"/>
			<s:Spacer width="2"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.sourceUser.label')"/>
			<s:TextInput id="userField" width="120"/>
			<s:Spacer width="2"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.destination.label')"
					 enabled="{isDestinationEnabled(channelList.selectedItem)}"/>
			<s:TextInput id="destinationField" width="120"
						 enabled="{isDestinationEnabled(channelList.selectedItem)}"/>
			<s:Spacer width="2"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.actionList.label')"/>
			<s:DropDownList id="actionList" width="90"
							contentBackgroundAlpha="1"
							dataProvider="{actionSearch}"/>
			<s:Spacer width="2"/>
			<s:Label text="@Resource(bundle = 'messages', key = 'log.container.search.channelList.label')"/>
			<s:DropDownList id="channelList" width="180"
							contentBackgroundAlpha="1"/>
		</s:HGroup>  
				
	</s:Group>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout gap="10"/>
		</s:layout>
		<s:DataGrid id="logList" dataProvider="{logSearchDP.asyncListView}" width="100%" width.fulltext="70%" height="100%" variableRowHeight="true">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.date')"
								  dataField="date"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.source')" 
								  itemRenderer="com.mydlp.ui.widget.log.IncidentSourceColumnRenderer"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.destination')"
								  itemRenderer="com.mydlp.ui.widget.log.IncidentDestinationColumnRenderer"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.policy')"
								  itemRenderer="com.mydlp.ui.widget.log.IncidentPolicyColumnRenderer"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.details')"
								  itemRenderer="com.mydlp.ui.widget.log.IncidentDetailsColumnRenderer"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.files')"
								  itemRenderer="com.mydlp.ui.widget.log.IncidentFilesColumnRenderer"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
		<s:DataGrid id="logContentList" includeIn="fulltext" gridClick="onContentClick(event)"
					dataProvider="{contentSearchDP.asyncListView}" width="30%" height="100%" variableRowHeight="true">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText=""
								  itemRenderer="com.mydlp.ui.widget.log.ContentSelectColumnRenderer"
								  width="36"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.content.details')" 
								  itemRenderer="com.mydlp.ui.widget.log.ContentDetailsColumnRenderer"/>
					<s:GridColumn headerText="@Resource(bundle = 'messages', key = 'log.container.header.content.filenames')"
								  itemRenderer="com.mydlp.ui.widget.log.ContentFilenamesColumnRenderer"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:Group>
	
</s:SkinnableContainer>
