<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 labelField="label"
		 width="300" height="100%"
		 showRoot="false"
		 allowMultipleSelection="true"
		 creationComplete="populateTree()"
		 dataProvider="@{inventory}"
		 dragEnabled="true" 
		 dropEnabled="true"
		 dragDrop="onDragDrop(event)"
		 >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AbstractEntity;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable]
			protected var inventory:Object;
			
			protected var tempOpenItems:Object;
			
			public function refreshTree(): void
			{
				tempOpenItems = openItems;
				invalidateList();
				re.getInventory();
			}
			
			protected function saveAllHandler(event:ResultEvent): void
			{
				refreshTree();
			}
			
			protected function getInventoryHandler(event:ResultEvent): void
			{
				inventory = event.result as ListCollectionView;
				openItems = tempOpenItems;
				validateNow();
			}
			
			protected function populateTree():void
			{
				populateContextMenu();
				refreshTree();
			}
			
			protected function populateContextMenu(): void {
				if (!this.contextMenu) {
					contextMenu = new ContextMenu();
				}
				contextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var newItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.new"));
				var removeItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.remove"));
				var removeAllItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.removeall"));
				var editItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.edit"));
				var cloneItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.clone"));
				
				contextMenu.customItems.push(newItem);
				contextMenu.customItems.push(removeItem);
				contextMenu.customItems.push(removeAllItem);
				contextMenu.customItems.push(editItem);
				contextMenu.customItems.push(cloneItem);
				
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, 
					function(event:ContextMenuEvent):void {			
						newItem.enabled = false;
						removeItem.enabled = false;
						removeAllItem.enabled = false;
						editItem.enabled = false;
						cloneItem.enabled = false;
						
						if (selectedItems.length > 1 )
						{
							removeAllItem.enabled = true;
						} 
						else if (selectedItems.length == 1 ) 
						{
							if (selectedItem is InventoryCategory) 
							{
								newItem.enabled = true;
								editItem.enabled = true;
								removeAllItem.enabled = true;
							} 
							else if (selectedItem is InventoryItem) 
							{ 
								removeItem.enabled = true;
								editItem.enabled = true;
								cloneItem.enabled = true;
								removeItem.enabled = true;
							}
						}
						
					});
				
				newItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, newItemHandler);
				removeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeItemHandler);
				removeAllItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeAllItemHandler);
				editItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, editItemHandler);
				cloneItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, cloneItemHandler);
			}
			
			protected function newItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newPopup(NewDialog);
			}
			
			protected function removeItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newDeleteDialog(selectedItem);
			}
			
			protected function removeAllItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newDeleteDialog(selectedItem);
			}
			
			protected function editItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newEditDialog(selectedItem);
			}
			
			protected function cloneItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newEditDialog(ReflectionUtil.cloneDomainObject(selectedItem));
			}
			
			protected function onDragDrop(event:DragEvent):void
			{
				event.preventDefault();
				hideDropFeedback(event);
				
				var dropIndex:int = calculateDropIndex();
				var renderer:IListItemRenderer = indexToItemRenderer(dropIndex);
				var parentCategory:InventoryCategory = null;
				if (renderer == null)
				{
					parentCategory = null;
				}
				else
				{
					var dropTarget:InventoryBase = renderer.data as InventoryBase;
					if (renderer.data is InventoryCategory)
					{
						parentCategory = dropTarget as InventoryCategory;
						expandItem(parentCategory, true);
					}
					else
						parentCategory = dropTarget.category;
				}
				
				var itemsToSave:ListCollectionView = new ArrayCollection();
				if (event.dragSource.hasFormat("treeItems"))
					for each (var item:Object in event.dragSource.dataForFormat('treeItems') as Array)
				{
					var dragSource:InventoryBase = item as InventoryBase;
					if (dragSource != parentCategory && 
						dragSource.category != parentCategory &&
						isValidTargetCategory(dragSource, parentCategory)
						)
					{
						dragSource.category = parentCategory;
						itemsToSave.addItem(dragSource);
					}
				}
				
				if (itemsToSave.length > 0)
					re.saveAll(itemsToSave);
			}
			
			protected function isValidTargetCategory(dragSource:InventoryBase, targetCategory:InventoryCategory): Boolean
			{
				if (targetCategory == null)
					return true;
				if (dragSource == targetCategory)
					return false;
				return isValidTargetCategory(dragSource, targetCategory.category);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="inventoryBRS">
			<my:method name="getInventory" result="getInventoryHandler(event)" />
			<my:method name="saveAll" result="saveAllHandler(event)" />
		</my:remote>
	</fx:Declarations>
</mx:Tree>