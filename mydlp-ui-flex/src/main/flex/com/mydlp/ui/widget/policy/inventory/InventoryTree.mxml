<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:my="http://www.mydlp.com/flex/my"
	creationComplete="populateTree()" 
	xmlns:util="com.mydlp.ui.util.*"
	width="320" height="100%"
	>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ApplicationName;
			import com.mydlp.ui.domain.Domain;
			import com.mydlp.ui.domain.FileSystemDirectory;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.RemoteStorageCIFS;
			import com.mydlp.ui.domain.RemoteStorageDFS;
			import com.mydlp.ui.domain.RemoteStorageFTPFS;
			import com.mydlp.ui.domain.RemoteStorageNFS;
			import com.mydlp.ui.domain.RemoteStorageSSHFS;
			import com.mydlp.ui.domain.SourceDomainName;
			import com.mydlp.ui.util.FilterDataDescriptor;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			
			protected function isDiscoveryItem(item:*):Boolean
			{
				/*if(item is InventoryCategory && item.name != null)
					return true;
				else if(item is InventoryCategory)
					return traverse(item.children);*/
				if(item is InventoryCategory)
				{
					if(item.nameKey != null)
						return traverse(item.children);
					else
						return true;
				}
				else if(item.item is SourceDomainName || item.item is Domain || 
					item.item is ApplicationName)
					return false;
				else
					return true;
			}
			
			protected function isPolicyItem(item:*):Boolean
			{
				/*if(item is InventoryCategory && item.name != null)
					return true;
				else if(item is InventoryCategory)
					return traverse(item.children);*/
				if(item is InventoryCategory)
				{
					if(item.nameKey != null)
						return traverse(item.children);
					else 
						return true;
				}
				else if(item.item is FileSystemDirectory || item.item is RemoteStorageCIFS ||
					item.item is RemoteStorageDFS || item.item is RemoteStorageFTPFS ||
					item.item is RemoteStorageNFS || item.item is RemoteStorageSSHFS)
					return false;
				else
					return true;
			}
			
			protected function traverse(list:ArrayCollection):Boolean
			{
				for(var i:int = 0; i < list.length; i++)
				{
					if(list[i] is InventoryCategory)
					{
						if (traverse(list[i].children))
							return true;
					}
					else if(list[i] is InventoryItem)
					{
						if(isDiscoveryTab)
						{
							if(isDiscoveryItem(list[i]))
								return true;
						}
						else
						{
							if(isPolicyItem(list[i]))
								return true;
						}	
					}
				}
				return false;
			}
			
			protected function populateTree():void
			{
				var dd:FilterDataDescriptor;
				if(isDiscoveryTab)
					dd = new FilterDataDescriptor(isDiscoveryItem);
				else
					dd = new FilterDataDescriptor(isPolicyItem);
				myInventoryTree.dataDescriptor = dd;
				myInventoryTree.saveAllFunction = saveInventoryFunction;
				var ir:ClassFactory = new ClassFactory(InventoryItemRenderer);
				ir.properties = {isDiscoveryTab: isDiscoveryTab};
				myInventoryTree.itemRenderer = ir;
			}
			
			public function getUserDefinedCategory(): InventoryCategory
			{
				for each (var i:* in inventory)
				if (i is InventoryCategory)
				{
					var c:InventoryCategory = i as InventoryCategory;
					if (c.nameKey == InventoryItemRenderer.USERDEFINED_NAMEKEY)
						return c;
				}
				return null;
			}
			
			protected function saveInventoryFunction(list:ListCollectionView):AsyncToken
			{
				return re.saveAll(list);
			}
			
			public function refreshTree():void
			{
				myInventoryTree.refreshTree();
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="inventoryBRS"/>
		<fx:Object id="inventory"/>
		<fx:Boolean id="isDiscoveryTab"/>
	</fx:Declarations>
	<s:Group width="100%" height="100%">
		
		
		<util:InventoryTree width="100%" height="100%" id="myInventoryTree" borderVisible="false" 
							selectionColor="0xA8C6EE"
							isDiscoveryTab="{isDiscoveryTab}"
							folderOpenIcon="@Embed('/assets/icons/16x16/folder.png')"
							folderClosedIcon="@Embed('/assets/icons/16x16/folder.png')"
							change="{FlexGlobals.topLevelApplication.policyContainer.inventoryTreeChangeHandler(event)}"
							dataProvider="@{inventory}"/>
	</s:Group>
</s:SkinnableContainer>