<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:my="http://www.mydlp.com/flex/my"
		 labelField="label"
		 width="300" height="100%"
		 showRoot="false"
		 allowMultipleSelection="true"
		 creationComplete="populateTree()"
		 dataProvider="@{inventory}" >
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.LangUtil;
			
			import mx.collections.ListCollectionView;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			protected var inventory:Object;
			
			//	public var ddObject:Object;
		
			/*
			dragEnabled="true" dropEnabled="true" 
			dragEnter="onDragEnter(event)" dragDrop="dragAndDropHandler(event)"
			
			protected function onDragEnter(event:DragEvent):void
			{
				ddObject = this.parentApplication["inventoryTree"]["selectedItem"];
			}
			
			protected function dragAndDropHandler(event:DragEvent):void
			{
				var dropParent:int;
				var myIndex:int;
				this.selectedIndex = this.calculateDropIndex();
				trace("ID:" + this.selectedItem["id"]);//must be fixed!! eger itemi alip aldigi yere birakirsa categoryid sini set ettigim icin sikinti cikiyor. 
				ddObject["categoryId"] = this.selectedItem["id"];
				if(ddObject["className"] == "InventoryItem")
					DAOUtil.save("InventoryItem", ddObject, successHandler);
				if(ddObject["className"] == "InventoryCategory")
					DAOUtil.save("InventoryCategory", ddObject, successHandler);
			}
			*/
			
			protected var tempOpenItems:Object;
			
			public function refreshTree(): void
			{
				tempOpenItems = openItems;
				invalidateList();
				re.getInventory();
			}
			
			protected function getInventoryHandler(event:ResultEvent): void
			{
				inventory = event.result as ListCollectionView;
				openItems = tempOpenItems;
				validateNow();
			}
			
			protected function populateTree():void
			{
				populateContextMenu();
				refreshTree();
				//this.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
			}
			
			protected function populateContextMenu(): void {
				if (!this.contextMenu) {
					contextMenu = new ContextMenu();
				}
				contextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				
				var newItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.new"));
				var removeItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.remove"));
				var removeAllItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.removeall"));
				var editItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.edit"));
				var cloneItem:ContextMenuItem  = new ContextMenuItem(LangUtil.getString("messages", "inventory.contextmenu.clone"));
				
				contextMenu.customItems.push(newItem);
				contextMenu.customItems.push(removeItem);
				contextMenu.customItems.push(removeAllItem);
				contextMenu.customItems.push(editItem);
				contextMenu.customItems.push(cloneItem);
				
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, 
					function(event:ContextMenuEvent):void {			
						newItem.enabled = false;
						removeItem.enabled = false;
						removeAllItem.enabled = false;
						editItem.enabled = false;
						cloneItem.enabled = false;
						
						if (selectedItems.length > 1 )
						{
							removeAllItem.enabled = true;
						} 
						else if (selectedItems.length == 1 ) 
						{
							if (selectedItem is InventoryCategory) 
							{
								newItem.enabled = true;
								editItem.enabled = true;
								removeAllItem.enabled = true;
							} 
							else if (selectedItem is InventoryItem) 
							{ 
								removeItem.enabled = true;
								editItem.enabled = true;
								cloneItem.enabled = true;
								removeItem.enabled = true;
							}
						}
						
					});
				
				newItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, newItemHandler);
				removeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeItemHandler);
				removeAllItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, removeAllItemHandler);
				editItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, editItemHandler);
				cloneItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, cloneItemHandler);
			}
			
			protected function newItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newPopup(NewDialog);
			}
			
			protected function removeItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newDeleteDialog(selectedItem);
			}
			
			protected function removeAllItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newDeleteDialog(selectedItem);
			}
			
			protected function editItemHandler(event:ContextMenuEvent):void
			{
				InteractionUtil.newEditDialog(selectedItem);
			}
			
			protected function cloneItemHandler(event:ContextMenuEvent):void
			{
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="inventoryBRS">
			<my:method name="getInventory" result="getInventoryHandler(event)" />
		</my:remote>
	</fx:Declarations>
</mx:Tree>