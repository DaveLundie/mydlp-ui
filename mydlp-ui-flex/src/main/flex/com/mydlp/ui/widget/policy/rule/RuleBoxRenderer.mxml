<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				autoDrawBackground="false"
				xmlns:util="com.mydlp.ui.util.*" 
				dragEnter="onDragEnter(event)"
				dragOver="onDragOver(event)"
				dragExit="onDragExit(event)"
				dragDrop="onDragDrop(event)"
				click="onItemClickHandler(event)"
				width="100%"
				>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ApiRule;
			import com.mydlp.ui.domain.ApplicationName;
			import com.mydlp.ui.domain.DiscoveryReport;
			import com.mydlp.ui.domain.DiscoveryRule;
			import com.mydlp.ui.domain.Domain;
			import com.mydlp.ui.domain.FileSystemDirectory;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryGroup;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.PrinterRule;
			import com.mydlp.ui.domain.RemoteStorage;
			import com.mydlp.ui.domain.RemoteStorageCIFS;
			import com.mydlp.ui.domain.RemoteStorageDFS;
			import com.mydlp.ui.domain.RemoteStorageFTPFS;
			import com.mydlp.ui.domain.RemoteStorageNFS;
			import com.mydlp.ui.domain.RemoteStorageRule;
			import com.mydlp.ui.domain.RemoteStorageSSHFS;
			import com.mydlp.ui.domain.RemovableStorageEncryptionRule;
			import com.mydlp.ui.domain.RemovableStorageInboundRule;
			import com.mydlp.ui.domain.RemovableStorageRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.RuleItemGroup;
			import com.mydlp.ui.domain.RuleUser;
			import com.mydlp.ui.domain.ScreenshotRule;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.domain.WebServer;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.InventoryTree;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			import com.mydlp.ui.widget.policy.inventory.InventoryTree;
			import com.mydlp.ui.widget.policy.rule.discovery.SchedulePopup;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			import org.alivepdf.events.ProcessingEvent;
			
			import spark.components.List;
			
			[Bindable]
			public var ruleObject:* = null;
			
			protected var discoveryReport:DiscoveryReport;
			
			protected static const SOURCES_ALL:String = "inventory.networks.all";
			
			protected static const ITYPE_ALL:String = "informationType.predefined.all";
			
			protected static const DOMAIN_ALL:String = "inventory.domain.all";
			
			protected static const DESTINATION_HASBCC:String = "inventory.mail.hasBcc";
			
			protected static const DIRECTORY_ALL:String = "inventory.fileSystemDirectory.all";
			
			protected static const APPLICATION_ALL:String = "inventory.applicationName.all";
			
			[Bindable]
			protected var sourceDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var matcherDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var destinationDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var ruleContainer:RuleContainer = FlexGlobals.topLevelApplication.policyContainer.ruleContainer;
			
			[Bindable]
			protected var discoveryRuleContainer:RuleContainer = FlexGlobals.topLevelApplication.discoveryContainer.ruleContainer; 
			
			protected var deleteList:ListCollectionView;
			
			protected var droppedSources:ListCollectionView;//Array for dropped Sources items from inventory tree to rule container.
			protected var droppedMatchers:ListCollectionView;//Array for dropped Matchers items from inventory tree to rule container.
			protected var droppedDestinations:ListCollectionView;//Array for dropped Destination items from inventory tree to rule container.
			
			[Embed('/assets/icons/16x16/calendar_full.png')]
			protected var calendarIcon:Class;
			
			public override function set data(value:Object):void
			{
				super.data = value;
				originalRuleItems = null;
				originalRuleItemGroups = null;
				
				if(value == null) return;
				populate();
				dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
			}
			
			protected function getCollapseState(): Boolean
			{
				if (ruleObject == null) 
					return true;
				var collapseState:* = true;
				if (isDiscoveryTab)
				{
					collapseState = discoveryRuleContainer.collapseStates[ruleObject.id];
				}
				else
				{
					collapseState = ruleContainer.collapseStates[ruleObject.id];
				}
				if (collapseState != null){
					return collapseState as Boolean;
				}
				else
				{
					return true;
				}
			}
			
			protected function changeCollapse(): void
			{
				collapse = !collapse;
				if (isDiscoveryTab)
				{
					discoveryRuleContainer.collapseStates[ruleObject.id] = collapse;
				}
				else
				{
					ruleContainer.collapseStates[ruleObject.id] = collapse;
				}
			}
			
			protected function populate():void
			{
				ruleObject = data;
				icon24 = RuleIcon.getIcon24(ruleObject);
				icon32 = RuleIcon.getIcon32(ruleObject);
				collapse = getCollapseState();
				
				if(isDiscoveryTab)
				{
					re.getDiscoveryStatus((ruleObject as Rule).id)
				}
					
				refresh();
			}
		
			public function refreshDataProviders(): void
			{
				var sourceDataProvider1:ArrayCollection = new ArrayCollection();
				var matcherDataProvider1:ArrayCollection = new ArrayCollection();
				var destinationDataProvider1:ArrayCollection = new ArrayCollection();
				
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				outer: for each (var ruleItem:* in ruleItems)
				{
					if (isSourceRuleItem(ruleItem))
					{
						for each (var ri:* in sourceDataProvider1)
						{
							if (ri is RuleItem && ri.item.id == ruleItem.item.id)
							{
								trace("W: Encountered duplicate item in source: " + ruleItem.item.coupledInventoryItem.label );
								continue outer;
							}
						}
						sourceDataProvider1.addItem(ruleItem);
					}
					else if (isITypeRuleItem(ruleItem))
					{
						for each (var ri2:* in matcherDataProvider1)
						{
							if (ri2 is RuleItem && ri2.item.id == ruleItem.item.id)
							{
								trace("W: Encountered duplicate item in itype: " + ruleItem.item.coupledInventoryItem.label );
								continue outer;
							}
						}
						matcherDataProvider1.addItem(ruleItem);
					}
					else if (isDestinationRuleItem(ruleItem))
					{
						for each (var ri3:* in destinationDataProvider1)
						{
							if (ri3 is RuleItem && ri3.item.id == ruleItem.item.id)
							{
								trace("W: Encountered duplicate item in destonation: " + ruleItem.item.coupledInventoryItem.label );
								continue outer;
							}
						}
						destinationDataProvider1.addItem(ruleItem);
					}
				}
				
				var ruleItemGroups:ListCollectionView = ruleObject.ruleItemGroups;
				outer2: for each (var ruleItemGroup:* in ruleItemGroups)
				{
					if (ruleItemGroup.group.itemType == InventoryGroup.TYPE_ITYPE)
					{
						for each (var rig:* in matcherDataProvider1)
						{
							if (rig is RuleItemGroup && rig.group.id == ruleItemGroup.group.id)
							{
								continue outer2;
							}
						}
						matcherDataProvider1.addItem(ruleItemGroup);
					}
				}
				
				sourceDataProvider = sourceDataProvider1;
				matcherDataProvider = matcherDataProvider1;
				destinationDataProvider = destinationDataProvider1;
			}
			
			protected var originalRuleItems:ListCollectionView = null;
			protected var originalRuleItemGroups:ListCollectionView = null;
			
			protected function initializeOriginalCopies(): void
			{
				originalRuleItems = new ArrayCollection();
				originalRuleItems.addAll(ruleObject.ruleItems);
				
				originalRuleItemGroups  = new ArrayCollection();
				originalRuleItemGroups.addAll(ruleObject.ruleItemGroups);
			}
			
			public function refresh():void
			{
				if (ruleObject == null) return;
				initializeOriginalCopies();
				
				invalidateDisplayList();
				refreshDataProviders();
				refreshView();
				validateNow();
			}
			
			public function refreshView(): void
			{
				expandCollapseButtonEnabled = isExpandCollapseEnabled();
				setNameLabel();
				playButton.enabled = isPlayButtonEnabled();
			}
			
			public function getDiscoveryStatusHandler(event:ResultEvent):void
			{
				discoveryReport = event.result as DiscoveryReport;
				refreshView();
			}
			
			public static function isSourceRuleItem(ruleItem:RuleItem): Boolean
			{
				if (ruleItem.item is Domain)
				{
					return (ruleItem.ruleColumn ==  RuleItem.COLUMN_NAME_SOURCE);
				}
				else if (ruleItem.item is RuleUser)
				{
					return (ruleItem.ruleColumn == null ||
							ruleItem.ruleColumn == RuleItem.COLUMN_NAME_SOURCE);
				}
				else
				{
					return isSourceItem(ruleItem.item);
				}
			}
			
			protected static function isSourceItem(item:Item):Boolean
			{
				if(item is Network)
					return true;
				else if(item is RuleUser)
					return true;
				else if(item is RemoteStorageCIFS || item is RemoteStorageDFS || item is RemoteStorageFTPFS ||
					item is RemoteStorageNFS || item is RemoteStorageSSHFS || item is WebServer)
					return true;
				else
					return false;
			}
			
			protected function hasAllSources():Boolean // Checks whether rule has "All Network" or not.
			{
				return ruleHasAllSources(ruleObject);
			}
			
			public static function ruleHasAllSources(r:Rule):Boolean
			{
				for each(var o:RuleItem in r.ruleItems)
				{
					if(o.item.coupledInventoryItem.nameKey == SOURCES_ALL)
						return true;
				}
				return false;
			}
			
			protected function hasAllDestination():Boolean //Checks whether rule has "All Destination" or not.
			{
				return ruleHasAllDestination(ruleObject);
			}
			
			public static function ruleHasAllDestination(r:Rule):Boolean
			{
				for each(var o:RuleItem in r.ruleItems)
				{
					if(o.item.coupledInventoryItem.nameKey == DOMAIN_ALL || 
						o.item.coupledInventoryItem.nameKey == DIRECTORY_ALL ||
						o.item.coupledInventoryItem.nameKey == APPLICATION_ALL)
						return true;
				}
				return false;
			}
			
			public static function isITypeRuleItem(ruleItem:RuleItem):Boolean
			{
				return isITypeItem(ruleItem.item);
			}
			
			protected static function isITypeItem(item:Item):Boolean
			{
				if(item is InformationType)
					return true;
				else
					return false;
			}
			
			public static function isDestinationRuleItem(ruleItem:RuleItem):Boolean
			{
				if(ruleItem.item is RuleUser)
				{
					return (ruleItem.ruleColumn == RuleItem.COLUMN_NAME_DESTINATION);
				}
				else if (ruleItem.item is Domain)
				{
					return (ruleItem.ruleColumn == null ||
							ruleItem.ruleColumn == RuleItem.COLUMN_NAME_DESTINATION);
				}
				else
				{
					return isDestinationItem(ruleItem.item);
				}
			}
			
			
			protected static function isDestinationItem(item:Item):Boolean
			{
				if(item is FileSystemDirectory ||
						item is ApplicationName ||
						item is Domain)
					return true;
				else
					return false;
			}
			
			protected function removeAllSourcesItem():void //called when "All Network" is in rule and dropped network is a specific network.
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(ruleItems[i].item.coupledInventoryItem.nameKey == SOURCES_ALL)
						{
							deleteList.addItem(ruleObject.ruleItems[i]);
							ruleObject.ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}
				}
			}
			
			protected function removeOtherSources():void // called when specific networks are in rule and dropped network is "All Network"
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(isSourceRuleItem(ruleItems[i]))
						{
							deleteList.addItem(ruleObject.ruleItems[i]);
							ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}	
				}
			}
			
			protected function removeAllDestinationItem():void //called when "All Destination" is in rule and dropped network is a specific network.
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(ruleItems[i].item.coupledInventoryItem.nameKey == DOMAIN_ALL ||
							ruleItems[i].item.coupledInventoryItem.nameKey == DIRECTORY_ALL ||
							ruleItems[i].item.coupledInventoryItem.nameKey == APPLICATION_ALL)
						{
							deleteList.addItem(ruleObject.ruleItems[i]);
							ruleObject.ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}
				}
			}
			
			protected function removeOtherDestinations():void // called when specific destinations are in rule and dropped network is "All Destination"
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(isDestinationRuleItem(ruleItems[i]))
						{
							deleteList.addItem(ruleItems[i]);
							ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}	
				}
			}
			
			protected function hasAllIType():Boolean // Checks whether rule has "All Information Types" or not.
			{
				return ruleHasAllIType(ruleObject);
			}
			
			public static function ruleHasAllIType(r:Rule):Boolean 
			{
				for each(var o:RuleItem in r.ruleItems)
				{
					if(o.item.coupledInventoryItem.nameKey == ITYPE_ALL)
						return true;
				}
				return false
			}
			
			protected function removeAllITypeItem():void //called when "All Information Type" is in rule and dropped network is a specific network.
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(ruleItems[i].item.coupledInventoryItem.nameKey == ITYPE_ALL)
						{
							deleteList.addItem(ruleItems[i]);
							ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}
				}
			}
			
			protected function removeOtherITypes():void // called when specific networks are in rule and dropped network is "All Information Types"
			{
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				var loop:Boolean = true;
				while (loop)
				{
					loop = false;
					for(var i:int = 0; i < ruleItems.length; i++)
					{
						if(isITypeRuleItem(ruleItems[i]))
						{
							deleteList.addItem(ruleItems[i]);
							ruleItems.removeItemAt(i);
							loop = true;
							break;
						}
					}
				}
			}
			
			protected function acceptDrop(highlight:Boolean = true): void
			{
				DragManager.showFeedback(DragManager.COPY);
				if (highlight)
				{
					highlightOn();
				}
				else
				{
					highlightOff();
				}
			}
			
			protected function rejectDrop(): void
			{
				DragManager.showFeedback(DragManager.NONE);
				highlightOff();
			}
			
			protected function highlightOn(): void
			{
				normalBorder.visible=false;
				highlightBorder.visible=true;
			}
			
			protected function highlightOff(): void
			{
				normalBorder.visible=true;
				highlightBorder.visible=false;	
			}
			
			protected function onDragEnter(dragEvent:DragEvent):void
			{
				if (dragEvent.dragInitiator is com.mydlp.ui.util.InventoryTree)
				{
					DragManager.acceptDragDrop(dragEvent.currentTarget as IUIComponent);
				}
			}
			
			protected function onDragOver(event:DragEvent):void
			{
				if (event.dragInitiator is com.mydlp.ui.util.InventoryTree)
				{
					droppedMatchers = new ArrayCollection();
					droppedSources = new ArrayCollection();
					droppedDestinations = new ArrayCollection();
					var treeItems:*;
					if(isDiscoveryTab)
						treeItems = FlexGlobals.topLevelApplication.discoveryContainer.inventoryTree.myInventoryTree.selectedItems;
					else
						treeItems = FlexGlobals.topLevelApplication.policyContainer.inventoryTree.myInventoryTree.selectedItems;
					if (isAllDroppable(treeItems) && checkConsistency(treeItems))
					{
						acceptDrop();
					}
					else
					{
						rejectDrop();
					}
				}
				else if (event.dragInitiator is RuleList)
				{
					// do nothing
				}
				else
				{
					rejectDrop();
				}
			}
			
			protected function checkConsistency(treeItems:*):Boolean //Controls whether dropped items consist both "All Network" and specific network
			{														// or both "All Information Types" and specific information types.
				groupDroppedItems(treeItems);
				if(isConsistentForSources() && isConsistentForMatchers() && isConsistentForDestinations())
					return true;
				return false;
			}
			
			protected function isConsistentForDestinations():Boolean // Controls whether dropped items consist both "All Network" and specific network
			{
				for each(var ri:InventoryItem in droppedSources)
				{
					if((ri.item.coupledInventoryItem.nameKey == DOMAIN_ALL || ri.item.coupledInventoryItem.nameKey == DIRECTORY_ALL || ri.item.coupledInventoryItem.nameKey == APPLICATION_ALL)
						&& droppedDestinations.length > 1)
						return false;
				}
				return true;
			}
			
			protected function isConsistentForSources():Boolean // Controls whether dropped items consist both "All Network" and specific network
			{
				for each(var ri:InventoryItem in droppedSources)
				{
					if(ri.item.coupledInventoryItem.nameKey == SOURCES_ALL && droppedSources.length > 1)
						return false;
				}
				return true;
			}
			
			protected function isConsistentForMatchers():Boolean //Controls whether dropped items consist both "All Information Types" and specific information types
			{
				for each(var ri:* in droppedMatchers)
				{
					if (ri is InventoryItem && ri.item.coupledInventoryItem.nameKey == ITYPE_ALL && droppedMatchers.length > 1)
						return false;
				}
				return true;
			}
			
			protected function groupDroppedItems(droppedItems:*):void // Group dropped items as Sources and matchers with the help of
			{															// "groupDroppedItem" function.
				for each(var item:* in droppedItems)
					groupDroppedItem(item);
			}
			
			protected function groupDroppedItem(droppedItem:*):void
			{
				if(droppedItem is InventoryItem)
				{
					if(isSourceItem(droppedItem.item))
						droppedSources.addItem(droppedItem);
					else if(droppedItem.item is InformationType)
						droppedMatchers.addItem(droppedItem);
					else if(droppedItem.item is Domain || droppedItem.item is FileSystemDirectory || droppedItem.item is ApplicationName)
						droppedDestinations.addItem(droppedItem);
					else
						throw new Error("unexpected type of item dropped");
				}
				else if (droppedItem is InventoryGroup)
				{
					if (droppedItem.itemType == InventoryGroup.TYPE_ITYPE)
					{
						droppedMatchers.addItem(droppedItem);
					}
				}
				else if(droppedItem is InventoryCategory)
				{
					var inventoryCategory:InventoryCategory = droppedItem as InventoryCategory;
					groupDroppedItems(inventoryCategory.children);
				}
			}
			
			protected function isDroppableForRemoteStorage(treeItem:*):Boolean
			{
				if(ruleObject is RemoteStorageRule &&
					(treeItem is RemoteStorageCIFS || treeItem is RemoteStorageDFS ||
						treeItem is RemoteStorageFTPFS || treeItem is RemoteStorageNFS ||
						treeItem is RemoteStorageSSHFS || treeItem is WebServer))
					return true;
				else
					return false;
			}
			
			protected function isAllDroppable(treeItems:*): Boolean
			{
				
				for each (var o:* in treeItems)
				{
					if (!isDroppable(o)) return false;
				}
				
				return true;
			}
			
			protected function isDroppable(treeItem:*): Boolean
			{
				if(treeItem is InventoryItem)
				{
					if ( treeItem.item is InformationType )
					{
						if(ruleObject is RemovableStorageRule ||
							ruleObject is WebRule ||
							ruleObject is MailRule ||
							ruleObject is ApiRule ||
							ruleObject is PrinterRule ||
							ruleObject is DiscoveryRule ||
							ruleObject is RemoteStorageRule)
							return true;
					}
					else if ( treeItem.item is Network )
					{
						if (treeItem.nameKey == SOURCES_ALL && !(ruleObject is RemoteStorageRule))
							return true;
						else if(ruleObject is WebRule ||
							ruleObject is RemovableStorageRule ||
							ruleObject is PrinterRule ||
							ruleObject is DiscoveryRule ||
							ruleObject is ApiRule ||
							ruleObject is RemovableStorageInboundRule ||
							ruleObject is RemovableStorageEncryptionRule ||
							ruleObject is ScreenshotRule)
							return true;
					}
					else if (treeItem.item is Domain)
					{
						if (treeItem.nameKey == DESTINATION_HASBCC) 
						{
							if (ruleObject is MailRule)
							{
								return true;
							}
							else
							{
								return false;
							}
						}
						else if(ruleObject is WebRule || ruleObject is MailRule)
						{
							return true;
						}
					}
					else if (treeItem.item is FileSystemDirectory)
					{
						if(ruleObject is DiscoveryRule)
						{
							return true;
						}
					}
					else if (treeItem.item is ApplicationName)
					{
						if(ruleObject is ScreenshotRule)
						{
							return true;
						}
					}
					else if ( treeItem.item is RuleUser  && !(ruleObject is RemoteStorageRule))
					{
						return true;
					}
					else if (isDroppableForRemoteStorage(treeItem.item))
						return true;
				}
				else if (treeItem is InventoryGroup)
				{
					if ( treeItem.itemType == InventoryGroup.TYPE_ITYPE )
					{
						if(ruleObject is RemovableStorageRule ||
							ruleObject is WebRule ||
							ruleObject is MailRule ||
							ruleObject is ApiRule ||
							ruleObject is PrinterRule ||
							ruleObject is DiscoveryRule ||
							ruleObject is RemoteStorageRule)
							return true;
					}
				}
				else if (treeItem is InventoryCategory)
				{
					var inventoryCategory:InventoryCategory = treeItem as InventoryCategory;
					return isAllDroppable(inventoryCategory.children);
				}
				
				return false;
			}
			
			public static function isDestinationApplicable(r:*): Boolean
			{
				if(r is WebRule || r is DiscoveryRule || r is MailRule || r is ScreenshotRule)
					return true;
				else return false;
			}
			public static function isMatcherApplicable(r:*):Boolean
			{
				if(r is WebRule || r is DiscoveryRule || r is MailRule || r is RemovableStorageRule || 
					r is ApiRule || r is PrinterRule || r is RemoteStorageRule)
					return true;
				else return false;
			}
			
			protected function onDragExit(event:DragEvent):void
			{
				rejectDrop();
			}
			
			protected var inventoryObjects:* = null;
			protected var inventoryObjectsIdx:uint = 0;
			protected var selectedFieldType:String = null;
			
			protected function onDragDrop(dragEvent:DragEvent):void
			{
				inventoryObjects = null;
				inventoryObjectsIdx = 0;
				selectedFieldType = null;
				
				if (dragEvent.dragInitiator is com.mydlp.ui.util.InventoryTree)
				{
					ruleContainer.ruleList.setAfterRefreshSelected(ruleObject);
					
					deleteList = new ArrayCollection();
					
					if(isDiscoveryTab)
						inventoryObjects = FlexGlobals.topLevelApplication.discoveryContainer.inventoryTree.myInventoryTree.selectedItems;
					else
						inventoryObjects = FlexGlobals.topLevelApplication.policyContainer.inventoryTree.myInventoryTree.selectedItems;
					
					continueDragDrop();
				}
				else if (dragEvent.dragInitiator is RuleList)
				{
					// do nothing
				}
			}
			
			protected function continueDragDrop(): void
			{
				callLater(continueDragDropF);
			}
			
			protected function continueDragDropF(): void
			{
				if (inventoryObjects == null || 
					inventoryObjectsIdx >= inventoryObjects.length)
				{
					finalizeDragDrop();
				}
				else
				{
					addDroppedObject(inventoryObjects[inventoryObjectsIdx] as InventoryBase);
					inventoryObjectsIdx++;
				}
			}
			
			protected var saveRuleItemInProg:Boolean = false;
			
			protected function finalizeDragDrop(): void
			{
				inventoryObjects = null;
				inventoryObjectsIdx = 0;
				selectedFieldType = null;
				droppedMatchers = new ArrayCollection();
				droppedSources = new ArrayCollection();
				droppedDestinations = new ArrayCollection();
				
				if (isPersistentObjectChanged(ruleObject, deleteList))
				{
					if (!saveRuleItemInProg)
					{
						re.saveRuleItemChanges(	
										ruleObject.id, 
										ruleToAddRefs(ruleObject),
										itemsToDelRefs(deleteList)
									);
						//invalidateProperties();
						//refresh();
						saveRuleItemInProg = true;
					}
				}
				else
				{
					saveChangesHandler(null);
				}
			}
			
			protected static function ruleToAddRefs(rule:Rule):ListCollectionView
			{
				var ret:ListCollectionView = new ArrayCollection();
				
				for each (var i:RuleItem in rule.ruleItems)
				{
					var o:Object = new Object();
					o["type"] = "RuleItem";
					if (isNaN((i as RuleItem).id))
					{
						o["id"] = null;
					}
					else
					{
						o["id"] = (i as RuleItem).id;
					}
					o["item_id"] = (i as RuleItem).item.id;
					o["ruleColumn"] = (i as RuleItem).ruleColumn;
					ret.addItem(o);
				}
				
				for each (var i2:RuleItemGroup in rule.ruleItemGroups)
				{
					var o2:Object = new Object();
					o2["type"] = "RuleItemGroup";
					if (isNaN((i2 as RuleItemGroup).id))
					{
						o2["id"] = null;
					}
					else
					{
						o2["id"] = (i2 as RuleItemGroup).id;
					}
					o2["group_id"] = (i2 as RuleItemGroup).group.id;
					ret.addItem(o2);
				}
				
				return ret;
			}
			
			protected static function itemsToDelRefs(list:ListCollectionView): ListCollectionView
			{
				var ret:ListCollectionView = new ArrayCollection();
				
				for each (var i:* in list)
				{
					var o:Object = new Object();
					if (i is RuleItem && !isNaN((i as RuleItem).id))
					{
						o["type"] = "RuleItem";
						o["id"] = (i as RuleItem).id;
					}
					else if (i is RuleItemGroup && !isNaN((i as RuleItemGroup).id))
					{
						o["type"] = "RuleItemGroup";
						o["id"] = (i as RuleItemGroup).id;
					}
					else
					{
						throw new Error("Unexpected type");
					}
					ret.addItem(o);
				}
				
				return ret;
			}
			
			protected function isPersistentObjectChanged(rule:Rule, deleteList:ListCollectionView): Boolean
			{
				if (deleteList != null && deleteList.length > 0)
				{
					return true;
				}
				
				if (!areListsEqual(rule.ruleItems, originalRuleItems))
				{
					return true;
				}
				
				if (!areListsEqual(rule.ruleItemGroups, originalRuleItemGroups))
				{
					return true;
				}
				
				return false;
			}
			
			protected static function areListsEqual(list1:ListCollectionView, list2:ListCollectionView): Boolean // sort of equal :)
			{
				if (list1 == null && list2 == null) return true;
				if (list1 == null || list2 == null) return false;
				
				if (list1.length != list2.length)
				{
					return false;
				}
				
				var targetList:ListCollectionView = new ArrayCollection();
				targetList.addAll(list2);
				
				for each (var o:* in list1)
				{
					if (!targetList.contains(o))
					{
						return false;
					}
					else
					{
						var idx:uint = targetList.getItemIndex(o);
						targetList.removeItemAt(idx);
					}
				}
			
				return true;
			}
			
			protected function addDroppedObject(inventoryObject:InventoryBase):void
			{
				if (inventoryObject is InventoryItem && !isDroppable(inventoryObject)) 
				{
					continueDragDrop();
					return;
				}
				
				if (inventoryObject is InventoryItem)
				{
					var inventoryItem:InventoryItem = inventoryObject as InventoryItem;
					addItemToRuleObject(inventoryItem.item);
				}
				else if (inventoryObject is InventoryGroup)
				{
					var inventoryGroup:InventoryGroup = inventoryObject as InventoryGroup;
					addGroupToRuleObject(inventoryGroup);
				}
				else if (inventoryObject is InventoryCategory)
				{
					var inventoryItems:ListCollectionView = resolveInvetoryItems(inventoryObject as InventoryCategory);
					for each (var o:* in inventoryItems)
					{
						inventoryObjects.push(o);
					}
					continueDragDrop();
				}
				else
					throw new Error("Unexpected inventory object");
			}
			
			protected function resolveInvetoryItems(category:InventoryCategory): ListCollectionView
			{
				var itemList:ListCollectionView = new ArrayCollection();
				for each (var o:* in category.children)
				{
					if (o is InventoryItem)
						itemList.addItem(o as InventoryItem);
					else if (o is InventoryGroup)
						itemList.addItem(o as InventoryGroup);
					else if (o is InventoryCategory)
						itemList.addAll(resolveInvetoryItems(o as InventoryCategory));
					else
						throw new Error("Unexpected inventory object");
				}
				return itemList;
			}
			
			protected function addGroupToRuleObject(sourceGroup:InventoryGroup):void
			{
				if (sourceGroup.itemType == InventoryGroup.TYPE_ITYPE)
				{
					if(hasAllIType())//if ruleObject has "All Information Types"
					{
							removeAllITypeItem();
					}
				}
				
				for each (var rig:RuleItemGroup in ruleObject.ruleItemGroups)
					if (rig.group.id == sourceGroup.id)
					{
						continueDragDrop();
						return;
					}
				
				var newItemGroup:RuleItemGroup = new RuleItemGroup();
				newItemGroup.group = sourceGroup;
				newItemGroup.rule = ruleObject;
				ruleObject.ruleItemGroups.addItem(newItemGroup);
				continueDragDrop();				
			}
			
			protected function doesNeedFieldSelection(sourceItem:Item): Boolean
			{
				return ruleObject is MailRule &&
					(
						(sourceItem is Domain && sourceItem.coupledInventoryItem.nameKey != DOMAIN_ALL)|| 
						sourceItem is RuleUser
					);
			}
			
			protected function addItemToRuleObject(sourceItem:Item):void
			{
				var selectionPopupOption:String = "none";
				
				if (doesNeedFieldSelection(sourceItem))
				{
					selectionPopupOption = "source_destination";
				}
				
				if ( selectionPopupOption == "none" )
				{
					saveRuleItem(sourceItem);
				}
				else
				{
					if (selectedFieldType == null)
					{
						var popup:RuleItemDNDDialog = InteractionUtil.newPopup(RuleItemDNDDialog) as RuleItemDNDDialog;
						popup.parentRuleBox = this;
						popup.sourceItem = sourceItem;
						popup.selectionOption = selectionPopupOption;
						popup.populate();
					}
					else
					{
						saveRuleItemWithFieldSelection(selectedFieldType, sourceItem);
					}
				}
			}
			
			public function saveRuleItem(sourceItem:Item): void
			{
				for each (var ri:RuleItem in ruleObject.ruleItems)
				{
					if (ri.item.id == sourceItem.id)
					{
						continueDragDrop();
						return;
					}
				}
				
				if(isSourceItem(sourceItem))
				{
					preDropSourceItem(sourceItem);
				}
				else if(isITypeItem(sourceItem))
				{
					preDropITypeItem(sourceItem);
				}
				else if(isDestinationItem(sourceItem))
				{
					preDropDestinationItem(sourceItem);
				}
				
				var newItem:RuleItem = new RuleItem();
				newItem.item = sourceItem;
				newItem.rule = ruleObject;
				
				// if we are here no selection required and happened, applying defaults
				if (sourceItem is Domain)
				{
					newItem.ruleColumn = RuleItem.COLUMN_NAME_DESTINATION;
				} 
				else if (sourceItem is RuleUser)
				{
					newItem.ruleColumn = RuleItem.COLUMN_NAME_SOURCE;
				}
				
				ruleObject.ruleItems.addItem(newItem);
				continueDragDrop();
			}
			
			public function canceledPopup(): void
			{
				finalizeDragDrop();
			}
			
			public function saveRuleItemWithFieldSelection(fieldType:String, sourceItem:Item): void
			{
				if (fieldType == RuleItem.COLUMN_NAME_SOURCE)
				{
					preDropSourceItem(sourceItem);
				}
				else if (fieldType == RuleItem.COLUMN_NAME_DESTINATION)
				{
					preDropDestinationItem(sourceItem);
				}
				else
				{
					throw new Error("Unexpected field type");
				}
				
				if (selectedFieldType == null)
				{
					selectedFieldType = fieldType;
				}
				
				for each (var ri:RuleItem in ruleObject.ruleItems)
				{
					if (ri.item.id == sourceItem.id && 
						doesNeedFieldSelection(sourceItem) &&
						ri.ruleColumn == fieldType)
					{
						continueDragDrop();
						return;
					}
				}
				
				var newItem:RuleItem = new RuleItem();
				newItem.item = sourceItem;
				newItem.rule = ruleObject;
				newItem.ruleColumn = fieldType;
				ruleObject.ruleItems.addItem(newItem);
				continueDragDrop();
			}
			
			protected function preDropSourceItem(sourceItem:Item): void
			{
				if(hasAllSources())//if ruleObject has "All Networks"
				{
					if(sourceItem.coupledInventoryItem.nameKey == SOURCES_ALL)//if dropped item is "All Networks"
						return;
					else
						removeAllSourcesItem();
				}
				else
				{
					if(sourceItem.coupledInventoryItem.nameKey == SOURCES_ALL)
						removeOtherSources();
				}
			}
			
			protected function preDropITypeItem(sourceItem:Item): void
			{
				if(hasAllIType())//if ruleObject has "All Information Types"
				{
					if(sourceItem.coupledInventoryItem.nameKey == ITYPE_ALL) //if dropped item is "All Information Types"
						return;
					else
						removeAllITypeItem();
				}
				else
				{
					if(sourceItem.coupledInventoryItem.nameKey == ITYPE_ALL)
						removeOtherITypes();
				}
			}
			
			protected function preDropDestinationItem(sourceItem:Item): void
			{
				if(hasAllDestination())//if ruleObject has "All Destinations"
				{
					if(sourceItem.coupledInventoryItem.nameKey == DOMAIN_ALL ||
						sourceItem.coupledInventoryItem.nameKey == DIRECTORY_ALL ||
						sourceItem.coupledInventoryItem.nameKey == APPLICATION_ALL)//if dropped item is "All Destinations"
						return;
					else
						removeAllDestinationItem();
				}
				else
				{
					if(sourceItem.coupledInventoryItem.nameKey == DOMAIN_ALL ||
						sourceItem.coupledInventoryItem.nameKey == DIRECTORY_ALL ||
						sourceItem.coupledInventoryItem.nameKey == APPLICATION_ALL)
						removeOtherDestinations();
				}
			}
			
			protected function saveChangesHandler(event:ResultEvent):void
			{
				saveRuleItemInProg = false;
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				highlightOff();
				var resultRule:Rule = null;
				if (event != null)
				{
					resultRule = event.result as Rule;
				}
				FlexGlobals.topLevelApplication.refreshRespectivelyRule(resultRule);
			}
			
			protected function onItemClickHandler(event:MouseEvent):void
			{
				var e:ItemClickEvent = new ItemClickEvent(ItemClickEvent.ITEM_CLICK, true);
				e.item = data;
				e.index = itemIndex;
				dispatchEvent(e);
			}
			
			protected function getRuleItemListState(riDP:ListCollectionView, isCollapse:Boolean) : String
			{
				if (riDP == null || riDP.length == 0)
				{
					return "noitem";
				}
				else
				{
					if (isCollapse) 
					{
						if (riDP.length == 1)
						{
							return "expand";
						}
						else
						{
							return "collapse";
						}
					}
					else
					{
						return "expand";
					}
				}
			}
			
			protected function isExpandCollapseEnabled(): Boolean
			{
				if (sourceDataProvider.length > 1)
				{
					return true;
				}
				if (matcherDataProvider.length > 1)
				{
					return true;
				}
				if (destinationDataProvider.length > 1)
				{
					return true;
				}
				return false;
			}
			
			protected function setNameLabel(): void
			{
				if (ruleObject.label == null || ruleObject.label.length == 0) return;
				var ruleObjectLabel:String = ruleObject.label;
				if (ruleObjectLabel.length > 22)
				{
					nameLabel.toolTip = ruleObjectLabel;
					nameLabel.text = ruleObjectLabel.substr(0, 15) + "...";
				}
				else
				{
					nameLabel.text = ruleObjectLabel;
				}
			}
			
			protected function scheduleButtonHandler(event:MouseEvent):void
			{
				var popup:SchedulePopup = InteractionUtil.newPopup(SchedulePopup) as SchedulePopup;
				popup.ruleSchedule = ruleObject.ruleSchedule;
				popup.populate();
			}
			
			protected function startButtonClickHandler(event:MouseEvent):void
			{
				de.startDiscoveryOnDemand(ruleObject.id);
				if (isDiscoveryTab)
				{
					discoveryRuleContainer.refreshRules();
				}
			}
	
			protected function isPlayButtonEnabled():Boolean
			{
				if(!(ruleObject.enabled))
					return false;
				if(discoveryReport == null)
					return true;
				else if(discoveryReport.status == DiscoveryReport.STATUS_STOPPED || discoveryReport.status == DiscoveryReport.STATUS_ERROR)
					return true;
				else
					return false;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Boolean id="isDiscoveryTab"/>
		<fx:Boolean id="collapse">true</fx:Boolean>
		<fx:Boolean id="expandCollapseButtonEnabled">false</fx:Boolean>
		<fx:Class id="icon24" />
		<fx:Class id="icon32" />
		<my:remote id="re" destination="ruleBRS">
			<my:method name="saveRuleItemChanges" result="saveChangesHandler(event)"/>
			<my:method name="getDiscoveryStatus" result="getDiscoveryStatusHandler(event)"/>
		</my:remote>
		<my:remote id="de" destination="discoveryBRS" >
			<my:method name="startDiscoveryOnDemand"/>
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="disabled"/>
	</s:states>
	
	<s:Rect
			left="0" right="0" top="0" bottom="0" >
		<s:fill>
			<s:SolidColor color="0xFFFFFF"
						  color.selected="0xCEDBEF"
						  color.hovered="0xDEEBFF" 
						  alpha="1"  />
		</s:fill>
	</s:Rect>
	
	<s:Rect id="normalBorder" left="0" right="0" top="0" bottom="0" visible="true">
		<s:stroke>
			<s:SolidColorStroke color="0xAEBBCF" alpha="0.3" weight="2"/>
		</s:stroke>
	</s:Rect>
	
	
	<s:Rect id="highlightBorder" left="0" right="0" top="0" bottom="0" visible="false">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="2">
				<s:GradientEntry color="0x00679E"/>
				<s:GradientEntry color="0x33A0D2"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<s:Group top="2" bottom="2" left="2" right="2">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" gap="0"/>
		</s:layout>
		
		<s:Group id="labelBox" width="160" toolTip="{ruleObject.description}">
			<s:layout>
				<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"
								  paddingLeft="10"/>
			</s:layout>
			<s:Group width="100%">
				<s:layout>
					<s:HorizontalLayout gap="6" verticalAlign="middle"/>
				</s:layout>
				<s:HGroup width="32" verticalAlign="middle" horizontalAlign="center"
						  paddingTop="1" paddingBottom="1">
					<s:BitmapImage id="ruleTypeImage" 
								   source.selected="{icon32}"
								   source="{icon24}"/>
				</s:HGroup>
				<s:Label id="nameLabel" width="100%"/>
			</s:Group>
			
			<s:Group includeIn="selected">
				<s:layout>
					<s:HorizontalLayout />
				</s:layout>
				
				<s:Button includeInLayout="{expandCollapseButtonEnabled}" visible="{expandCollapseButtonEnabled}" 
						  styleName="{this.collapse ? 'expandButtonStyle' : 'collapseButtonStyle'}" 
						  toolTip="{
						  this.collapse ?
						  LangUtil.getString('messages', 'rulebox.expandButton.tooltip.label')
						  : LangUtil.getString('messages', 'rulebox.collapseButton.tooltip.label')
						  }"
						  click="{changeCollapse()}"/>
				<s:Button styleName="copyButtonStyle" 
						  toolTip="@Resource(bundle = 'messages', key = 'rulebox.copyButton.tooltip.label')"
						  click="{	var clone:Rule = ReflectionUtil.cloneDomainObject(ruleObject);
						  clone.priority -= 50;
						  InteractionUtil.newEditDialog(clone)}" />
				<s:Button styleName="editButtonStyle" 
						  toolTip="@Resource(bundle = 'messages', key = 'rulebox.editButton.tooltip.label')"
						  click="{InteractionUtil.newEditDialog(ruleObject)}" />
				<s:Button styleName="removeButtonStyle" 
						  toolTip="@Resource(bundle = 'messages', key = 'rulebox.removeButton.tooltip.label')"
						  click="{InteractionUtil.newDeleteDialog(ruleObject)}" />
				<s:Button styleName="disableButton16Style" 
						  toolTip="@Resource(bundle = 'messages', key = 'rulebox.disableButton.tooltip.label')"
						  visible="{ruleObject.enabled}"
						  click="{ruleObject.enabled = false; ruleObject.save();}"/>
			</s:Group>
		</s:Group>
		
		<s:Group width="24" height="24" />
		
		<s:HGroup id="discoveryGroup" visible="{isDiscoveryTab}" includeInLayout="{isDiscoveryTab}" height="100%">
		
			<rule:RSpacer height="100%"/>
			
			<s:Group width="36" height="100%">
				<s:layout>
					<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
				</s:layout>
				
				<s:Button skinClass="com.mydlp.ui.skin.CalendarBitmapButton24Skin" click="scheduleButtonHandler(event)"
						  enabled="{ruleObject.enabled}"/>
			</s:Group>
			
			<rule:RSpacer height="100%"/>
			
			<s:Group width="32" height="100%">
				<s:layout>
					<s:HorizontalLayout gap="5" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				
				<s:Button id="playButton" skinClass="com.mydlp.ui.skin.PlayBitmapButton16Skin" click="startButtonClickHandler(event)"/>
			</s:Group>
			
		</s:HGroup>
		
		<rule:RSpacer />
		

		<rule:RuleItemBox width="{isDiscoveryTab ? discoveryRuleContainer.sourceWidth : ruleContainer.sourceWidth}"
						  isDiscoveryTab="{isDiscoveryTab}"
						  listDataProvider="{sourceDataProvider}"
						  itemLabel="@Resource(bundle = 'messages', key = 'rulebox.ruleitembox.sources.itemLabel')"
						  currentState="{getRuleItemListState(sourceDataProvider, collapse)}" />
		
		
		<s:Group width="{(isDiscoveryTab ? discoveryRuleContainer.destinationWidth : ruleContainer.destinationWidth) + 8}" height="100%" 
				 visible="{!isDestinationApplicable(ruleObject)}" 
				 includeInLayout="{!isDestinationApplicable(ruleObject)}">
			<s:Rect left="0" right="0" top="0" bottom="0" >
				<s:fill>
					<s:SolidColor color="0xAEBBCF" alpha="0.3"  />
				</s:fill>
			</s:Rect>
		</s:Group>
		
		
		<s:Group height="100%"
				 visible="{isDestinationApplicable(ruleObject)}" 
				 includeInLayout="{isDestinationApplicable(ruleObject)}">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			<rule:RSpacer />
			
			<rule:RuleItemBox width="{isDiscoveryTab ? discoveryRuleContainer.destinationWidth : ruleContainer.destinationWidth}"
							  isDiscoveryTab="{isDiscoveryTab}"
							  listDataProvider="{destinationDataProvider}"
							  itemLabel="@Resource(bundle = 'messages', key = 'rulebox.ruleitembox.destinations.itemLabel')"
							  currentState="{getRuleItemListState(destinationDataProvider, collapse)}"/>
		</s:Group> 
		
		<s:Group width="{(isDiscoveryTab ? discoveryRuleContainer.informationTypeWidth : ruleContainer.informationTypeWidth) + 16}" height="100%" 
				 visible="{!isMatcherApplicable(ruleObject)}" 
				 includeInLayout="{!isMatcherApplicable(ruleObject)}">
			<s:Rect left="0" right="0" top="0" bottom="0" >
				<s:fill>
					<s:SolidColor color="0xAEBBCF" alpha="0.3"  />
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<s:Group height="100%"
				 visible="{isMatcherApplicable(ruleObject)}" 
				 includeInLayout="{isMatcherApplicable(ruleObject)}">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			<rule:RSpacer />
			<rule:RuleItemBox width="{isDiscoveryTab ? discoveryRuleContainer.informationTypeWidth : ruleContainer.informationTypeWidth}"
							  listDataProvider="{matcherDataProvider}"
							  isDiscoveryTab="{isDiscoveryTab}"
							  itemLabel="@Resource(bundle = 'messages', key = 'rulebox.ruleitembox.itypes.itemLabel')"
							  currentState="{getRuleItemListState(matcherDataProvider, collapse)}" />
			<rule:RSpacer />
		</s:Group>
		
		<rule:ActionBox id="actionBox" width="{isDiscoveryTab ? discoveryRuleContainer.actionWidth : ruleContainer.actionWidth}" 
						ruleObject="@{ruleObject}" 
						currentState="{this.currentState}"/>
		
	</s:Group>
	
	<s:Rect left="0" right="0" top="0" bottom="0" 
			visible="{! ruleObject.enabled}" includeInLayout="{! ruleObject.enabled}" >
		<s:fill>
			<s:SolidColor color="0xDDDDDD" alpha="0.5" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup top="0" bottom="0" left="162" width="24" verticalAlign="middle" horizontalAlign="center">
		<s:Button styleName="disableButton24Style" 
				  visible="{! ruleObject.enabled}" includeInLayout="{! ruleObject.enabled}"
				  click="{ruleObject.enabled = true; ruleObject.save();}" 
				  toolTip="@Resource(bundle = 'messages', key = 'rulebox.enableButton.tooltip.label')"/>
	</s:HGroup>
	
</s:ItemRenderer>
