<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				autoDrawBackground="false"
				creationComplete="onCreationComplete(event)" 
				xmlns:util="com.mydlp.ui.util.*" 
				dragEnter="onDragEnter(event)"
				dragOver="onDragOver(event)"
				dragExit="onDragExit(event)"
				dragDrop="onDragDrop(event)"
				>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.EndpointRule;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.PrinterRule;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.List;
			
			[Bindable]
			public var ruleObject:* = null;
			
			[Embed('/assets/icons/32x32/wireless.png')]
			public static const webRuleIcon:Class;
			
			[Embed('/assets/icons/32x32/mail.png')]
			public static const mailRuleIcon:Class;
			
			[Embed('/assets/icons/32x32/computer.png')]
			public static const endpointRuleIcon:Class;
			
			[Embed('/assets/icons/32x32/print.png')]
			public static const printerRuleIcon:Class;
			
			[Bindable]
			protected var sourceDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var matcherDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var ruleList:List = FlexGlobals.topLevelApplication.ruleContainer.ruleList;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				if (data is WebRule)
				{
					ruleTypeImage.source = webRuleIcon;
				}
				else if (data is MailRule)
				{
					ruleTypeImage.source = mailRuleIcon;
				}
				else if (data is EndpointRule)
				{
					ruleTypeImage.source = endpointRuleIcon;
				}
				else if (data is PrinterRule)
				{
					ruleTypeImage.source = printerRuleIcon;
				}
				else
					throw new Error("Unknown rule type;");
				
				ruleObject = data;
				refresh();
			}
			
			public function refreshDataProviders(): void
			{
				var sourceDataProvider1:ArrayCollection = new ArrayCollection();
				var matcherDataProvider1:ArrayCollection = new ArrayCollection();
				
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				for each (var ruleItem:* in ruleItems)
				{
					if (ruleItem.item is Network)
						sourceDataProvider1.addItem(ruleItem);
					else if (ruleItem.item is InformationType)
						matcherDataProvider1.addItem(ruleItem);
				}
				sourceDataProvider = sourceDataProvider1;
				matcherDataProvider = matcherDataProvider1;
			}
			
			public function refresh():void
			{
				if (ruleObject == null) return;
				invalidateDisplayList();
				refreshDataProviders();
				validateNow();
			}
			
			protected function acceptDrop(): void
			{
				DragManager.showFeedback(DragManager.COPY);
				highlightOn();
			}
			
			protected function rejectDrop(): void
			{
				DragManager.showFeedback(DragManager.NONE);
				highlightOff();
			}
			
			protected function highlightOn(): void
			{
				normalBorder.visible=false;
				highlightBorder.visible=true;	
			}
			
			protected function highlightOff(): void
			{
				normalBorder.visible=true;
				highlightBorder.visible=false;	
			}
			
			protected function onDragEnter(dragEvent:DragEvent):void
			{
				DragManager.acceptDragDrop(dragEvent.currentTarget as IUIComponent);
			}
			
			protected function onDragOver(event:DragEvent):void
			{
				var treeItems:* = FlexGlobals.topLevelApplication.inventoryTree.selectedItems;
				if (isAllDroppable(treeItems))
					acceptDrop();
				else
					rejectDrop();
			}
			
			protected function isAllDroppable(treeItems:*): Boolean
			{
				for each (var o:* in treeItems)
				{
					if (!isDroppable(o)) return false;
				}
				
				return true;
			}
			
			protected function isDroppable(treeItem:*): Boolean
			{
				if(treeItem is InventoryItem)
				{
					if (treeItem.item is InformationType)
						return true;
					else if ( treeItem.item is Network && 
						(	ruleObject is WebRule || 
							ruleObject is EndpointRule ||
							ruleObject is PrinterRule
							) )
						return true;
				}
				else if (treeItem is InventoryCategory)
				{
					var inventoryCategory:InventoryCategory = treeItem as InventoryCategory;
					return isAllDroppable(inventoryCategory.children);
				}
				
				return false;
			}
			
			protected function onDragExit(event:DragEvent):void
			{
				rejectDrop();    		
			}
			
			protected function onDragDrop(dragEvent:DragEvent):void
			{
				var inventoryObjects:* = FlexGlobals.topLevelApplication.inventoryTree.selectedItems;
				for each (var o:* in inventoryObjects)
					addDroppedObject(o as InventoryBase);
				re.save(ruleObject);
				highlightOff();
			}
			
			protected function addDroppedObject(inventoryObject:InventoryBase):void
			{
				if (!isDroppable(inventoryObject)) return;
				
				if (inventoryObject is InventoryItem)
				{
					var inventoryItem:InventoryItem = inventoryObject as InventoryItem;
					addRuleItemObject(inventoryItem.item);
				}
				else if (inventoryObject is InventoryCategory)
				{
					var inventoryItems:ListCollectionView = resolveInvetoryItems(inventoryObject as InventoryCategory);
					for each (var o:* in inventoryItems)
					{
						var inventoryItem2:InventoryItem = o as InventoryItem;
						addRuleItemObject(inventoryItem2.item);
					}
				}
				else
					throw new Error("Unexpected inventory object");
			}
			
			protected function resolveInvetoryItems(category:InventoryCategory): ListCollectionView
			{
				var itemList:ListCollectionView = new ArrayCollection();
				for each (var o:* in category.children)
				{
					if (o is InventoryItem)
						itemList.addItem(o as InventoryItem);
					else if (o is InventoryCategory)
						itemList.addAll(resolveInvetoryItems(o as InventoryCategory));
					else
						throw new Error("Unexpected inventory object");
				}
				return itemList;
			}
			
			protected function addRuleItemObject(sourceItem:Item):void
			{
				for each (var ri:RuleItem in ruleObject.ruleItems)
					if (ri.item.id == sourceItem.id)
						return;
				
				var newItem:RuleItem = new RuleItem();
				newItem.item = sourceItem;
				newItem.rule = ruleObject;
				ruleObject.ruleItems.addItem(newItem);
			}
			
			protected function changeHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="save" result="changeHandler(event)"/>
			<my:method name="ruleUp" result="changeHandler(event)"/>
			<my:method name="ruleDown" result="changeHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="disabled"/>
	</s:states>
	
	<s:Rect includeIn="hovered, selected"
		left="0" right="0" top="0" bottom="0" >
		<s:fill>
			<s:SolidColor color.selected="0xCEDBEF"
						  color.hovered="0xDEEBFF" 
						  alpha="1"  />
		</s:fill>
	</s:Rect>
	
	<s:Rect id="normalBorder" left="0" right="0" top="0" bottom="0" visible="true">
		<s:stroke>
			<s:SolidColorStroke color="0xAEBBCF" alpha="0.3" weight="3"/>
		</s:stroke>
	</s:Rect>
	
	<s:Rect id="highlightBorder" left="0" right="0" top="0" bottom="0" visible="false">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="3">
				<s:GradientEntry color="#fabe00"/>
				<s:GradientEntry color="#e17b00"/>
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<s:Group top="3" bottom="3" left="3" right="3">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle"/>
		</s:layout>
		
		<s:Group id="labelBox" width="160" toolTip="{ruleObject.description}">
			<s:layout>
				<s:VerticalLayout horizontalAlign="left" verticalAlign="middle"
								  paddingLeft="10"
								  paddingTop="2" 
								  paddingBottom="2"/>
			</s:layout>
			<s:Group>
				<s:layout>
					<s:HorizontalLayout gap="6" verticalAlign="middle"/>
				</s:layout>
				<s:BitmapImage id="ruleTypeImage" />
				<s:Label id="nameLabel" text="{ruleObject.label}" maxWidth="110"/>
			</s:Group>
			
			<s:Group includeIn="selected">
				<s:layout>
					<s:HorizontalLayout gap="2"/>
				</s:layout>
				
				<s:Button styleName="upButtonStyle" 
						  enabled="{itemIndex != 0}"
						  click="{re.ruleUp(ruleObject)}"/>
				<s:Button styleName="downButtonStyle" 
						  enabled="{itemIndex != ruleList.dataProvider.length - 1}"
						  click="{re.ruleDown(ruleObject)}"/>
				<s:Button styleName="copyButtonStyle"
						  click="{	var clone:Rule = ReflectionUtil.cloneDomainObject(ruleObject);
						  clone.priority -= 50;
						  InteractionUtil.newEditDialog(clone)}" />
				<s:Button styleName="editButtonStyle" 
						  click="{InteractionUtil.newEditDialog(ruleObject)}" />
				<s:Button styleName="removeButtonStyle" 
						  click="{InteractionUtil.newDeleteDialog(ruleObject)}" />
				<s:Button styleName="disableButton16Style"
						  visible="{ruleObject.enabled}"
						  click="{ruleObject.enabled = false; re.save(ruleObject);}"/>
			</s:Group>
		</s:Group>
		
		<s:Button styleName="disableButton32Style" visible="{! ruleObject.enabled}"
				  click="{ruleObject.enabled = true; re.save(ruleObject);}"/>
		
		<rule:RSpacer />
		
		<rule:RuleItemBox width="260"
						  listDataProvider="{sourceDataProvider}"
						  currentState="{sourceDataProvider.length == 0 ? 'noitem' : 'normal'}" />
		
		<rule:RSpacer />
		
		<rule:RuleItemBox width="260"
						  listDataProvider="{matcherDataProvider}"
						  currentState="{matcherDataProvider.length == 0 ? 'noitem' : 'normal'}" />
		
		<rule:RSpacer />
		
		<rule:ActionBox id="actionBox" width="150" 
						ruleObject="@{ruleObject}" 
						currentState="{this.currentState}"
						isReadOnly="{ruleObject is PrinterRule}"/>
		
	</s:Group>
</s:ItemRenderer>
