<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:rule="com.mydlp.ui.widget.policy.rule.*"
				xmlns:my="http://www.mydlp.com/flex/my" 
				autoDrawBackground="true"
				creationComplete="onCreationComplete(event)" 
				xmlns:util="com.mydlp.ui.util.*" 
				dragEnter="onDragEnter(event)"
				dragDrop="onDragDrop(event)"
				>
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.EndpointRule;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryCategory;
			import com.mydlp.ui.domain.Item;
			import com.mydlp.ui.domain.MailRule;
			import com.mydlp.ui.domain.Network;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.WebRule;
			import com.mydlp.ui.util.InteractionUtil;
			import com.mydlp.ui.util.ReflectionUtil;
			
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Application;
			import spark.components.List;
			
			[Bindable]
			public var ruleObject:* = null;
			
			[Bindable]
			protected var sourceDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var matcherDataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var ruleList:List = FlexGlobals.topLevelApplication.ruleContainer.ruleList;
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				if (data is WebRule)
				{
					currentState = "webRule";
				}
				else if (data is MailRule)
				{
					currentState = "mailRule";
				}
				else if (data is EndpointRule)
				{
					currentState = "endpointRule";
				}
				else
					throw new Error("Unknown rule type;");
				
				ruleObject = data;
				refresh();
			}
			
			public function refreshDataProviders(): void
			{
				var sourceDataProvider1:ArrayCollection = new ArrayCollection();
				var matcherDataProvider1:ArrayCollection = new ArrayCollection();
				
				var ruleItems:ListCollectionView = ruleObject.ruleItems;
				for each (var ruleItem:* in ruleItems)
				{
					if (ruleItem.item is Network)
						sourceDataProvider1.addItem(ruleItem);
					else if (ruleItem.item is InformationType)
						matcherDataProvider1.addItem(ruleItem);
				}
				
				sourceDataProvider = sourceDataProvider1;
				matcherDataProvider = matcherDataProvider1;
				
				//sourceList.invalidateList();
				//matcherList.invalidateList();
			}
			
			public function refresh():void
			{
				if (ruleObject == null) return;
				invalidateDisplayList();
				refreshDataProviders();
				validateNow();
			}
			
			protected function onDragEnter(dragEvent:DragEvent):void
			{
				var dropTarget:IUIComponent = dragEvent.currentTarget as IUIComponent;
				var dragInitiator:IUIComponent = dragEvent.dragInitiator;
				
				if(FlexGlobals.topLevelApplication.inventoryTree.selectedItem is InventoryCategory)
					DragManager.showFeedback(DragManager.NONE);
				else if(FlexGlobals.topLevelApplication.inventoryTree.selectedItem.item is Network && this.currentState != "webRule")
					DragManager.showFeedback(DragManager.NONE);
				else
					DragManager.acceptDragDrop(dropTarget);
			}
			
			protected function onDragDrop(dragEvent:DragEvent):void
			{
				var dragSource:DragSource = dragEvent.dragSource;
				var dragInitiator:IUIComponent = dragEvent.dragInitiator;
				var dropTarget:Object = dragEvent.currentTarget;
				DragManager.showFeedback(DragManager.COPY);
				
				var sourceItem:Item = FlexGlobals.topLevelApplication.inventoryTree.selectedItem.item;
				
				if(sourceItem is Network && (this.currentState == "webRule" ))
					saveDroppedObject(sourceItem);
				else if(sourceItem is InformationType)
					saveDroppedObject(sourceItem);
			}
			
			protected function saveDroppedObject(sourceItem:Item):void
			{
				var newItem:RuleItem = new RuleItem();
				newItem.item = sourceItem;
				newItem.rule = ruleObject;
				ruleObject.ruleItems.addItem(newItem);
				re.save(ruleObject);
			}
			
			protected function changeHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<my:remote id="re" destination="ruleBRS">
			<my:method name="save" result="changeHandler(event)"/>
			<my:method name="ruleUp" result="changeHandler(event)"/>
			<my:method name="ruleDown" result="changeHandler(event)"/>
		</my:remote>
	</fx:Declarations>
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<s:states>
		<s:State name="defaultState"/>
		<s:State name="webRule"/>
		<s:State name="mailRule"/>
		<s:State name="endpointRule"/>
	</s:states>
	
	<s:SkinnableContainer id="labelBox" width="125" height="100%">
		<s:layout>
			<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" gap="2"
							  paddingTop="5" paddingBottom="5"/>
		</s:layout>
		<s:BitmapImage includeIn="webRule" source="@Embed('/assets/icons/32x32/wireless.png')"/>
		<s:BitmapImage includeIn="mailRule" source="@Embed('/assets/icons/32x32/mail.png')"/>
		<s:BitmapImage includeIn="endpointRule" source="@Embed('/assets/icons/32x32/computer.png')"/>
		<s:Label id="nameLabel" text="{ruleObject.label}" maxWidth="110"/>
		<s:Spacer height="10"/>
		<!--
		TODO: Below statemente should be refined.
		-->
		<s:Group visible="{ruleList.selectedItem == null ? false : 
				 ruleObject.id == ruleList.selectedItem.id}">
			<s:layout>
				<s:HorizontalLayout gap="2"/>
			</s:layout>
			
			<s:Button styleName="upButtonStyle" 
					  enabled="{itemIndex != 0}"
					  click="{re.ruleUp(ruleObject)}"/>
			<s:Button styleName="downButtonStyle" 
					  enabled="{itemIndex != ruleList.dataProvider.length - 1}"
					  click="{re.ruleDown(ruleObject)}"/>
			
			<s:Button styleName="copyButtonStyle"
					  click="{	var clone:Rule = ReflectionUtil.cloneDomainObject(ruleObject);
					  clone.priority -= 10;
					  InteractionUtil.newEditDialog(clone)}" />
			<s:Button styleName="editButtonStyle" 
					  click="{InteractionUtil.newEditDialog(ruleObject)}" />
			<s:Button styleName="removeButtonStyle" 
					  click="{InteractionUtil.newDeleteDialog(ruleObject)}" />
		</s:Group>
		
		
	</s:SkinnableContainer>
	
	<util:MyList id="sourceList" includeIn="webRule" 
					   width="210" height="100%"
					   dataProvider="{sourceDataProvider}"
					   itemRenderer="com.mydlp.ui.widget.policy.rule.RuleItemRenderer"
					   />
	
	<util:MyList id="matcherList" 
					   width="210" height="100%"
					   dataProvider="{matcherDataProvider}"
					   itemRenderer="com.mydlp.ui.widget.policy.rule.RuleItemRenderer"
					   />
	
	<rule:ActionBox id="actionBox" width="150" height="100%" actionBoxRuleObject="@{ruleObject}" 
					currentState="{ruleList.selectedItem.id == ruleObject.id ? 'onClick' : 'default'}"/>
	
</s:ItemRenderer>
