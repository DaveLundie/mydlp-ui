<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:api="com.mydlp.ui.api.*"
			   xmlns:my="http://www.mydlp.com/flex/my"
			   xmlns:inventory="com.mydlp.ui.widget.policy.inventory.*"
			   xmlns:rule="com.mydlp.ui.widget.policy.rule.*" 
			   xmlns:option="com.mydlp.ui.widget.option.*" 
			   xmlns:objects="com.mydlp.ui.widget.objects.*"
			   xmlns:toolbar="com.mydlp.ui.widget.toolbar.*"
			   xmlns:log="com.mydlp.ui.widget.log.*" 
			   xmlns:dashboard="com.mydlp.ui.widget.dashboard.*"
			   xmlns:revision="com.mydlp.ui.widget.revision.*"
			   height="100%" width="100%"
			   preloader="MainPreloader"
			   applicationComplete="onCreationComplete(event)" 
			   xmlns:endpoint="com.mydlp.ui.widget.endpoint.*"
			   skinClass="com.mydlp.ui.skin.MainSkin"
			   >
	<fx:Style source="/assets/style/general.css" />
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.ADDomain;
			import com.mydlp.ui.domain.ADDomainAlias;
			import com.mydlp.ui.domain.ADDomainItem;
			import com.mydlp.ui.domain.ADDomainUserAlias;
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.Config;
			import com.mydlp.ui.domain.CustomAction;
			import com.mydlp.ui.domain.DataFormat;
			import com.mydlp.ui.domain.DocumentDatabase;
			import com.mydlp.ui.domain.InformationType;
			import com.mydlp.ui.domain.InventoryBase;
			import com.mydlp.ui.domain.InventoryItem;
			import com.mydlp.ui.domain.LicenseInformation;
			import com.mydlp.ui.domain.RDBMSConnection;
			import com.mydlp.ui.domain.RegularExpressionGroup;
			import com.mydlp.ui.domain.Rule;
			import com.mydlp.ui.domain.RuleItem;
			import com.mydlp.ui.domain.USBDevice;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.dashboard.DashboardContainer;
			import com.mydlp.ui.widget.dashboard.NoLicenseDashboardContainer;
			import com.mydlp.ui.widget.endpoint.EndpointStatusContainer;
			import com.mydlp.ui.widget.log.LogContainer;
			import com.mydlp.ui.widget.objects.ObjectsContainer;
			import com.mydlp.ui.widget.option.OptionContainer;
			import com.mydlp.ui.widget.policy.PolicyContainer;
			import com.mydlp.ui.widget.policy.inventory.InventoryTree;
			import com.mydlp.ui.widget.policy.rule.RuleContainer;
			import com.mydlp.ui.widget.revision.RevisionContainer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.dphibernate.rpc.HibernateManaged;
			
			import spark.components.NavigatorContent;
			import spark.components.TitleWindow;
			
			public var currentPopup:TitleWindow = null;
			
			private var activityTimeout:uint;
			
			private var syncTimeout:uint;
			
			protected var isUserActive:Boolean = false;
			
			protected var isStartup:Boolean = true;
			
			public var temporaryWorkaroundSelectedUserRole:AuthSecurityRole;
			
			public var notifiedUsers:ArrayCollection = new ArrayCollection;
			
			public var ruleLabels:Object = new Object();
			public var itypeLabels:Object = new Object();
			
			protected var rulesList:ListCollectionView;
			
			protected var inventoryList:Object;
			protected var inventoryList2:Object;
			
			[Bindable]
			public var dashboardContainer:DashboardContainer = null;
			[Bindale]
			public var noLicenseDashboardContainer:NoLicenseDashboardContainer = null;
			[Bindable]
			public var policyContainer:PolicyContainer = null;
			[Bindable]
			public var ruleContainer:RuleContainer = null;
			[Bindable]
			public var inventoryTree:InventoryTree = null;
			[Bindable]
			public var discoveryContainer:PolicyContainer = null;
			[Bindable]
			public var ruleContainerDiscovery:RuleContainer = null;
			[Bindable]
			public var inventoryTreeDiscovery:InventoryTree = null;
			[Bindable]
			public var objectsContainer:ObjectsContainer = null;
			[Bindable] 
			public var optionContainer:OptionContainer = null;
			[Bindable]
			public var logContainer:LogContainer = null;
			[Bindable]
			public var endpointStatusContainer:EndpointStatusContainer = null;
			[Bindable] 
			public var revisionContainer:RevisionContainer = null;
			
			protected var disableScreenTimer:Timer = null;
			
			protected var enableScreenTimer:Timer = null;
			
			public function disableScreen(): void
			{
				this.enabled = false;
				this.mouseEnabled = false;
				workingMessage.visible=true;
				workingMessage.includeInLayout=true;
				
				if (!greyoutLayer.visible && disableScreenTimer == null)
				{
					disableScreenTimer = new Timer(1500, 1);
					disableScreenTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onDisableScreenTimerComplete);
					disableScreenTimer.start();
				}
				if (enableScreenTimer != null)
				{
					enableScreenTimer.stop();
					enableScreenTimer = null;
				}
			}
			
			public function enableScreen(): void
			{
				if (disableScreenTimer != null)
				{
					disableScreenTimer.stop();
					disableScreenTimer = null;
				}
				if (enableScreenTimer != null)
				{
					enableScreenTimer.stop();
					enableScreenTimer = null;
				}
				enableScreenTimer = new Timer(500, 1);
				enableScreenTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onEnableScreenTimerComplete);
				enableScreenTimer.start();
				
				if (! greyoutLayer.visible )
				{
					this.enabled = true;
					this.mouseEnabled = true;
					workingMessage.visible=false;
					workingMessage.includeInLayout=false;
				}
			}
			
			public function onDisableScreenTimerComplete(event:TimerEvent):void
			{
				greyoutLayer.visible=true;
				greyoutLayer.includeInLayout=true;
			}
			
			public function onEnableScreenTimerComplete(event:TimerEvent):void
			{
				this.enabled = true;
				this.mouseEnabled = true;
				workingMessage.visible=false;
				workingMessage.includeInLayout=false;
				greyoutLayer.visible=false;
				greyoutLayer.includeInLayout=false;
			}
			
			protected function resetAutoLogout():void
			{
				clearTimeout(activityTimeout);
				var delay:Number = 60*15*1000;
				activityTimeout = setTimeout(doLogout, delay);
			}
			
			protected function doLogout():void
			{
				navigateToURL(new URLRequest ('j_spring_security_logout'), '_self');		
			}
			
			protected function handleUserActivity(event:Event):void
			{
				isUserActive = true;
				resetAutoLogout();
			}
			
			protected function sendSyncPacket(event:TimerEvent):void
			{
				if(isUserActive)
					genericRE.sync();
				else
					syncTimeIntervalHandler();
				isUserActive = false;
			}
			
			protected function syncTimeIntervalHandler():void
			{
				var timer:Timer = new Timer(1000*60, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, sendSyncPacket);
				timer.start();
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				
				
				HibernateManaged.defaultHibernateService = this.dataAccessService;
				
				if(stage != null)
				{
					stage.addEventListener(MouseEvent.MOUSE_MOVE, handleUserActivity);
					stage.addEventListener(MouseEvent.CLICK, handleUserActivity);
					stage.addEventListener(KeyboardEvent.KEY_DOWN, handleUserActivity);
				}
				resetAutoLogout();
				syncTimeIntervalHandler();
				
				licenseRE.getLicense();
			}
			
			public function hasRole(roleName:String): Boolean
			{
				if (user == null || ! user is AuthUser)
					return false;
				return (user as AuthUser).hasRole(roleName);
			}
			
			public function isSameUserWithLoginUser(targetUser:AuthUser):Boolean
			{
				if(user.email == targetUser.email)
				{
					return true;
				}
				else
					return false;			
			}
			
			public function hasAnyAdminRole():Boolean
			{
				if (user == null || ! user is AuthUser)
					return false;
				return ((user as AuthUser).hasRole(AuthSecurityRole.ROLE_ADMIN) || (user as AuthUser).hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN));
			}
			
			protected function regulateVisibilty():void
			{
				if(!hasAnyAdminRole())
				{
					topToolbar.installButton.includeInLayout = false;
					topToolbar.installButton.visible = false;
				}
				for(var i:int = 0; i < 8; i++)
				{
					var navigatorContent:NavigatorContent = new NavigatorContent();
					navigatorContent.creationPolicy = "none";
					navigatorContent.percentHeight = 100;
					navigatorContent.percentWidth = 100;
					var element:* = null;
					if(i == 0)
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.dashboard");
						element = new DashboardContainer();
						if(currentState == "nolicense")
						{
							element = new NoLicenseDashboardContainer();
							noLicenseDashboardContainer = element;
							licenseType.text = "";
							licenseType.visible = false;
						}
						else
						{
							element = new DashboardContainer();
							dashboardContainer = element;
							if (SessionUtil.isEnterprise())
							{
								licenseType.text = "Enterprise Edition";
							}
							else
							{
								licenseType.text = "Community Edition";
							}
							licenseType.visible = true;
						}
					}
					else if(i == 1 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.policy");
						element = new PolicyContainer();
						policyContainer = element;
						policyContainer.isDiscoveryTab = false;
						ruleContainer = policyContainer.ruleContainer;
						inventoryTree = policyContainer.inventoryTree;						
					}
					else if(i == 2 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.discovery");
						element = new PolicyContainer();
						discoveryContainer = element;
						discoveryContainer.isDiscoveryTab = true;
						ruleContainerDiscovery = discoveryContainer.ruleContainer;
						inventoryTreeDiscovery = discoveryContainer.inventoryTree;						
					}
					else if(i == 3 && ( hasAnyAdminRole() || hasRole(AuthSecurityRole.ROLE_CLASSIFIER) ) )
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.objects");
						element = new ObjectsContainer;
						objectsContainer = element;
					}
					else if(i == 4 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.options");
						element = new OptionContainer();
						optionContainer = element;
					}
					else if(i == 5 && ( hasAnyAdminRole() || hasRole(AuthSecurityRole.ROLE_AUDITOR) ) )
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.logs");
						element = new LogContainer();
						logContainer = element;
					}
					else if(i == 6 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.endpointStatus");
						element = new EndpointStatusContainer;
						endpointStatusContainer = element;
					}
					else if(i == 7 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.revisions");
						element = new RevisionContainer();
						revisionContainer = element;
					}
						
					if(element != null)
					{
						navigatorContent.addElement(element);
						vs.addElement(navigatorContent);
					}
					
					if(currentState == "nolicense")
						break;
				}
				
			}
			
			protected function getCurrentUserHandler(event:ResultEvent): void
			{
				var currentUser:AuthUser = event.result as AuthUser;
				
				user = currentUser;
				
				topToolbar.getCurrentUserHandler();
				
				if(SessionUtil.isHardLimit())
					currentState = "nolicense";
				else
					currentState = "user";
				
				itypeRE.getITypeLabelsAndIds();
				ruleRE.getRuleLabelsAndIds();
			}
			
			public function popupulatePolicyOnCreate(): void {
				if (discoveryContainer != null && policyContainer != null)
				{
					getInventoryFunction();
					refreshPolicyDataProviders();
				}
			}
			
			protected function getLicenseHandler(event:ResultEvent):void
			{
				license = event.result as LicenseInformation;
				re.getCurrentUser();
			}
			
			public function faultHandler(event:FaultEvent):void
			{
				var errorMessage:String = event.fault.faultString as String;
				var splittedArray:Array = errorMessage.split(":");
				var len:int = splittedArray[0].length;
				var errorString:String = (splittedArray[0] as String).substring(0, len-1);
				Alert.show(LangUtil.getString("messages", "inventory.delete.error." + errorString + ".message"),
					LangUtil.getString("messages", "inventory.delete.error." + errorString + ".title"));
			}
			
			protected function refresh(entity:* = null): void {
				
				if (entity == null || entity is Rule)
				{
					ruleRE.getRuleLabelsAndIds();
				}
				
				if (entity == null || 
					(
						entity is InventoryItem && (entity as InventoryItem).item is InformationType
					)
				)
				{
					itypeRE.getITypeLabelsAndIds();
				}
				
				
				if (discoveryContainer != null || policyContainer != null)
				{
					if (entity == null || entity is InventoryBase)
					{
						getInventoryFunction();
					}
					if (entity == null || entity is Rule || entity is RuleItem)
					{
						refreshPolicyDataProviders();
					}
				}
				
				if (optionContainer != null)
				{
					if (entity == null || 
						entity is Config ||
						entity is USBDevice ||
						entity is CustomAction ||
						entity is AuthUser)
					{
						optionContainer.refresh();
						if (optionContainer.userManagerTab != null)
							optionContainer.userManagerTab.refreshUsers();
						if (optionContainer.usbAclTab != null)
							optionContainer.usbAclTab.usbDeviceCrudGrid.refresh();
						if (optionContainer.irmTab != null)
							optionContainer.irmTab.refresh();
					}
				}
				if (objectsContainer != null)
				{
					if (entity == null || 
						entity is DataFormat ||
						entity is DocumentDatabase ||
						entity is ADDomain ||
						entity is ADDomainItem ||
						entity is ADDomainAlias ||
						entity is ADDomainUserAlias ||
						entity is RDBMSConnection ||
						entity is RegularExpressionGroup)
					{
						objectsContainer.refreshObjects();
					}
				}
				
			}
			
			protected function refreshPolicyDataProviders():void
			{
				ruleRE.getRules();
			}
			
			protected function refreshRuleLabelDependant(): void
			{
				if (dashboardContainer != null)
					dashboardContainer.refreshDashboard();
			}
			
			protected function getRuleLabelsAndIdsHandler(event:ResultEvent):void
			{
				ruleLabels = event.result as Object;
				if (isStartup) {
					regulateVisibilty();
					isStartup = false;
				}
				else
				{
					refreshRuleLabelDependant();
				}
			}
			
			protected function getITypeLabelsAndIdsHandler(event:ResultEvent):void
			{
				var returnList:ListCollectionView = event.result as ListCollectionView;
				var labelMap:Object = new Object();
				for each (var obj:* in returnList)
				{
					var id:String = obj["id"];
					var label:String = LangUtil.getString("messages", obj["nameKey"]);
					if (label == obj["nameKey"])
					{
						label = obj["name"];
					}
					labelMap[id] = label;
				}
				itypeLabels = labelMap;
			}
			
			public function getRuleLabel(value:Number):String
			{
				var ruleLabelsAndIds:Object = ruleLabels as Object;
				var labelText:String = "";
				if (value == -1)
				{
					labelText +=  LangUtil.getString("messages","policy.rule.default");
				}
				else
				{	
					if (ruleLabelsAndIds[value] != null)
					{
						labelText +=  ruleLabelsAndIds[value];
					}
					else
					{
						labelText += "id(" + value + ")";
					}
				}
				return labelText;
			}
			
			public function getITypeLabel(value:Number):String
			{
				var itypeLabelsAndIds:Object = itypeLabels as Object;
				var labelText:String = "";
				
				if (itypeLabelsAndIds[value] != null)
				{
					labelText +=  itypeLabelsAndIds[value];
				}
				else
				{
					labelText += "id(" + value + ")";
				}
			
				return labelText;
			}
			
			protected function getRulesHandler(event:ResultEvent):void
			{
				rulesList = event.result as ListCollectionView;
				policyContainer.rulesList = rulesList;
				discoveryContainer.rulesList = rulesList;
				if (discoveryContainer != null)
					discoveryContainer.ruleContainer.refreshRules();
				if (policyContainer != null)
					policyContainer.ruleContainer.refreshRules();
			}
			
			public function getInventoryFunction():void
			{
				if (policyContainer != null && policyContainer.inventoryTree != null)
					policyContainer.inventoryTree.refreshTree();
				if (discoveryContainer != null && discoveryContainer.inventoryTree != null)
					discoveryContainer.inventoryTree.refreshTree();
				inventoryRE.getInventory();
			}
			
			protected function getInventoryHandler(event:ResultEvent):void
			{
				inventoryList = event.result as Object;
				policyContainer.inventory = inventoryList;
				discoveryContainer.inventory = inventoryList;
				inventoryTree.myInventoryTree.afterRefreshOps();
				inventoryTreeDiscovery.myInventoryTree.afterRefreshOps();
			}
			
			public function saveEntity(entity:*): void
			{
				var asyncToken:AsyncToken = genericRE.save(entity);
				asyncToken.addResponder(new AsyncResponder(
					function result(event:ResultEvent, token:Object = null):void 
					{
						refreshRespectively(token);
					}, 
					function fault(event:FaultEvent, token:Object = null):void 
					{
						trace(event.fault.faultString);
						faultHandler(event);
					}
				, entity ));
			}
			
			public function removeEntity(entity:*): void
			{
				var asyncToken:AsyncToken = genericRE.remove(entity);
				asyncToken.addResponder(new AsyncResponder(
					function result(event:ResultEvent, token:Object = null):void 
					{
						refreshRespectively(token);
					}, 
					function fault(event:FaultEvent, token:Object = null):void 
					{
						trace(event.fault.faultString);
						faultHandler(event);
					}
					, entity ));
			}
			
			public function refreshRespectively(entity:* = null): void
			{
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				refresh(entity);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Object id="license"/>
		<fx:Object id="user"/>
		
		<my:remote id="dataAccessService" destination="dataAccessService" fault="faultHandler(event)"/>
		<my:remote id="genericRE" destination="genericBRS" fault="faultHandler(event)" >
			<my:method name="sync" result="{syncTimeIntervalHandler();}"/>
		</my:remote>
		<my:remote id="re" destination="userBRS" >
			<my:method name="getCurrentUser" result="getCurrentUserHandler(event)" />
		</my:remote>
		<my:remote id="licenseRE" destination="licenseInformationBRS">
			<my:method name="getLicense" result="getLicenseHandler(event)"/>
		</my:remote>
		<my:remote id="ruleRE" destination="ruleBRS" >
			<my:method name="getRuleLabelsAndIds" result="getRuleLabelsAndIdsHandler(event)"/>
			<my:method name="getRules" result="getRulesHandler(event)"/>
		</my:remote>
		<my:remote id="itypeRE" destination="informationTypeBRS" >
			<my:method name="getITypeLabelsAndIds" result="getITypeLabelsAndIdsHandler(event)" fault="faultHandler(event)"/>
		</my:remote>
		<my:remote id="inventoryRE" destination="inventoryBRS">
			<my:method name="getInventory" result="getInventoryHandler(event)"/>
		</my:remote>
	</fx:Declarations>

	<s:states>
		
		<s:State name="none" />
		<s:State name="user" />
		<s:State name="nolicense" />
		
	</s:states>
	
	<s:Group minWidth="1220" minHeight="600" width="100%" height="100%">
		<s:Rect top="0" right="0" left="0" height="105">
			<s:fill>
				<s:LinearGradient rotation="96">
					<s:GradientEntry color="0x33A0D2" alpha="0.14"/>
					<s:GradientEntry color="0x33A0D2" alpha="0.00"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		
		<s:Group top="2" left="24" height="70" width="400" >
			<s:BitmapImage top="0" left="0" source="@Embed('/assets/images/logo_220x70.png')" />
			<s:Label top="14" left="230" id="licenseType" fontSize="17" fontWeight="bold" visible="false"/>
		</s:Group>
		
		<s:BitmapImage bottom="32" right="32"
					   alpha="0.25"
					   source="@Embed('/assets/images/logo_icon.png')" />
		
		<toolbar:TopToolbar id="topToolbar"
							top="10" right="24"
							currentState.nolicense="nolicense" currentState="default"/>
		
		<s:Group top="80" left="0" right="0" bottom="0">
			<s:Rect left="0" right="0" top="25" bottom="0" >
				<s:stroke>
					<s:SolidColorStroke color="0x000000"
										alpha="0.90"
										weight="2"/>
				</s:stroke>
			</s:Rect>
			<s:VGroup left="0" right="0" top="25" bottom="0"
					  paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6" >
				<mx:ViewStack id="vs" width="100%" height="100%" creationPolicy="auto">
				</mx:ViewStack>
			</s:VGroup>
			
			<s:HGroup left="0" right="0" top="0" height="25"
					  paddingBottom="0" paddingLeft="0" paddingTop="0" paddingRight="0" gap="0"
					  horizontalAlign="left" verticalAlign="bottom">
				<s:TabBar id="tapBar" dataProvider="{vs}" fontSize="14" width="100%"/>
			</s:HGroup>
		</s:Group>
	</s:Group>
	
	<s:Rect id="greyoutLayer" visible="false" includeInLayout="false"
			top="0" bottom="0" left="0" right="0">
		<s:fill>
			<s:SolidColor color="0x00000" alpha="0.2"/>
		</s:fill>
	</s:Rect>
	
	<s:HGroup id="workingMessage" visible="false" includeInLayout="false"
			  left="0" right="0" top="0" height="50"
			  horizontalAlign="center" verticalAlign="middle">
		<s:BorderContainer width="180" height="30" 
						   borderVisible="true" borderStyle="solid" borderColor="0x666666"
						   backgroundColor="0x000000" backgroundAlpha="0.25">
			<s:layout>
				<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle" gap="16"/>
			</s:layout>
			<s:Label text="@Resource(bundle = 'messages', key = 'main.working.message')" />
			<mx:ProgressBar indeterminate="true" width="64"
							label="" labelPlacement="right" labelWidth="0" horizontalGap="0"/>
		</s:BorderContainer>
	</s:HGroup>
	
</s:Application>