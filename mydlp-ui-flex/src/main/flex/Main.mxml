<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:api="com.mydlp.ui.api.*"
			   xmlns:my="http://www.mydlp.com/flex/my"
			   xmlns:inventory="com.mydlp.ui.widget.policy.inventory.*"
			   xmlns:rule="com.mydlp.ui.widget.policy.rule.*" 
			   xmlns:option="com.mydlp.ui.widget.option.*" 
			   xmlns:objects="com.mydlp.ui.widget.objects.*"
			   xmlns:toolbar="com.mydlp.ui.widget.toolbar.*"
			   xmlns:log="com.mydlp.ui.widget.log.*" 
			   xmlns:dashboard="com.mydlp.ui.widget.dashboard.*"
			   xmlns:revision="com.mydlp.ui.widget.revision.*"
			   height="100%" width="100%"
			   preloader="com.mydlp.ui.util.DownloadProgressBarUtil"
			   applicationComplete="onCreationComplete(event)" xmlns:endpoint="com.mydlp.ui.widget.endpoint.*"
			   skinClass="com.mydlp.ui.skin.MainSkin"
			   >
	<fx:Style source="/assets/style/general.css" />
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.LicenseInformation;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			import com.mydlp.ui.widget.dashboard.DashboardContainer;
			import com.mydlp.ui.widget.dashboard.NoLicenseDashboardContainer;
			import com.mydlp.ui.widget.endpoint.EndpointStatusContainer;
			import com.mydlp.ui.widget.log.LogContainer;
			import com.mydlp.ui.widget.objects.ObjectsContainer;
			import com.mydlp.ui.widget.option.OptionContainer;
			import com.mydlp.ui.widget.policy.PolicyContainer;
			import com.mydlp.ui.widget.policy.inventory.InventoryTree;
			import com.mydlp.ui.widget.policy.rule.RuleContainer;
			import com.mydlp.ui.widget.revision.RevisionContainer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.dphibernate.rpc.HibernateManaged;
			
			import spark.components.NavigatorContent;
			import spark.components.TitleWindow;
			
			public var currentPopup:TitleWindow = null;
			
			private var activityTimeout:uint;
			
			private var syncTimeout:uint;
			
			protected var isUserActive:Boolean = false;
			
			public var userRoles:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			public var dashboardContainer:DashboardContainer = null;
			[Bindale]
			public var noLicenseDashboardContainer:NoLicenseDashboardContainer = null;
			[Bindable]
			public var policyContainer:PolicyContainer = null;
			[Bindable]
			public var ruleContainer:RuleContainer = null;
			[Bindable]
			public var inventoryTree:InventoryTree = null;
			[Bindable]
			public var objectsContainer:ObjectsContainer = null;
			[Bindable] 
			public var optionContainer:OptionContainer = null;
			[Bindable]
			public var logContainer:LogContainer = null;
			[Bindable]
			public var endpointStatusContainer:EndpointStatusContainer = null;
			[Bindable] 
			public var revisionContainer:RevisionContainer = null;
			
			protected function resetAutoLogout():void
			{
				clearTimeout(activityTimeout);
				var delay:Number = 60*15*1000;
				activityTimeout = setTimeout(doLogout, delay);
			}
			
			protected function doLogout():void
			{
				navigateToURL(new URLRequest ('j_spring_security_logout'), '_self');		
			}
			
			protected function handleUserActivity(event:Event):void
			{
				isUserActive = true;
				resetAutoLogout();
			}
			
			protected function sendSyncPacket(event:TimerEvent):void
			{
				if(isUserActive)
					genericRE.sync();
				else
					syncTimeIntervalHandler();
				isUserActive = false;
			}
			
			protected function syncTimeIntervalHandler():void
			{
				var timer:Timer = new Timer(1000*60, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, sendSyncPacket);
				timer.start();
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				HibernateManaged.defaultHibernateService = this.dataAccessService;
				
				if(stage != null)
				{
					stage.addEventListener(MouseEvent.MOUSE_MOVE, handleUserActivity);
					stage.addEventListener(MouseEvent.CLICK, handleUserActivity);
					stage.addEventListener(KeyboardEvent.KEY_DOWN, handleUserActivity);
				}
				resetAutoLogout();
				syncTimeIntervalHandler();
				
				licenseRE.getLicense();
			}
			
			public function hasRole(roleName:String): Boolean
			{
				if (user == null || ! user is AuthUser)
					return false;
				return (user as AuthUser).hasRole(roleName);
			}
			
			public function hasAnyAdminRole():Boolean
			{
				if (user == null || ! user is AuthUser)
					return false;
				return ((user as AuthUser).hasRole(AuthSecurityRole.ROLE_ADMIN) || (user as AuthUser).hasRole(AuthSecurityRole.ROLE_SUPER_ADMIN));
			}
			
			protected function regulateVisibilty():void
			{
				if(!hasAnyAdminRole())
				{
					topToolbar.installButton.includeInLayout = false;
					topToolbar.installButton.visible = false;
				}
				for(var i:int = 0; i < 7; i++)
				{
					var navigatorContent:NavigatorContent = new NavigatorContent();
					navigatorContent.percentHeight = 100;
					navigatorContent.percentWidth = 100;
					var element:* = null;
					if(i == 0)
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.dashboard");
						element = new DashboardContainer();
						if(currentState == "nolicense")
						{
							element = new NoLicenseDashboardContainer();
							noLicenseDashboardContainer = element;
						}
						else
						{
							element = new DashboardContainer();
							dashboardContainer = element;
						}
					}
					else if(i == 1 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.policy");
						element = new PolicyContainer();
						policyContainer = element;
						ruleContainer = policyContainer.ruleContainer;
						inventoryTree = policyContainer.inventoryTree;						
					}
					else if(i == 2 && ( hasAnyAdminRole() || hasRole(AuthSecurityRole.ROLE_CLASSIFIER) ) )
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.objects");
						element = new ObjectsContainer;
						objectsContainer = element;
					}
					else if(i == 3 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.options");
						element = new OptionContainer();
						optionContainer = element;
					}
					else if(i == 4 && ( hasAnyAdminRole() || hasRole(AuthSecurityRole.ROLE_AUDITOR) ) )
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.logs");
						element = new LogContainer();
						logContainer = element;
					}
					else if(i == 5 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.endpointStatus");
						element = new EndpointStatusContainer;
						endpointStatusContainer = element;
					}
					else if(i == 6 && hasAnyAdminRole())
					{
						navigatorContent.label = LangUtil.getString("messages", "maintab.revisions");
						element = new RevisionContainer();
						revisionContainer = element;
					}
						
					if(element != null)
					{
						navigatorContent.addElement(element);
						vs.addElement(navigatorContent);
					}
					
					if(currentState == "nolicense")
						break;
				}
				
			}
			
			protected function getCurrentUserHandler(event:ResultEvent): void
			{
				var currentUser:AuthUser = event.result as AuthUser;
				
				user = currentUser;
				
				topToolbar.getCurrentUserHandler();
				
				if(SessionUtil.isHardLimit())
					currentState = "nolicense";
				else
					currentState = "user";
				
				regulateVisibilty();
			}
			
			protected function getLicenseHandler(event:ResultEvent):void
			{
				license = event.result as LicenseInformation;
				re.getCurrentUser();
			}
			
			public function faultHandler(event:FaultEvent):void
			{
				var errorMessage:String = event.fault.faultString as String;
				var splittedArray:Array = errorMessage.split(":");
				var len:int = splittedArray[0].length;
				var errorString:String = (splittedArray[0] as String).substring(0, len-1);
				Alert.show(LangUtil.getString("messages", "inventory.delete.error." + errorString + ".message"),
					LangUtil.getString("messages", "inventory.delete.error." + errorString + ".title"));
			}
			
			public function refresh(): void
			{
				if (policyContainer != null && policyContainer.inventoryTree != null)
					policyContainer.inventoryTree.refreshTree();
				if (policyContainer != null && policyContainer.ruleContainer != null)
					policyContainer.ruleContainer.refreshRules();
				if (optionContainer != null)
				{
					optionContainer.refresh();
					if (optionContainer.userManagerTab != null)
						optionContainer.userManagerTab.refreshUsers();
					if (optionContainer.usbAclTab != null)
						optionContainer.usbAclTab.usbDeviceCrudGrid.refresh();
					if (optionContainer.irmTab != null)
						optionContainer.irmTab.refresh();
				}
				if (objectsContainer != null)
					objectsContainer.refreshObjects();
				if (dashboardContainer != null)
					dashboardContainer.refreshDashboard();
				if (endpointStatusContainer != null)
					endpointStatusContainer.refresh();
			}
			
			protected function genericResultHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Object id="license"/>
		<fx:Object id="user"/>
		
		<my:remote id="dataAccessService" destination="dataAccessService" fault="faultHandler(event)"/>
		<my:remote id="genericRE" destination="genericBRS" fault="faultHandler(event)" >
			<my:method name="save" result="genericResultHandler(event)" fault="faultHandler(event)"/>
			<my:method name="remove" result="genericResultHandler(event)" fault="faultHandler(event)"/>
			<my:method name="sync" result="{syncTimeIntervalHandler();}"/>
		</my:remote>
		<my:remote id="re" destination="userBRS" >
			<my:method name="getCurrentUser" result="getCurrentUserHandler(event)" />
		</my:remote>
		<my:remote id="licenseRE" destination="licenseInformationBRS">
			<my:method name="getLicense" result="getLicenseHandler(event)"/>
		</my:remote>
	</fx:Declarations>

	<s:states>
		
		<s:State name="none" />
		<s:State name="user" />
		<s:State name="nolicense" />
		
	</s:states>
	
	<s:Group minWidth="1416" minHeight="730" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="0" paddingTop="4" paddingBottom="24"
							  paddingLeft="24" paddingRight="24"/>
		</s:layout>
		
		<toolbar:TopToolbar id="topToolbar" currentState.nolicense="nolicense" currentState="default"/>
		
		<s:Spacer height="5" width="100%" />
		
		<s:TabBar id="tapBar" dataProvider="{vs}" fontWeight="bold" fontSize="14"/>
		
		<s:Group width="100%" height="100%">
			<s:Rect left="0" right="0" top="0" bottom="0" >
				<s:stroke>
					<s:SolidColorStroke color="0xACADAF" weight="3"/>
				</s:stroke>
			</s:Rect>
			<s:VGroup paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6" width="100%" height="100%">
				<mx:ViewStack id="vs" width="100%" height="100%" creationPolicy="all">
				</mx:ViewStack>
			</s:VGroup>
		</s:Group>
	</s:Group>
	
</s:Application>