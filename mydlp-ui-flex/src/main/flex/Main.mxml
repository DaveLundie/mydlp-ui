<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:api="com.mydlp.ui.api.*"
			   xmlns:my="http://www.mydlp.com/flex/my"
			   xmlns:inventory="com.mydlp.ui.widget.policy.inventory.*"
			   xmlns:rule="com.mydlp.ui.widget.policy.rule.*" 
			   xmlns:option="com.mydlp.ui.widget.option.*" 
			   xmlns:objects="com.mydlp.ui.widget.objects.*"
			   xmlns:toolbar="com.mydlp.ui.widget.toolbar.*"
			   xmlns:log="com.mydlp.ui.widget.log.*" 
			   xmlns:dashboard="com.mydlp.ui.widget.dashboard.*"
			   xmlns:revision="com.mydlp.ui.widget.revision.*"
			   minHeight="800" minWidth="1280" 
			   preloader="com.mydlp.ui.util.DownloadProgressBarUtil"
			   applicationComplete="onCreationComplete(event)" xmlns:endpoint="com.mydlp.ui.widget.endpoint.*"
			   >
	<fx:Style source="/assets/style/general.css" />
	
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.domain.AuthSecurityRole;
			import com.mydlp.ui.domain.AuthUser;
			import com.mydlp.ui.domain.LicenseInformation;
			import com.mydlp.ui.util.LangUtil;
			import com.mydlp.ui.util.SessionUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.dphibernate.rpc.HibernateManaged;
			
			import spark.components.TitleWindow;
			
			public var currentPopup:TitleWindow = null;

			public static const removeError:String = "org.springframework.jdbc.UncategorizedSQLException";
			
			private var activityTimeout:uint;
			
			private var syncTimeout:uint;
			
			//[Bindable]
			//public var license:LicenseInformation;
			
			protected var isUserActive:Boolean = false;
			
			public var userRoles:ArrayCollection = new ArrayCollection;
			
			
			protected function resetAutoLogout():void
			{
				clearTimeout(activityTimeout);
				var delay:Number = 60*15*1000;
				activityTimeout = setTimeout(doLogout, delay);
			}
			
			protected function doLogout():void
			{
				navigateToURL(new URLRequest ('j_spring_security_logout'), '_self');		
			}
			
			protected function handleUserActivity(event:Event):void
			{
				isUserActive = true;
				resetAutoLogout();
			}
			
			protected function sendSyncPacket(event:TimerEvent):void
			{
				if(isUserActive)
					genericRE.sync();
				else
					syncTimeIntervalHandler();
				isUserActive = false;
			}
			
			protected function syncTimeIntervalHandler():void
			{
				var timer:Timer = new Timer(1000*60, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, sendSyncPacket);
				timer.start();
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				HibernateManaged.defaultHibernateService = this.dataAccessService;
				
				if(stage != null)
				{
					stage.addEventListener(MouseEvent.MOUSE_MOVE, handleUserActivity);
					stage.addEventListener(MouseEvent.CLICK, handleUserActivity);
					stage.addEventListener(KeyboardEvent.KEY_DOWN, handleUserActivity);
				}
				resetAutoLogout();
				syncTimeIntervalHandler();
				
				dashboardContainer.licenseBox.invalidateDisplayList();
				licenseRE.getLicense();
			}
			
			protected function getCurrentUserHandler(event:ResultEvent): void
			{
				var currentUser:AuthUser = event.result as AuthUser;
				
				//SessionUtil.initiateSession(currentUser, this.license as LicenseInformation);
				//license = SessionUtil.currentLicense;
				user = currentUser;
				
				dashboardContainer.licenseBox.licenseChangeHandler();
				topToolbar.getCurrentUserHandler();
				
				if(SessionUtil.isHardLimit())
					currentState = "nolicense";
				else if (currentUser.hasRole(AuthSecurityRole.ROLE_ADMIN))
					currentState="admin";
				else if (currentUser.hasRole(AuthSecurityRole.ROLE_AUDITOR))
					currentState="auditor";
			}
			
			protected function getLicenseHandler(event:ResultEvent):void
			{
				license = event.result as LicenseInformation;
				re.getCurrentUser();
			}
			
			public function faultHandler(event:FaultEvent):void
			{
				var errorMessage:String = event.fault.faultString as String;
				var splittedArray:Array = errorMessage.split(":");
				var len:int = splittedArray[0].length;
				var errorString:String = (splittedArray[0] as String).substring(0, len-1);
				if(errorString == removeError)
					Alert.show(LangUtil.getString("messages", "inventory.delete.error." + errorString + ".message"),
						LangUtil.getString("messages", "inventory.delete.error." + errorString + ".title"));
				else
					Alert.show(LangUtil.getString("messages", "inventory.delete.error.unexpected.message"),
						LangUtil.getString("messages", "inventory.delete.error.unexpected.title"));
			}
			
			public function refresh(): void
			{
				if (inventoryTree != null)
					inventoryTree.refreshTree();
				if (ruleContainer != null)
					ruleContainer.refreshRules();
				if (optionContainer != null)
				{
					if (optionContainer.userManagerTab != null)
						optionContainer.userManagerTab.refreshUsers();
					
					optionContainer.miscTab.usbDeviceCrudGrid.refresh();
				}
				if (objectsContainer != null)
					objectsContainer.refreshObjects();
				if (dashboardContainer != null)
					dashboardContainer.refreshDashboard();
				if (endpointStatusContainer != null)
					endpointStatusContainer.refresh();
			}
			
			protected function genericResultHandler(event:ResultEvent):void
			{
				FlexGlobals.topLevelApplication.topToolbar.policyInstallationState = false;
				refresh();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Object id="license"/>
		<fx:Object id="user"/>
		
		<my:remote id="dataAccessService" destination="dataAccessService" fault="faultHandler(event)"/>
		<my:remote id="genericRE" destination="genericBRS" fault="faultHandler(event)" >
			<my:method name="save" result="genericResultHandler(event)" fault="faultHandler(event)"/>
			<my:method name="remove" result="genericResultHandler(event)" fault="faultHandler(event)"/>
			<my:method name="sync" result="{syncTimeIntervalHandler();}"/>
		</my:remote>
		<my:remote id="re" destination="userBRS" >
			<my:method name="getCurrentUser" result="getCurrentUserHandler(event)" />
		</my:remote>
		<my:remote id="licenseRE" destination="licenseInformationBRS">
			<my:method name="getLicense" result="getLicenseHandler(event)"/>
		</my:remote>
	</fx:Declarations>

	<s:states>
		<s:State name="none" />
		<s:State name="auditor" />
		<s:State name="admin" />
		<s:State name="nolicense"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout gap="0" paddingTop="4" paddingBottom="24"
						  paddingLeft="24" paddingRight="24"/>
	</s:layout>
	
	<toolbar:TopToolbar id="topToolbar" currentState.nolicense="nolicense" currentState="default"/>
	
	<s:Spacer height="5" width="100%" />
	
	<s:TabBar id="tapBar" dataProvider="{vs}" fontWeight="bold" fontSize="14" />
	
	<s:Group width="100%" height="100%">
		<s:Rect left="0" right="0" top="0" bottom="0" >
			<s:stroke>
				<s:SolidColorStroke color="0xACADAF" weight="3"/>
			</s:stroke>
		</s:Rect>
		<s:VGroup paddingTop="6" paddingBottom="6" paddingLeft="6" paddingRight="6" width="100%" height="100%">
			<mx:ViewStack id="vs" width="100%" height="100%" creationPolicy="all">
				<s:NavigatorContent label="@Resource(bundle = 'messages', key = 'maintab.dashboard')" width="100%" height="100%">
					<dashboard:DashboardContainer id="dashboardContainer" currentState.nolicense="nolicense" currentState="default"/>
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin" 
									label="@Resource(bundle = 'messages', key = 'maintab.policy')" width="100%" height="100%">
					<s:layout>
						<s:HorizontalLayout gap="10" />
					</s:layout>
					<inventory:InventoryTree id="inventoryTree"/>
					<rule:RSpacer />
					<rule:RuleContainer id="ruleContainer" />
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin" 
									label="@Resource(bundle = 'messages', key = 'maintab.objects')" width="100%" height="100%">
					<mx:HDividedBox width="100%" height="100%">
						<objects:ObjectsContainer id="objectsContainer"/>
					</mx:HDividedBox>
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin" 
									label="@Resource(bundle = 'messages', key = 'maintab.options')" width="100%" height="100%">
					<mx:HDividedBox width="100%" height="100%">
						<option:OptionContainer id="optionContainer" width="100%" height="100%"/>
					</mx:HDividedBox>
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin,auditor"
									label="@Resource(bundle = 'messages', key = 'maintab.logs')" width="100%" height="100%">
					<log:LogContainer id="logContainer" />
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin"
									label="@Resource(bundle = 'messages', key = 'maintab.endpointStatus')" width="100%" height="100%">
					<endpoint:EndpointStatusContainer id="endpointStatusContainer" />
				</s:NavigatorContent>
				<s:NavigatorContent includeIn="admin"
									label="@Resource(bundle = 'messages', key = 'maintab.revisions')" width="100%" height="100%">
					<revision:RevisionContainer id="revisionContainer"/>
				</s:NavigatorContent>
			</mx:ViewStack>
		</s:VGroup>
	</s:Group>
</s:Application>