<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="500" height="400">
	<fx:Script>
		<![CDATA[
			import com.mydlp.ui.tools.uploader.UploadStatus;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ListCollectionView;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			protected var file:File = null;
			
			public var tokenMode:String = "";
			public var tokenHost:String = "";
			public var tokenKey:String = "";
			
			[Bindable]
			protected var fileList:ListCollectionView = null;
			
			[Bindable]
			protected var uploadStatuses:ListCollectionView = null;
			
			[Bindable]
			protected var itemsRemaining:Number = 0;
			[Bindable]
			protected var itemsUploaded:Number = 0;
			[Bindable]
			protected var itemsFailed:Number = 0;
			[Bindable]
			protected var itemsSkipped:Number = 0;
			
			protected function getFilesRecursively(event:Event): void
			{
				if (file != null && file.isDirectory)
				{
					fileList = new ArrayCollection();
					addFilesRecursively(file);
					currentState="selected";
				}
			}
			
			protected function addFilesRecursively(f:File): void
			{
				var listing:Array = f.getDirectoryListing();
				
				if (listing.length == 0) return;
				
				for each (var loopF:File in new ArrayCollection(listing))
				{
					if (loopF == null) continue;
					if (!loopF.exists) continue;
					if (loopF.isHidden) continue;
					if (loopF.isSymbolicLink) continue;
					if (loopF.isDirectory)
					{
						addFilesRecursively(loopF);
						continue;
					}
					
					var uploadStatus:UploadStatus = new UploadStatus();
					uploadStatus = setFile(uploadStatus, loopF);
					fileList.addItem(uploadStatus);
				}
			}
			
			protected function onBrowseClick(event:MouseEvent):void
			{
				file = new File();
				file.addEventListener(Event.SELECT, getFilesRecursively);
				file.browseForDirectory("Please select your directory...");
			}
			
			protected function onStartUploadClick(event:MouseEvent):void
			{
				currentState="uploading";
				startUpload();
			}
			
			protected function startUpload(): void
			{
				itemsRemaining = fileList.length;
				itemsUploaded = 0;
				itemsFailed = 0;
				uploadStatuses = new ArrayCollection();
				uploadNextFile();
			}
			
			public function fileUploadFinished(): void
			{
				itemsUploaded++;
				itemsRemaining--;
				uploadNextFile();
			}
			
			public function fileUploadFailed(): void
			{
				itemsFailed++;
				itemsRemaining--;
				uploadNextFile();
			}
			
			public function fileUploadSkipped(): void
			{
				itemsSkipped++;
				itemsRemaining--;
				uploadNextFile();
			}
			
			protected function uploadNextFile(): void
			{
				if (fileList.length == 0)
				{
					currentState="done";
					return;
				}
				var uploadStatus:UploadStatus = fileList.getItemAt(0) as UploadStatus;
				fileList.removeItemAt(0);
				if (uploadStatus == null)
				{
					uploadNextFile();
					return;
				}
				
				if (uploadStatus == null)
				{
					fileUploadFailed();
				}
				else
				{
					addToStatuses(uploadStatus);
				}
			}
			
			protected function addToStatuses(uploadStatus:UploadStatus): void
			{
				if (uploadStatuses.length == 10)
				{
					uploadStatuses.removeItemAt(0);
				}
				uploadStatuses = new ArrayCollection(uploadStatuses.toArray());
				uploadStatuses.addItem(uploadStatus);
			}
			
			protected function setFile(uploadStatus:UploadStatus, f:File): UploadStatus
			{
				if (f == null) return null;
				if (!f.exists) return null;
				if (f.isDirectory) return null;
				if (f.isHidden) return null;
				if (f.isSymbolicLink) return null;
				
				uploadStatus.file = f;
				
				return uploadStatus;
			}
			
			protected function onTokenClick(event:MouseEvent):void
			{
				var token:String = tokenInput.text;
				if (parseToken(token))
				{
					currentState="browse";
				}
				else
				{
					Alert.show("Invalid token!");
					tokenInput.text = "";
				}
				
			}
			
			protected function parseToken(token:String): Boolean
			{
				if (token == null || token.length < 33) return false;
				
				var sepIndex:int = token.indexOf('-');
				if (sepIndex == -1) return false;
				var tokenLength:int = token.length;
				if (tokenLength < sepIndex + 33) return false;
				
				if (token.charAt(0) == "p")
				{
					tokenMode="http";
				}
				else if (token.charAt(0) == "s")
				{
					tokenMode="https";
				}
				else
				{
					return false;
				}
				tokenHost = token.substr(1, sepIndex - 1);
				tokenKey = token.substring(sepIndex + 1);
				return true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="token" />
		<s:State name="browse" />
		<s:State name="selected" />
		<s:State name="uploading" />
		<s:State name="done" />
	</s:states>
	
	<s:VGroup width="100%" height="100%" 
			  paddingTop="10" paddingBottom="10"
			  paddingLeft="20" paddingRight="20"
			  verticalAlign="middle" horizontalAlign="center"
			  >
		
		<s:HGroup width="100%" height="20"
				  horizontalAlign="center" verticalAlign="middle"
				  fontWeight="bold" fontSize="12">
			
			<s:Label text.token="Please enter your token:" 
					 text.browse="Please click to select your directory:"
					 text.selected="{fileList.length + ' items are selected.'}"
					 text.uploading="{'Uploading...' + 
					 ' Remaining: ' + itemsRemaining +
					 ' Uploaded: ' + itemsUploaded +
					 ' Skipped: ' + itemsSkipped +
					 ' Failed: ' + itemsFailed
					 }"
					 text.done="{'Done...' + 
					 ' Remaining: ' + itemsRemaining +
					 ' Uploaded: ' + itemsUploaded +
					 ' Skipped: ' + itemsSkipped +
					 ' Failed: ' + itemsFailed
					 }"
					 />
			
			<s:TextInput id="tokenInput" 
						 width="200"
						 includeInLayout="false" visible="false"
						 includeInLayout.token="true" visible.token="true"
						 />
			
			<s:Button label.token="Enter"
					  click.token="onTokenClick(event)"
					  label.browse="Browse"
					  click.browse="onBrowseClick(event)"
					  label.selected="Click to start upload"
					  click.selected="onStartUploadClick(event)"
					  enabled.selected="{fileList.length &gt; 0}"
					  label.uploading="Waiting..."
					  enabled.uploading="false"
					  label.done="Close"
					  click.done="{close()}"
					  />
		</s:HGroup>  
		
		<s:List id="fileViewList" borderVisible="false"
				width="100%" height="100%"
				visible="true" 
				dataProvider.selected="{fileList}"
				itemRenderer.selected="com.mydlp.ui.tools.uploader.AfterSelectRenderer"
				dataProvider.uploading="{uploadStatuses}"
				itemRenderer.uploading="com.mydlp.ui.tools.uploader.UploadStatusRenderer"/>
		
		
	</s:VGroup>
	
</s:WindowedApplication>
