/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mydlp.ui.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Mydlp_ui {

  public interface Iface {

    public void compileCustomer(int Customerid) throws org.apache.thrift.TException;

    public ByteBuffer getRuletable(String Ipaddress, String Revisionid) throws org.apache.thrift.TException;

    public String receiveBegin(String Ipaddress) throws org.apache.thrift.TException;

    public String receiveChunk(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void compileCustomer(int Customerid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.compileCustomer_call> resultHandler) throws org.apache.thrift.TException;

    public void getRuletable(String Ipaddress, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRuletable_call> resultHandler) throws org.apache.thrift.TException;

    public void receiveBegin(String Ipaddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.receiveBegin_call> resultHandler) throws org.apache.thrift.TException;

    public void receiveChunk(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.receiveChunk_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void compileCustomer(int Customerid) throws org.apache.thrift.TException
    {
      send_compileCustomer(Customerid);
      recv_compileCustomer();
    }

    public void send_compileCustomer(int Customerid) throws org.apache.thrift.TException
    {
      compileCustomer_args args = new compileCustomer_args();
      args.setCustomerid(Customerid);
      sendBase("compileCustomer", args);
    }

    public void recv_compileCustomer() throws org.apache.thrift.TException
    {
      compileCustomer_result result = new compileCustomer_result();
      receiveBase(result, "compileCustomer");
      return;
    }

    public ByteBuffer getRuletable(String Ipaddress, String Revisionid) throws org.apache.thrift.TException
    {
      send_getRuletable(Ipaddress, Revisionid);
      return recv_getRuletable();
    }

    public void send_getRuletable(String Ipaddress, String Revisionid) throws org.apache.thrift.TException
    {
      getRuletable_args args = new getRuletable_args();
      args.setIpaddress(Ipaddress);
      args.setRevisionid(Revisionid);
      sendBase("getRuletable", args);
    }

    public ByteBuffer recv_getRuletable() throws org.apache.thrift.TException
    {
      getRuletable_result result = new getRuletable_result();
      receiveBase(result, "getRuletable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRuletable failed: unknown result");
    }

    public String receiveBegin(String Ipaddress) throws org.apache.thrift.TException
    {
      send_receiveBegin(Ipaddress);
      return recv_receiveBegin();
    }

    public void send_receiveBegin(String Ipaddress) throws org.apache.thrift.TException
    {
      receiveBegin_args args = new receiveBegin_args();
      args.setIpaddress(Ipaddress);
      sendBase("receiveBegin", args);
    }

    public String recv_receiveBegin() throws org.apache.thrift.TException
    {
      receiveBegin_result result = new receiveBegin_result();
      receiveBase(result, "receiveBegin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveBegin failed: unknown result");
    }

    public String receiveChunk(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException
    {
      send_receiveChunk(Ipaddress, Itemid, Chunkdata, Chunknum, Chunknumtotal);
      return recv_receiveChunk();
    }

    public void send_receiveChunk(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException
    {
      receiveChunk_args args = new receiveChunk_args();
      args.setIpaddress(Ipaddress);
      args.setItemid(Itemid);
      args.setChunkdata(Chunkdata);
      args.setChunknum(Chunknum);
      args.setChunknumtotal(Chunknumtotal);
      sendBase("receiveChunk", args);
    }

    public String recv_receiveChunk() throws org.apache.thrift.TException
    {
      receiveChunk_result result = new receiveChunk_result();
      receiveBase(result, "receiveChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveChunk failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void compileCustomer(int Customerid, org.apache.thrift.async.AsyncMethodCallback<compileCustomer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compileCustomer_call method_call = new compileCustomer_call(Customerid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compileCustomer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int Customerid;
      public compileCustomer_call(int Customerid, org.apache.thrift.async.AsyncMethodCallback<compileCustomer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Customerid = Customerid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compileCustomer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compileCustomer_args args = new compileCustomer_args();
        args.setCustomerid(Customerid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_compileCustomer();
      }
    }

    public void getRuletable(String Ipaddress, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<getRuletable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRuletable_call method_call = new getRuletable_call(Ipaddress, Revisionid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRuletable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Ipaddress;
      private String Revisionid;
      public getRuletable_call(String Ipaddress, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<getRuletable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Ipaddress = Ipaddress;
        this.Revisionid = Revisionid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRuletable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRuletable_args args = new getRuletable_args();
        args.setIpaddress(Ipaddress);
        args.setRevisionid(Revisionid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRuletable();
      }
    }

    public void receiveBegin(String Ipaddress, org.apache.thrift.async.AsyncMethodCallback<receiveBegin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveBegin_call method_call = new receiveBegin_call(Ipaddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveBegin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Ipaddress;
      public receiveBegin_call(String Ipaddress, org.apache.thrift.async.AsyncMethodCallback<receiveBegin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Ipaddress = Ipaddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveBegin_args args = new receiveBegin_args();
        args.setIpaddress(Ipaddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveBegin();
      }
    }

    public void receiveChunk(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<receiveChunk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveChunk_call method_call = new receiveChunk_call(Ipaddress, Itemid, Chunkdata, Chunknum, Chunknumtotal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Ipaddress;
      private long Itemid;
      private ByteBuffer Chunkdata;
      private int Chunknum;
      private int Chunknumtotal;
      public receiveChunk_call(String Ipaddress, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<receiveChunk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Ipaddress = Ipaddress;
        this.Itemid = Itemid;
        this.Chunkdata = Chunkdata;
        this.Chunknum = Chunknum;
        this.Chunknumtotal = Chunknumtotal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveChunk_args args = new receiveChunk_args();
        args.setIpaddress(Ipaddress);
        args.setItemid(Itemid);
        args.setChunkdata(Chunkdata);
        args.setChunknum(Chunknum);
        args.setChunknumtotal(Chunknumtotal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveChunk();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("compileCustomer", new compileCustomer());
      processMap.put("getRuletable", new getRuletable());
      processMap.put("receiveBegin", new receiveBegin());
      processMap.put("receiveChunk", new receiveChunk());
      return processMap;
    }

    private static class compileCustomer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compileCustomer_args> {
      public compileCustomer() {
        super("compileCustomer");
      }

      protected compileCustomer_args getEmptyArgsInstance() {
        return new compileCustomer_args();
      }

      protected compileCustomer_result getResult(I iface, compileCustomer_args args) throws org.apache.thrift.TException {
        compileCustomer_result result = new compileCustomer_result();
        iface.compileCustomer(args.Customerid);
        return result;
      }
    }

    private static class getRuletable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRuletable_args> {
      public getRuletable() {
        super("getRuletable");
      }

      protected getRuletable_args getEmptyArgsInstance() {
        return new getRuletable_args();
      }

      protected getRuletable_result getResult(I iface, getRuletable_args args) throws org.apache.thrift.TException {
        getRuletable_result result = new getRuletable_result();
        result.success = iface.getRuletable(args.Ipaddress, args.Revisionid);
        return result;
      }
    }

    private static class receiveBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveBegin_args> {
      public receiveBegin() {
        super("receiveBegin");
      }

      protected receiveBegin_args getEmptyArgsInstance() {
        return new receiveBegin_args();
      }

      protected receiveBegin_result getResult(I iface, receiveBegin_args args) throws org.apache.thrift.TException {
        receiveBegin_result result = new receiveBegin_result();
        result.success = iface.receiveBegin(args.Ipaddress);
        return result;
      }
    }

    private static class receiveChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveChunk_args> {
      public receiveChunk() {
        super("receiveChunk");
      }

      protected receiveChunk_args getEmptyArgsInstance() {
        return new receiveChunk_args();
      }

      protected receiveChunk_result getResult(I iface, receiveChunk_args args) throws org.apache.thrift.TException {
        receiveChunk_result result = new receiveChunk_result();
        result.success = iface.receiveChunk(args.Ipaddress, args.Itemid, args.Chunkdata, args.Chunknum, args.Chunknumtotal);
        return result;
      }
    }

  }

  public static class compileCustomer_args implements org.apache.thrift.TBase<compileCustomer_args, compileCustomer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileCustomer_args");

    private static final org.apache.thrift.protocol.TField CUSTOMERID_FIELD_DESC = new org.apache.thrift.protocol.TField("Customerid", org.apache.thrift.protocol.TType.I32, (short)1);

    public int Customerid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUSTOMERID((short)1, "Customerid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUSTOMERID
            return CUSTOMERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CUSTOMERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUSTOMERID, new org.apache.thrift.meta_data.FieldMetaData("Customerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileCustomer_args.class, metaDataMap);
    }

    public compileCustomer_args() {
    }

    public compileCustomer_args(
      int Customerid)
    {
      this();
      this.Customerid = Customerid;
      setCustomeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileCustomer_args(compileCustomer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.Customerid = other.Customerid;
    }

    public compileCustomer_args deepCopy() {
      return new compileCustomer_args(this);
    }

    @Override
    public void clear() {
      setCustomeridIsSet(false);
      this.Customerid = 0;
    }

    public int getCustomerid() {
      return this.Customerid;
    }

    public compileCustomer_args setCustomerid(int Customerid) {
      this.Customerid = Customerid;
      setCustomeridIsSet(true);
      return this;
    }

    public void unsetCustomerid() {
      __isset_bit_vector.clear(__CUSTOMERID_ISSET_ID);
    }

    /** Returns true if field Customerid is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomerid() {
      return __isset_bit_vector.get(__CUSTOMERID_ISSET_ID);
    }

    public void setCustomeridIsSet(boolean value) {
      __isset_bit_vector.set(__CUSTOMERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUSTOMERID:
        if (value == null) {
          unsetCustomerid();
        } else {
          setCustomerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUSTOMERID:
        return Integer.valueOf(getCustomerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUSTOMERID:
        return isSetCustomerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compileCustomer_args)
        return this.equals((compileCustomer_args)that);
      return false;
    }

    public boolean equals(compileCustomer_args that) {
      if (that == null)
        return false;

      boolean this_present_Customerid = true;
      boolean that_present_Customerid = true;
      if (this_present_Customerid || that_present_Customerid) {
        if (!(this_present_Customerid && that_present_Customerid))
          return false;
        if (this.Customerid != that.Customerid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compileCustomer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compileCustomer_args typedOther = (compileCustomer_args)other;

      lastComparison = Boolean.valueOf(isSetCustomerid()).compareTo(typedOther.isSetCustomerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Customerid, typedOther.Customerid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CUSTOMERID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Customerid = iprot.readI32();
              setCustomeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUSTOMERID_FIELD_DESC);
      oprot.writeI32(this.Customerid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compileCustomer_args(");
      boolean first = true;

      sb.append("Customerid:");
      sb.append(this.Customerid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class compileCustomer_result implements org.apache.thrift.TBase<compileCustomer_result, compileCustomer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileCustomer_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileCustomer_result.class, metaDataMap);
    }

    public compileCustomer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileCustomer_result(compileCustomer_result other) {
    }

    public compileCustomer_result deepCopy() {
      return new compileCustomer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compileCustomer_result)
        return this.equals((compileCustomer_result)that);
      return false;
    }

    public boolean equals(compileCustomer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compileCustomer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compileCustomer_result typedOther = (compileCustomer_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compileCustomer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRuletable_args implements org.apache.thrift.TBase<getRuletable_args, getRuletable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuletable_args");

    private static final org.apache.thrift.protocol.TField IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ipaddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REVISIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("Revisionid", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String Ipaddress; // required
    public String Revisionid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPADDRESS((short)1, "Ipaddress"),
      REVISIONID((short)2, "Revisionid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPADDRESS
            return IPADDRESS;
          case 2: // REVISIONID
            return REVISIONID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Ipaddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVISIONID, new org.apache.thrift.meta_data.FieldMetaData("Revisionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuletable_args.class, metaDataMap);
    }

    public getRuletable_args() {
    }

    public getRuletable_args(
      String Ipaddress,
      String Revisionid)
    {
      this();
      this.Ipaddress = Ipaddress;
      this.Revisionid = Revisionid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuletable_args(getRuletable_args other) {
      if (other.isSetIpaddress()) {
        this.Ipaddress = other.Ipaddress;
      }
      if (other.isSetRevisionid()) {
        this.Revisionid = other.Revisionid;
      }
    }

    public getRuletable_args deepCopy() {
      return new getRuletable_args(this);
    }

    @Override
    public void clear() {
      this.Ipaddress = null;
      this.Revisionid = null;
    }

    public String getIpaddress() {
      return this.Ipaddress;
    }

    public getRuletable_args setIpaddress(String Ipaddress) {
      this.Ipaddress = Ipaddress;
      return this;
    }

    public void unsetIpaddress() {
      this.Ipaddress = null;
    }

    /** Returns true if field Ipaddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddress() {
      return this.Ipaddress != null;
    }

    public void setIpaddressIsSet(boolean value) {
      if (!value) {
        this.Ipaddress = null;
      }
    }

    public String getRevisionid() {
      return this.Revisionid;
    }

    public getRuletable_args setRevisionid(String Revisionid) {
      this.Revisionid = Revisionid;
      return this;
    }

    public void unsetRevisionid() {
      this.Revisionid = null;
    }

    /** Returns true if field Revisionid is set (has been assigned a value) and false otherwise */
    public boolean isSetRevisionid() {
      return this.Revisionid != null;
    }

    public void setRevisionidIsSet(boolean value) {
      if (!value) {
        this.Revisionid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPADDRESS:
        if (value == null) {
          unsetIpaddress();
        } else {
          setIpaddress((String)value);
        }
        break;

      case REVISIONID:
        if (value == null) {
          unsetRevisionid();
        } else {
          setRevisionid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPADDRESS:
        return getIpaddress();

      case REVISIONID:
        return getRevisionid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPADDRESS:
        return isSetIpaddress();
      case REVISIONID:
        return isSetRevisionid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRuletable_args)
        return this.equals((getRuletable_args)that);
      return false;
    }

    public boolean equals(getRuletable_args that) {
      if (that == null)
        return false;

      boolean this_present_Ipaddress = true && this.isSetIpaddress();
      boolean that_present_Ipaddress = true && that.isSetIpaddress();
      if (this_present_Ipaddress || that_present_Ipaddress) {
        if (!(this_present_Ipaddress && that_present_Ipaddress))
          return false;
        if (!this.Ipaddress.equals(that.Ipaddress))
          return false;
      }

      boolean this_present_Revisionid = true && this.isSetRevisionid();
      boolean that_present_Revisionid = true && that.isSetRevisionid();
      if (this_present_Revisionid || that_present_Revisionid) {
        if (!(this_present_Revisionid && that_present_Revisionid))
          return false;
        if (!this.Revisionid.equals(that.Revisionid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRuletable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRuletable_args typedOther = (getRuletable_args)other;

      lastComparison = Boolean.valueOf(isSetIpaddress()).compareTo(typedOther.isSetIpaddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ipaddress, typedOther.Ipaddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRevisionid()).compareTo(typedOther.isSetRevisionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRevisionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Revisionid, typedOther.Revisionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IPADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Ipaddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REVISIONID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Revisionid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.Ipaddress != null) {
        oprot.writeFieldBegin(IPADDRESS_FIELD_DESC);
        oprot.writeString(this.Ipaddress);
        oprot.writeFieldEnd();
      }
      if (this.Revisionid != null) {
        oprot.writeFieldBegin(REVISIONID_FIELD_DESC);
        oprot.writeString(this.Revisionid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRuletable_args(");
      boolean first = true;

      sb.append("Ipaddress:");
      if (this.Ipaddress == null) {
        sb.append("null");
      } else {
        sb.append(this.Ipaddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Revisionid:");
      if (this.Revisionid == null) {
        sb.append("null");
      } else {
        sb.append(this.Revisionid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRuletable_result implements org.apache.thrift.TBase<getRuletable_result, getRuletable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuletable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuletable_result.class, metaDataMap);
    }

    public getRuletable_result() {
    }

    public getRuletable_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuletable_result(getRuletable_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public getRuletable_result deepCopy() {
      return new getRuletable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public getRuletable_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public getRuletable_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRuletable_result)
        return this.equals((getRuletable_result)that);
      return false;
    }

    public boolean equals(getRuletable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRuletable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRuletable_result typedOther = (getRuletable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRuletable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveBegin_args implements org.apache.thrift.TBase<receiveBegin_args, receiveBegin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveBegin_args");

    private static final org.apache.thrift.protocol.TField IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ipaddress", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String Ipaddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPADDRESS((short)1, "Ipaddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPADDRESS
            return IPADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Ipaddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveBegin_args.class, metaDataMap);
    }

    public receiveBegin_args() {
    }

    public receiveBegin_args(
      String Ipaddress)
    {
      this();
      this.Ipaddress = Ipaddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveBegin_args(receiveBegin_args other) {
      if (other.isSetIpaddress()) {
        this.Ipaddress = other.Ipaddress;
      }
    }

    public receiveBegin_args deepCopy() {
      return new receiveBegin_args(this);
    }

    @Override
    public void clear() {
      this.Ipaddress = null;
    }

    public String getIpaddress() {
      return this.Ipaddress;
    }

    public receiveBegin_args setIpaddress(String Ipaddress) {
      this.Ipaddress = Ipaddress;
      return this;
    }

    public void unsetIpaddress() {
      this.Ipaddress = null;
    }

    /** Returns true if field Ipaddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddress() {
      return this.Ipaddress != null;
    }

    public void setIpaddressIsSet(boolean value) {
      if (!value) {
        this.Ipaddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPADDRESS:
        if (value == null) {
          unsetIpaddress();
        } else {
          setIpaddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPADDRESS:
        return getIpaddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPADDRESS:
        return isSetIpaddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveBegin_args)
        return this.equals((receiveBegin_args)that);
      return false;
    }

    public boolean equals(receiveBegin_args that) {
      if (that == null)
        return false;

      boolean this_present_Ipaddress = true && this.isSetIpaddress();
      boolean that_present_Ipaddress = true && that.isSetIpaddress();
      if (this_present_Ipaddress || that_present_Ipaddress) {
        if (!(this_present_Ipaddress && that_present_Ipaddress))
          return false;
        if (!this.Ipaddress.equals(that.Ipaddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveBegin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveBegin_args typedOther = (receiveBegin_args)other;

      lastComparison = Boolean.valueOf(isSetIpaddress()).compareTo(typedOther.isSetIpaddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ipaddress, typedOther.Ipaddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IPADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Ipaddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.Ipaddress != null) {
        oprot.writeFieldBegin(IPADDRESS_FIELD_DESC);
        oprot.writeString(this.Ipaddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveBegin_args(");
      boolean first = true;

      sb.append("Ipaddress:");
      if (this.Ipaddress == null) {
        sb.append("null");
      } else {
        sb.append(this.Ipaddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveBegin_result implements org.apache.thrift.TBase<receiveBegin_result, receiveBegin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveBegin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveBegin_result.class, metaDataMap);
    }

    public receiveBegin_result() {
    }

    public receiveBegin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveBegin_result(receiveBegin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public receiveBegin_result deepCopy() {
      return new receiveBegin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public receiveBegin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveBegin_result)
        return this.equals((receiveBegin_result)that);
      return false;
    }

    public boolean equals(receiveBegin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveBegin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveBegin_result typedOther = (receiveBegin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveBegin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveChunk_args implements org.apache.thrift.TBase<receiveChunk_args, receiveChunk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveChunk_args");

    private static final org.apache.thrift.protocol.TField IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ipaddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("Itemid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CHUNKDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunkdata", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHUNKNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunknum", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CHUNKNUMTOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunknumtotal", org.apache.thrift.protocol.TType.I32, (short)5);

    public String Ipaddress; // required
    public long Itemid; // required
    public ByteBuffer Chunkdata; // required
    public int Chunknum; // required
    public int Chunknumtotal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPADDRESS((short)1, "Ipaddress"),
      ITEMID((short)2, "Itemid"),
      CHUNKDATA((short)3, "Chunkdata"),
      CHUNKNUM((short)4, "Chunknum"),
      CHUNKNUMTOTAL((short)5, "Chunknumtotal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPADDRESS
            return IPADDRESS;
          case 2: // ITEMID
            return ITEMID;
          case 3: // CHUNKDATA
            return CHUNKDATA;
          case 4: // CHUNKNUM
            return CHUNKNUM;
          case 5: // CHUNKNUMTOTAL
            return CHUNKNUMTOTAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ITEMID_ISSET_ID = 0;
    private static final int __CHUNKNUM_ISSET_ID = 1;
    private static final int __CHUNKNUMTOTAL_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Ipaddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEMID, new org.apache.thrift.meta_data.FieldMetaData("Itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHUNKDATA, new org.apache.thrift.meta_data.FieldMetaData("Chunkdata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CHUNKNUM, new org.apache.thrift.meta_data.FieldMetaData("Chunknum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHUNKNUMTOTAL, new org.apache.thrift.meta_data.FieldMetaData("Chunknumtotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveChunk_args.class, metaDataMap);
    }

    public receiveChunk_args() {
    }

    public receiveChunk_args(
      String Ipaddress,
      long Itemid,
      ByteBuffer Chunkdata,
      int Chunknum,
      int Chunknumtotal)
    {
      this();
      this.Ipaddress = Ipaddress;
      this.Itemid = Itemid;
      setItemidIsSet(true);
      this.Chunkdata = Chunkdata;
      this.Chunknum = Chunknum;
      setChunknumIsSet(true);
      this.Chunknumtotal = Chunknumtotal;
      setChunknumtotalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveChunk_args(receiveChunk_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetIpaddress()) {
        this.Ipaddress = other.Ipaddress;
      }
      this.Itemid = other.Itemid;
      if (other.isSetChunkdata()) {
        this.Chunkdata = org.apache.thrift.TBaseHelper.copyBinary(other.Chunkdata);
;
      }
      this.Chunknum = other.Chunknum;
      this.Chunknumtotal = other.Chunknumtotal;
    }

    public receiveChunk_args deepCopy() {
      return new receiveChunk_args(this);
    }

    @Override
    public void clear() {
      this.Ipaddress = null;
      setItemidIsSet(false);
      this.Itemid = 0;
      this.Chunkdata = null;
      setChunknumIsSet(false);
      this.Chunknum = 0;
      setChunknumtotalIsSet(false);
      this.Chunknumtotal = 0;
    }

    public String getIpaddress() {
      return this.Ipaddress;
    }

    public receiveChunk_args setIpaddress(String Ipaddress) {
      this.Ipaddress = Ipaddress;
      return this;
    }

    public void unsetIpaddress() {
      this.Ipaddress = null;
    }

    /** Returns true if field Ipaddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddress() {
      return this.Ipaddress != null;
    }

    public void setIpaddressIsSet(boolean value) {
      if (!value) {
        this.Ipaddress = null;
      }
    }

    public long getItemid() {
      return this.Itemid;
    }

    public receiveChunk_args setItemid(long Itemid) {
      this.Itemid = Itemid;
      setItemidIsSet(true);
      return this;
    }

    public void unsetItemid() {
      __isset_bit_vector.clear(__ITEMID_ISSET_ID);
    }

    /** Returns true if field Itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetItemid() {
      return __isset_bit_vector.get(__ITEMID_ISSET_ID);
    }

    public void setItemidIsSet(boolean value) {
      __isset_bit_vector.set(__ITEMID_ISSET_ID, value);
    }

    public byte[] getChunkdata() {
      setChunkdata(org.apache.thrift.TBaseHelper.rightSize(Chunkdata));
      return Chunkdata == null ? null : Chunkdata.array();
    }

    public ByteBuffer bufferForChunkdata() {
      return Chunkdata;
    }

    public receiveChunk_args setChunkdata(byte[] Chunkdata) {
      setChunkdata(Chunkdata == null ? (ByteBuffer)null : ByteBuffer.wrap(Chunkdata));
      return this;
    }

    public receiveChunk_args setChunkdata(ByteBuffer Chunkdata) {
      this.Chunkdata = Chunkdata;
      return this;
    }

    public void unsetChunkdata() {
      this.Chunkdata = null;
    }

    /** Returns true if field Chunkdata is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkdata() {
      return this.Chunkdata != null;
    }

    public void setChunkdataIsSet(boolean value) {
      if (!value) {
        this.Chunkdata = null;
      }
    }

    public int getChunknum() {
      return this.Chunknum;
    }

    public receiveChunk_args setChunknum(int Chunknum) {
      this.Chunknum = Chunknum;
      setChunknumIsSet(true);
      return this;
    }

    public void unsetChunknum() {
      __isset_bit_vector.clear(__CHUNKNUM_ISSET_ID);
    }

    /** Returns true if field Chunknum is set (has been assigned a value) and false otherwise */
    public boolean isSetChunknum() {
      return __isset_bit_vector.get(__CHUNKNUM_ISSET_ID);
    }

    public void setChunknumIsSet(boolean value) {
      __isset_bit_vector.set(__CHUNKNUM_ISSET_ID, value);
    }

    public int getChunknumtotal() {
      return this.Chunknumtotal;
    }

    public receiveChunk_args setChunknumtotal(int Chunknumtotal) {
      this.Chunknumtotal = Chunknumtotal;
      setChunknumtotalIsSet(true);
      return this;
    }

    public void unsetChunknumtotal() {
      __isset_bit_vector.clear(__CHUNKNUMTOTAL_ISSET_ID);
    }

    /** Returns true if field Chunknumtotal is set (has been assigned a value) and false otherwise */
    public boolean isSetChunknumtotal() {
      return __isset_bit_vector.get(__CHUNKNUMTOTAL_ISSET_ID);
    }

    public void setChunknumtotalIsSet(boolean value) {
      __isset_bit_vector.set(__CHUNKNUMTOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPADDRESS:
        if (value == null) {
          unsetIpaddress();
        } else {
          setIpaddress((String)value);
        }
        break;

      case ITEMID:
        if (value == null) {
          unsetItemid();
        } else {
          setItemid((Long)value);
        }
        break;

      case CHUNKDATA:
        if (value == null) {
          unsetChunkdata();
        } else {
          setChunkdata((ByteBuffer)value);
        }
        break;

      case CHUNKNUM:
        if (value == null) {
          unsetChunknum();
        } else {
          setChunknum((Integer)value);
        }
        break;

      case CHUNKNUMTOTAL:
        if (value == null) {
          unsetChunknumtotal();
        } else {
          setChunknumtotal((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPADDRESS:
        return getIpaddress();

      case ITEMID:
        return Long.valueOf(getItemid());

      case CHUNKDATA:
        return getChunkdata();

      case CHUNKNUM:
        return Integer.valueOf(getChunknum());

      case CHUNKNUMTOTAL:
        return Integer.valueOf(getChunknumtotal());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPADDRESS:
        return isSetIpaddress();
      case ITEMID:
        return isSetItemid();
      case CHUNKDATA:
        return isSetChunkdata();
      case CHUNKNUM:
        return isSetChunknum();
      case CHUNKNUMTOTAL:
        return isSetChunknumtotal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveChunk_args)
        return this.equals((receiveChunk_args)that);
      return false;
    }

    public boolean equals(receiveChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_Ipaddress = true && this.isSetIpaddress();
      boolean that_present_Ipaddress = true && that.isSetIpaddress();
      if (this_present_Ipaddress || that_present_Ipaddress) {
        if (!(this_present_Ipaddress && that_present_Ipaddress))
          return false;
        if (!this.Ipaddress.equals(that.Ipaddress))
          return false;
      }

      boolean this_present_Itemid = true;
      boolean that_present_Itemid = true;
      if (this_present_Itemid || that_present_Itemid) {
        if (!(this_present_Itemid && that_present_Itemid))
          return false;
        if (this.Itemid != that.Itemid)
          return false;
      }

      boolean this_present_Chunkdata = true && this.isSetChunkdata();
      boolean that_present_Chunkdata = true && that.isSetChunkdata();
      if (this_present_Chunkdata || that_present_Chunkdata) {
        if (!(this_present_Chunkdata && that_present_Chunkdata))
          return false;
        if (!this.Chunkdata.equals(that.Chunkdata))
          return false;
      }

      boolean this_present_Chunknum = true;
      boolean that_present_Chunknum = true;
      if (this_present_Chunknum || that_present_Chunknum) {
        if (!(this_present_Chunknum && that_present_Chunknum))
          return false;
        if (this.Chunknum != that.Chunknum)
          return false;
      }

      boolean this_present_Chunknumtotal = true;
      boolean that_present_Chunknumtotal = true;
      if (this_present_Chunknumtotal || that_present_Chunknumtotal) {
        if (!(this_present_Chunknumtotal && that_present_Chunknumtotal))
          return false;
        if (this.Chunknumtotal != that.Chunknumtotal)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveChunk_args typedOther = (receiveChunk_args)other;

      lastComparison = Boolean.valueOf(isSetIpaddress()).compareTo(typedOther.isSetIpaddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ipaddress, typedOther.Ipaddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemid()).compareTo(typedOther.isSetItemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Itemid, typedOther.Itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunkdata()).compareTo(typedOther.isSetChunkdata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkdata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunkdata, typedOther.Chunkdata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunknum()).compareTo(typedOther.isSetChunknum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunknum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunknum, typedOther.Chunknum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunknumtotal()).compareTo(typedOther.isSetChunknumtotal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunknumtotal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunknumtotal, typedOther.Chunknumtotal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IPADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Ipaddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ITEMID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.Itemid = iprot.readI64();
              setItemidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CHUNKDATA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Chunkdata = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CHUNKNUM
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Chunknum = iprot.readI32();
              setChunknumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CHUNKNUMTOTAL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Chunknumtotal = iprot.readI32();
              setChunknumtotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.Ipaddress != null) {
        oprot.writeFieldBegin(IPADDRESS_FIELD_DESC);
        oprot.writeString(this.Ipaddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEMID_FIELD_DESC);
      oprot.writeI64(this.Itemid);
      oprot.writeFieldEnd();
      if (this.Chunkdata != null) {
        oprot.writeFieldBegin(CHUNKDATA_FIELD_DESC);
        oprot.writeBinary(this.Chunkdata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHUNKNUM_FIELD_DESC);
      oprot.writeI32(this.Chunknum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNKNUMTOTAL_FIELD_DESC);
      oprot.writeI32(this.Chunknumtotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveChunk_args(");
      boolean first = true;

      sb.append("Ipaddress:");
      if (this.Ipaddress == null) {
        sb.append("null");
      } else {
        sb.append(this.Ipaddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Itemid:");
      sb.append(this.Itemid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunkdata:");
      if (this.Chunkdata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Chunkdata, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunknum:");
      sb.append(this.Chunknum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunknumtotal:");
      sb.append(this.Chunknumtotal);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveChunk_result implements org.apache.thrift.TBase<receiveChunk_result, receiveChunk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveChunk_result.class, metaDataMap);
    }

    public receiveChunk_result() {
    }

    public receiveChunk_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveChunk_result(receiveChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public receiveChunk_result deepCopy() {
      return new receiveChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public receiveChunk_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveChunk_result)
        return this.equals((receiveChunk_result)that);
      return false;
    }

    public boolean equals(receiveChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveChunk_result typedOther = (receiveChunk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
