/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.mydlp.ui.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Mydlp_ui {

  public interface Iface {

    public void compileCustomer(int Customerid) throws org.apache.thrift.TException;

    public String getCompileStatus() throws org.apache.thrift.TException;

    public ByteBuffer getRuletable(String EndpointId, String Revisionid) throws org.apache.thrift.TException;

    public String receiveBegin(String EndpointId) throws org.apache.thrift.TException;

    public String receiveChunk(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException;

    public void generateFingerprints(long DocumentId, String Filename, ByteBuffer Data) throws org.apache.thrift.TException;

    public void generateFingerprintsWithFile(long DocumentId, String Filename, String Filepath) throws org.apache.thrift.TException;

    public void requeueIncident(long Incidentid) throws org.apache.thrift.TException;

    public Map<String,String> registerUserAddress(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload) throws org.apache.thrift.TException;

    public String saveLicenseKey(String licenseKey) throws org.apache.thrift.TException;

    public LicenseObject getLicense() throws org.apache.thrift.TException;

    public String apiQuery(String Ipaddress, String Filename, String User, ByteBuffer Data) throws org.apache.thrift.TException;

    public void startDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException;

    public void stopDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException;

    public void pauseDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException;

    public void stopReportBeforeRemoveRule(int RuleId) throws org.apache.thrift.TException;

    public List<String> getRemoteStorageDir(int RSId) throws org.apache.thrift.TException;

    public void startFingerprinting(int DDId) throws org.apache.thrift.TException;

    public void stopFingerprinting(int DDId) throws org.apache.thrift.TException;

    public String testConnection(Map<String,String> RemoteStorage) throws org.apache.thrift.TException;

    public String testWebServer(String URL) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void compileCustomer(int Customerid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.compileCustomer_call> resultHandler) throws org.apache.thrift.TException;

    public void getCompileStatus(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCompileStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getRuletable(String EndpointId, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRuletable_call> resultHandler) throws org.apache.thrift.TException;

    public void receiveBegin(String EndpointId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.receiveBegin_call> resultHandler) throws org.apache.thrift.TException;

    public void receiveChunk(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.receiveChunk_call> resultHandler) throws org.apache.thrift.TException;

    public void generateFingerprints(long DocumentId, String Filename, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateFingerprints_call> resultHandler) throws org.apache.thrift.TException;

    public void generateFingerprintsWithFile(long DocumentId, String Filename, String Filepath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generateFingerprintsWithFile_call> resultHandler) throws org.apache.thrift.TException;

    public void requeueIncident(long Incidentid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requeueIncident_call> resultHandler) throws org.apache.thrift.TException;

    public void registerUserAddress(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerUserAddress_call> resultHandler) throws org.apache.thrift.TException;

    public void saveLicenseKey(String licenseKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.saveLicenseKey_call> resultHandler) throws org.apache.thrift.TException;

    public void getLicense(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLicense_call> resultHandler) throws org.apache.thrift.TException;

    public void apiQuery(String Ipaddress, String Filename, String User, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.apiQuery_call> resultHandler) throws org.apache.thrift.TException;

    public void startDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException;

    public void stopDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException;

    public void pauseDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pauseDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException;

    public void stopReportBeforeRemoveRule(int RuleId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopReportBeforeRemoveRule_call> resultHandler) throws org.apache.thrift.TException;

    public void getRemoteStorageDir(int RSId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRemoteStorageDir_call> resultHandler) throws org.apache.thrift.TException;

    public void startFingerprinting(int DDId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startFingerprinting_call> resultHandler) throws org.apache.thrift.TException;

    public void stopFingerprinting(int DDId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopFingerprinting_call> resultHandler) throws org.apache.thrift.TException;

    public void testConnection(Map<String,String> RemoteStorage, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testConnection_call> resultHandler) throws org.apache.thrift.TException;

    public void testWebServer(String URL, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testWebServer_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void compileCustomer(int Customerid) throws org.apache.thrift.TException
    {
      send_compileCustomer(Customerid);
      recv_compileCustomer();
    }

    public void send_compileCustomer(int Customerid) throws org.apache.thrift.TException
    {
      compileCustomer_args args = new compileCustomer_args();
      args.setCustomerid(Customerid);
      sendBase("compileCustomer", args);
    }

    public void recv_compileCustomer() throws org.apache.thrift.TException
    {
      compileCustomer_result result = new compileCustomer_result();
      receiveBase(result, "compileCustomer");
      return;
    }

    public String getCompileStatus() throws org.apache.thrift.TException
    {
      send_getCompileStatus();
      return recv_getCompileStatus();
    }

    public void send_getCompileStatus() throws org.apache.thrift.TException
    {
      getCompileStatus_args args = new getCompileStatus_args();
      sendBase("getCompileStatus", args);
    }

    public String recv_getCompileStatus() throws org.apache.thrift.TException
    {
      getCompileStatus_result result = new getCompileStatus_result();
      receiveBase(result, "getCompileStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompileStatus failed: unknown result");
    }

    public ByteBuffer getRuletable(String EndpointId, String Revisionid) throws org.apache.thrift.TException
    {
      send_getRuletable(EndpointId, Revisionid);
      return recv_getRuletable();
    }

    public void send_getRuletable(String EndpointId, String Revisionid) throws org.apache.thrift.TException
    {
      getRuletable_args args = new getRuletable_args();
      args.setEndpointId(EndpointId);
      args.setRevisionid(Revisionid);
      sendBase("getRuletable", args);
    }

    public ByteBuffer recv_getRuletable() throws org.apache.thrift.TException
    {
      getRuletable_result result = new getRuletable_result();
      receiveBase(result, "getRuletable");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRuletable failed: unknown result");
    }

    public String receiveBegin(String EndpointId) throws org.apache.thrift.TException
    {
      send_receiveBegin(EndpointId);
      return recv_receiveBegin();
    }

    public void send_receiveBegin(String EndpointId) throws org.apache.thrift.TException
    {
      receiveBegin_args args = new receiveBegin_args();
      args.setEndpointId(EndpointId);
      sendBase("receiveBegin", args);
    }

    public String recv_receiveBegin() throws org.apache.thrift.TException
    {
      receiveBegin_result result = new receiveBegin_result();
      receiveBase(result, "receiveBegin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveBegin failed: unknown result");
    }

    public String receiveChunk(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException
    {
      send_receiveChunk(EndpointId, Itemid, Chunkdata, Chunknum, Chunknumtotal);
      return recv_receiveChunk();
    }

    public void send_receiveChunk(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal) throws org.apache.thrift.TException
    {
      receiveChunk_args args = new receiveChunk_args();
      args.setEndpointId(EndpointId);
      args.setItemid(Itemid);
      args.setChunkdata(Chunkdata);
      args.setChunknum(Chunknum);
      args.setChunknumtotal(Chunknumtotal);
      sendBase("receiveChunk", args);
    }

    public String recv_receiveChunk() throws org.apache.thrift.TException
    {
      receiveChunk_result result = new receiveChunk_result();
      receiveBase(result, "receiveChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiveChunk failed: unknown result");
    }

    public void generateFingerprints(long DocumentId, String Filename, ByteBuffer Data) throws org.apache.thrift.TException
    {
      send_generateFingerprints(DocumentId, Filename, Data);
      recv_generateFingerprints();
    }

    public void send_generateFingerprints(long DocumentId, String Filename, ByteBuffer Data) throws org.apache.thrift.TException
    {
      generateFingerprints_args args = new generateFingerprints_args();
      args.setDocumentId(DocumentId);
      args.setFilename(Filename);
      args.setData(Data);
      sendBase("generateFingerprints", args);
    }

    public void recv_generateFingerprints() throws org.apache.thrift.TException
    {
      generateFingerprints_result result = new generateFingerprints_result();
      receiveBase(result, "generateFingerprints");
      return;
    }

    public void generateFingerprintsWithFile(long DocumentId, String Filename, String Filepath) throws org.apache.thrift.TException
    {
      send_generateFingerprintsWithFile(DocumentId, Filename, Filepath);
      recv_generateFingerprintsWithFile();
    }

    public void send_generateFingerprintsWithFile(long DocumentId, String Filename, String Filepath) throws org.apache.thrift.TException
    {
      generateFingerprintsWithFile_args args = new generateFingerprintsWithFile_args();
      args.setDocumentId(DocumentId);
      args.setFilename(Filename);
      args.setFilepath(Filepath);
      sendBase("generateFingerprintsWithFile", args);
    }

    public void recv_generateFingerprintsWithFile() throws org.apache.thrift.TException
    {
      generateFingerprintsWithFile_result result = new generateFingerprintsWithFile_result();
      receiveBase(result, "generateFingerprintsWithFile");
      return;
    }

    public void requeueIncident(long Incidentid) throws org.apache.thrift.TException
    {
      send_requeueIncident(Incidentid);
    }

    public void send_requeueIncident(long Incidentid) throws org.apache.thrift.TException
    {
      requeueIncident_args args = new requeueIncident_args();
      args.setIncidentid(Incidentid);
      sendBase("requeueIncident", args);
    }

    public Map<String,String> registerUserAddress(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload) throws org.apache.thrift.TException
    {
      send_registerUserAddress(EndpointId, Ipaddress, Userh, Payload);
      return recv_registerUserAddress();
    }

    public void send_registerUserAddress(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload) throws org.apache.thrift.TException
    {
      registerUserAddress_args args = new registerUserAddress_args();
      args.setEndpointId(EndpointId);
      args.setIpaddress(Ipaddress);
      args.setUserh(Userh);
      args.setPayload(Payload);
      sendBase("registerUserAddress", args);
    }

    public Map<String,String> recv_registerUserAddress() throws org.apache.thrift.TException
    {
      registerUserAddress_result result = new registerUserAddress_result();
      receiveBase(result, "registerUserAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerUserAddress failed: unknown result");
    }

    public String saveLicenseKey(String licenseKey) throws org.apache.thrift.TException
    {
      send_saveLicenseKey(licenseKey);
      return recv_saveLicenseKey();
    }

    public void send_saveLicenseKey(String licenseKey) throws org.apache.thrift.TException
    {
      saveLicenseKey_args args = new saveLicenseKey_args();
      args.setLicenseKey(licenseKey);
      sendBase("saveLicenseKey", args);
    }

    public String recv_saveLicenseKey() throws org.apache.thrift.TException
    {
      saveLicenseKey_result result = new saveLicenseKey_result();
      receiveBase(result, "saveLicenseKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveLicenseKey failed: unknown result");
    }

    public LicenseObject getLicense() throws org.apache.thrift.TException
    {
      send_getLicense();
      return recv_getLicense();
    }

    public void send_getLicense() throws org.apache.thrift.TException
    {
      getLicense_args args = new getLicense_args();
      sendBase("getLicense", args);
    }

    public LicenseObject recv_getLicense() throws org.apache.thrift.TException
    {
      getLicense_result result = new getLicense_result();
      receiveBase(result, "getLicense");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLicense failed: unknown result");
    }

    public String apiQuery(String Ipaddress, String Filename, String User, ByteBuffer Data) throws org.apache.thrift.TException
    {
      send_apiQuery(Ipaddress, Filename, User, Data);
      return recv_apiQuery();
    }

    public void send_apiQuery(String Ipaddress, String Filename, String User, ByteBuffer Data) throws org.apache.thrift.TException
    {
      apiQuery_args args = new apiQuery_args();
      args.setIpaddress(Ipaddress);
      args.setFilename(Filename);
      args.setUser(User);
      args.setData(Data);
      sendBase("apiQuery", args);
    }

    public String recv_apiQuery() throws org.apache.thrift.TException
    {
      apiQuery_result result = new apiQuery_result();
      receiveBase(result, "apiQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "apiQuery failed: unknown result");
    }

    public void startDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      send_startDiscoveryOnDemand(RuleId);
    }

    public void send_startDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      startDiscoveryOnDemand_args args = new startDiscoveryOnDemand_args();
      args.setRuleId(RuleId);
      sendBase("startDiscoveryOnDemand", args);
    }

    public void stopDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      send_stopDiscoveryOnDemand(RuleId);
    }

    public void send_stopDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      stopDiscoveryOnDemand_args args = new stopDiscoveryOnDemand_args();
      args.setRuleId(RuleId);
      sendBase("stopDiscoveryOnDemand", args);
    }

    public void pauseDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      send_pauseDiscoveryOnDemand(RuleId);
    }

    public void send_pauseDiscoveryOnDemand(int RuleId) throws org.apache.thrift.TException
    {
      pauseDiscoveryOnDemand_args args = new pauseDiscoveryOnDemand_args();
      args.setRuleId(RuleId);
      sendBase("pauseDiscoveryOnDemand", args);
    }

    public void stopReportBeforeRemoveRule(int RuleId) throws org.apache.thrift.TException
    {
      send_stopReportBeforeRemoveRule(RuleId);
    }

    public void send_stopReportBeforeRemoveRule(int RuleId) throws org.apache.thrift.TException
    {
      stopReportBeforeRemoveRule_args args = new stopReportBeforeRemoveRule_args();
      args.setRuleId(RuleId);
      sendBase("stopReportBeforeRemoveRule", args);
    }

    public List<String> getRemoteStorageDir(int RSId) throws org.apache.thrift.TException
    {
      send_getRemoteStorageDir(RSId);
      return recv_getRemoteStorageDir();
    }

    public void send_getRemoteStorageDir(int RSId) throws org.apache.thrift.TException
    {
      getRemoteStorageDir_args args = new getRemoteStorageDir_args();
      args.setRSId(RSId);
      sendBase("getRemoteStorageDir", args);
    }

    public List<String> recv_getRemoteStorageDir() throws org.apache.thrift.TException
    {
      getRemoteStorageDir_result result = new getRemoteStorageDir_result();
      receiveBase(result, "getRemoteStorageDir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRemoteStorageDir failed: unknown result");
    }

    public void startFingerprinting(int DDId) throws org.apache.thrift.TException
    {
      send_startFingerprinting(DDId);
    }

    public void send_startFingerprinting(int DDId) throws org.apache.thrift.TException
    {
      startFingerprinting_args args = new startFingerprinting_args();
      args.setDDId(DDId);
      sendBase("startFingerprinting", args);
    }

    public void stopFingerprinting(int DDId) throws org.apache.thrift.TException
    {
      send_stopFingerprinting(DDId);
    }

    public void send_stopFingerprinting(int DDId) throws org.apache.thrift.TException
    {
      stopFingerprinting_args args = new stopFingerprinting_args();
      args.setDDId(DDId);
      sendBase("stopFingerprinting", args);
    }

    public String testConnection(Map<String,String> RemoteStorage) throws org.apache.thrift.TException
    {
      send_testConnection(RemoteStorage);
      return recv_testConnection();
    }

    public void send_testConnection(Map<String,String> RemoteStorage) throws org.apache.thrift.TException
    {
      testConnection_args args = new testConnection_args();
      args.setRemoteStorage(RemoteStorage);
      sendBase("testConnection", args);
    }

    public String recv_testConnection() throws org.apache.thrift.TException
    {
      testConnection_result result = new testConnection_result();
      receiveBase(result, "testConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testConnection failed: unknown result");
    }

    public String testWebServer(String URL) throws org.apache.thrift.TException
    {
      send_testWebServer(URL);
      return recv_testWebServer();
    }

    public void send_testWebServer(String URL) throws org.apache.thrift.TException
    {
      testWebServer_args args = new testWebServer_args();
      args.setURL(URL);
      sendBase("testWebServer", args);
    }

    public String recv_testWebServer() throws org.apache.thrift.TException
    {
      testWebServer_result result = new testWebServer_result();
      receiveBase(result, "testWebServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testWebServer failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void compileCustomer(int Customerid, org.apache.thrift.async.AsyncMethodCallback<compileCustomer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compileCustomer_call method_call = new compileCustomer_call(Customerid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compileCustomer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int Customerid;
      public compileCustomer_call(int Customerid, org.apache.thrift.async.AsyncMethodCallback<compileCustomer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Customerid = Customerid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compileCustomer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compileCustomer_args args = new compileCustomer_args();
        args.setCustomerid(Customerid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_compileCustomer();
      }
    }

    public void getCompileStatus(org.apache.thrift.async.AsyncMethodCallback<getCompileStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompileStatus_call method_call = new getCompileStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompileStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCompileStatus_call(org.apache.thrift.async.AsyncMethodCallback<getCompileStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompileStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompileStatus_args args = new getCompileStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompileStatus();
      }
    }

    public void getRuletable(String EndpointId, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<getRuletable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRuletable_call method_call = new getRuletable_call(EndpointId, Revisionid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRuletable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String EndpointId;
      private String Revisionid;
      public getRuletable_call(String EndpointId, String Revisionid, org.apache.thrift.async.AsyncMethodCallback<getRuletable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EndpointId = EndpointId;
        this.Revisionid = Revisionid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRuletable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRuletable_args args = new getRuletable_args();
        args.setEndpointId(EndpointId);
        args.setRevisionid(Revisionid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRuletable();
      }
    }

    public void receiveBegin(String EndpointId, org.apache.thrift.async.AsyncMethodCallback<receiveBegin_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveBegin_call method_call = new receiveBegin_call(EndpointId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveBegin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String EndpointId;
      public receiveBegin_call(String EndpointId, org.apache.thrift.async.AsyncMethodCallback<receiveBegin_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EndpointId = EndpointId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveBegin_args args = new receiveBegin_args();
        args.setEndpointId(EndpointId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveBegin();
      }
    }

    public void receiveChunk(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<receiveChunk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveChunk_call method_call = new receiveChunk_call(EndpointId, Itemid, Chunkdata, Chunknum, Chunknumtotal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String EndpointId;
      private long Itemid;
      private ByteBuffer Chunkdata;
      private int Chunknum;
      private int Chunknumtotal;
      public receiveChunk_call(String EndpointId, long Itemid, ByteBuffer Chunkdata, int Chunknum, int Chunknumtotal, org.apache.thrift.async.AsyncMethodCallback<receiveChunk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EndpointId = EndpointId;
        this.Itemid = Itemid;
        this.Chunkdata = Chunkdata;
        this.Chunknum = Chunknum;
        this.Chunknumtotal = Chunknumtotal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveChunk_args args = new receiveChunk_args();
        args.setEndpointId(EndpointId);
        args.setItemid(Itemid);
        args.setChunkdata(Chunkdata);
        args.setChunknum(Chunknum);
        args.setChunknumtotal(Chunknumtotal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiveChunk();
      }
    }

    public void generateFingerprints(long DocumentId, String Filename, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<generateFingerprints_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateFingerprints_call method_call = new generateFingerprints_call(DocumentId, Filename, Data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateFingerprints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long DocumentId;
      private String Filename;
      private ByteBuffer Data;
      public generateFingerprints_call(long DocumentId, String Filename, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<generateFingerprints_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DocumentId = DocumentId;
        this.Filename = Filename;
        this.Data = Data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateFingerprints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateFingerprints_args args = new generateFingerprints_args();
        args.setDocumentId(DocumentId);
        args.setFilename(Filename);
        args.setData(Data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_generateFingerprints();
      }
    }

    public void generateFingerprintsWithFile(long DocumentId, String Filename, String Filepath, org.apache.thrift.async.AsyncMethodCallback<generateFingerprintsWithFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generateFingerprintsWithFile_call method_call = new generateFingerprintsWithFile_call(DocumentId, Filename, Filepath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generateFingerprintsWithFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long DocumentId;
      private String Filename;
      private String Filepath;
      public generateFingerprintsWithFile_call(long DocumentId, String Filename, String Filepath, org.apache.thrift.async.AsyncMethodCallback<generateFingerprintsWithFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DocumentId = DocumentId;
        this.Filename = Filename;
        this.Filepath = Filepath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateFingerprintsWithFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generateFingerprintsWithFile_args args = new generateFingerprintsWithFile_args();
        args.setDocumentId(DocumentId);
        args.setFilename(Filename);
        args.setFilepath(Filepath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_generateFingerprintsWithFile();
      }
    }

    public void requeueIncident(long Incidentid, org.apache.thrift.async.AsyncMethodCallback<requeueIncident_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requeueIncident_call method_call = new requeueIncident_call(Incidentid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requeueIncident_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long Incidentid;
      public requeueIncident_call(long Incidentid, org.apache.thrift.async.AsyncMethodCallback<requeueIncident_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.Incidentid = Incidentid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requeueIncident", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requeueIncident_args args = new requeueIncident_args();
        args.setIncidentid(Incidentid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void registerUserAddress(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload, org.apache.thrift.async.AsyncMethodCallback<registerUserAddress_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerUserAddress_call method_call = new registerUserAddress_call(EndpointId, Ipaddress, Userh, Payload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerUserAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String EndpointId;
      private String Ipaddress;
      private String Userh;
      private ByteBuffer Payload;
      public registerUserAddress_call(String EndpointId, String Ipaddress, String Userh, ByteBuffer Payload, org.apache.thrift.async.AsyncMethodCallback<registerUserAddress_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.EndpointId = EndpointId;
        this.Ipaddress = Ipaddress;
        this.Userh = Userh;
        this.Payload = Payload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerUserAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerUserAddress_args args = new registerUserAddress_args();
        args.setEndpointId(EndpointId);
        args.setIpaddress(Ipaddress);
        args.setUserh(Userh);
        args.setPayload(Payload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerUserAddress();
      }
    }

    public void saveLicenseKey(String licenseKey, org.apache.thrift.async.AsyncMethodCallback<saveLicenseKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveLicenseKey_call method_call = new saveLicenseKey_call(licenseKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveLicenseKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String licenseKey;
      public saveLicenseKey_call(String licenseKey, org.apache.thrift.async.AsyncMethodCallback<saveLicenseKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.licenseKey = licenseKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveLicenseKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveLicenseKey_args args = new saveLicenseKey_args();
        args.setLicenseKey(licenseKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveLicenseKey();
      }
    }

    public void getLicense(org.apache.thrift.async.AsyncMethodCallback<getLicense_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLicense_call method_call = new getLicense_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLicense_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getLicense_call(org.apache.thrift.async.AsyncMethodCallback<getLicense_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLicense", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLicense_args args = new getLicense_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LicenseObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLicense();
      }
    }

    public void apiQuery(String Ipaddress, String Filename, String User, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<apiQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apiQuery_call method_call = new apiQuery_call(Ipaddress, Filename, User, Data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apiQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Ipaddress;
      private String Filename;
      private String User;
      private ByteBuffer Data;
      public apiQuery_call(String Ipaddress, String Filename, String User, ByteBuffer Data, org.apache.thrift.async.AsyncMethodCallback<apiQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Ipaddress = Ipaddress;
        this.Filename = Filename;
        this.User = User;
        this.Data = Data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apiQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apiQuery_args args = new apiQuery_args();
        args.setIpaddress(Ipaddress);
        args.setFilename(Filename);
        args.setUser(User);
        args.setData(Data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_apiQuery();
      }
    }

    public void startDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<startDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startDiscoveryOnDemand_call method_call = new startDiscoveryOnDemand_call(RuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startDiscoveryOnDemand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int RuleId;
      public startDiscoveryOnDemand_call(int RuleId, org.apache.thrift.async.AsyncMethodCallback<startDiscoveryOnDemand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.RuleId = RuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startDiscoveryOnDemand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startDiscoveryOnDemand_args args = new startDiscoveryOnDemand_args();
        args.setRuleId(RuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void stopDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<stopDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopDiscoveryOnDemand_call method_call = new stopDiscoveryOnDemand_call(RuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopDiscoveryOnDemand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int RuleId;
      public stopDiscoveryOnDemand_call(int RuleId, org.apache.thrift.async.AsyncMethodCallback<stopDiscoveryOnDemand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.RuleId = RuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopDiscoveryOnDemand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopDiscoveryOnDemand_args args = new stopDiscoveryOnDemand_args();
        args.setRuleId(RuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void pauseDiscoveryOnDemand(int RuleId, org.apache.thrift.async.AsyncMethodCallback<pauseDiscoveryOnDemand_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pauseDiscoveryOnDemand_call method_call = new pauseDiscoveryOnDemand_call(RuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pauseDiscoveryOnDemand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int RuleId;
      public pauseDiscoveryOnDemand_call(int RuleId, org.apache.thrift.async.AsyncMethodCallback<pauseDiscoveryOnDemand_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.RuleId = RuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseDiscoveryOnDemand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pauseDiscoveryOnDemand_args args = new pauseDiscoveryOnDemand_args();
        args.setRuleId(RuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void stopReportBeforeRemoveRule(int RuleId, org.apache.thrift.async.AsyncMethodCallback<stopReportBeforeRemoveRule_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopReportBeforeRemoveRule_call method_call = new stopReportBeforeRemoveRule_call(RuleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopReportBeforeRemoveRule_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int RuleId;
      public stopReportBeforeRemoveRule_call(int RuleId, org.apache.thrift.async.AsyncMethodCallback<stopReportBeforeRemoveRule_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.RuleId = RuleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopReportBeforeRemoveRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopReportBeforeRemoveRule_args args = new stopReportBeforeRemoveRule_args();
        args.setRuleId(RuleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getRemoteStorageDir(int RSId, org.apache.thrift.async.AsyncMethodCallback<getRemoteStorageDir_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRemoteStorageDir_call method_call = new getRemoteStorageDir_call(RSId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRemoteStorageDir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int RSId;
      public getRemoteStorageDir_call(int RSId, org.apache.thrift.async.AsyncMethodCallback<getRemoteStorageDir_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.RSId = RSId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRemoteStorageDir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRemoteStorageDir_args args = new getRemoteStorageDir_args();
        args.setRSId(RSId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRemoteStorageDir();
      }
    }

    public void startFingerprinting(int DDId, org.apache.thrift.async.AsyncMethodCallback<startFingerprinting_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startFingerprinting_call method_call = new startFingerprinting_call(DDId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startFingerprinting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int DDId;
      public startFingerprinting_call(int DDId, org.apache.thrift.async.AsyncMethodCallback<startFingerprinting_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.DDId = DDId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startFingerprinting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startFingerprinting_args args = new startFingerprinting_args();
        args.setDDId(DDId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void stopFingerprinting(int DDId, org.apache.thrift.async.AsyncMethodCallback<stopFingerprinting_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopFingerprinting_call method_call = new stopFingerprinting_call(DDId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopFingerprinting_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int DDId;
      public stopFingerprinting_call(int DDId, org.apache.thrift.async.AsyncMethodCallback<stopFingerprinting_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.DDId = DDId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopFingerprinting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopFingerprinting_args args = new stopFingerprinting_args();
        args.setDDId(DDId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void testConnection(Map<String,String> RemoteStorage, org.apache.thrift.async.AsyncMethodCallback<testConnection_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testConnection_call method_call = new testConnection_call(RemoteStorage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> RemoteStorage;
      public testConnection_call(Map<String,String> RemoteStorage, org.apache.thrift.async.AsyncMethodCallback<testConnection_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.RemoteStorage = RemoteStorage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testConnection_args args = new testConnection_args();
        args.setRemoteStorage(RemoteStorage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testConnection();
      }
    }

    public void testWebServer(String URL, org.apache.thrift.async.AsyncMethodCallback<testWebServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testWebServer_call method_call = new testWebServer_call(URL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testWebServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String URL;
      public testWebServer_call(String URL, org.apache.thrift.async.AsyncMethodCallback<testWebServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.URL = URL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testWebServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testWebServer_args args = new testWebServer_args();
        args.setURL(URL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testWebServer();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("compileCustomer", new compileCustomer());
      processMap.put("getCompileStatus", new getCompileStatus());
      processMap.put("getRuletable", new getRuletable());
      processMap.put("receiveBegin", new receiveBegin());
      processMap.put("receiveChunk", new receiveChunk());
      processMap.put("generateFingerprints", new generateFingerprints());
      processMap.put("generateFingerprintsWithFile", new generateFingerprintsWithFile());
      processMap.put("requeueIncident", new requeueIncident());
      processMap.put("registerUserAddress", new registerUserAddress());
      processMap.put("saveLicenseKey", new saveLicenseKey());
      processMap.put("getLicense", new getLicense());
      processMap.put("apiQuery", new apiQuery());
      processMap.put("startDiscoveryOnDemand", new startDiscoveryOnDemand());
      processMap.put("stopDiscoveryOnDemand", new stopDiscoveryOnDemand());
      processMap.put("pauseDiscoveryOnDemand", new pauseDiscoveryOnDemand());
      processMap.put("stopReportBeforeRemoveRule", new stopReportBeforeRemoveRule());
      processMap.put("getRemoteStorageDir", new getRemoteStorageDir());
      processMap.put("startFingerprinting", new startFingerprinting());
      processMap.put("stopFingerprinting", new stopFingerprinting());
      processMap.put("testConnection", new testConnection());
      processMap.put("testWebServer", new testWebServer());
      return processMap;
    }

    private static class compileCustomer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compileCustomer_args> {
      public compileCustomer() {
        super("compileCustomer");
      }

      protected compileCustomer_args getEmptyArgsInstance() {
        return new compileCustomer_args();
      }

      protected compileCustomer_result getResult(I iface, compileCustomer_args args) throws org.apache.thrift.TException {
        compileCustomer_result result = new compileCustomer_result();
        iface.compileCustomer(args.Customerid);
        return result;
      }
    }

    private static class getCompileStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompileStatus_args> {
      public getCompileStatus() {
        super("getCompileStatus");
      }

      protected getCompileStatus_args getEmptyArgsInstance() {
        return new getCompileStatus_args();
      }

      protected getCompileStatus_result getResult(I iface, getCompileStatus_args args) throws org.apache.thrift.TException {
        getCompileStatus_result result = new getCompileStatus_result();
        result.success = iface.getCompileStatus();
        return result;
      }
    }

    private static class getRuletable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRuletable_args> {
      public getRuletable() {
        super("getRuletable");
      }

      protected getRuletable_args getEmptyArgsInstance() {
        return new getRuletable_args();
      }

      protected getRuletable_result getResult(I iface, getRuletable_args args) throws org.apache.thrift.TException {
        getRuletable_result result = new getRuletable_result();
        result.success = iface.getRuletable(args.EndpointId, args.Revisionid);
        return result;
      }
    }

    private static class receiveBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveBegin_args> {
      public receiveBegin() {
        super("receiveBegin");
      }

      protected receiveBegin_args getEmptyArgsInstance() {
        return new receiveBegin_args();
      }

      protected receiveBegin_result getResult(I iface, receiveBegin_args args) throws org.apache.thrift.TException {
        receiveBegin_result result = new receiveBegin_result();
        result.success = iface.receiveBegin(args.EndpointId);
        return result;
      }
    }

    private static class receiveChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveChunk_args> {
      public receiveChunk() {
        super("receiveChunk");
      }

      protected receiveChunk_args getEmptyArgsInstance() {
        return new receiveChunk_args();
      }

      protected receiveChunk_result getResult(I iface, receiveChunk_args args) throws org.apache.thrift.TException {
        receiveChunk_result result = new receiveChunk_result();
        result.success = iface.receiveChunk(args.EndpointId, args.Itemid, args.Chunkdata, args.Chunknum, args.Chunknumtotal);
        return result;
      }
    }

    private static class generateFingerprints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateFingerprints_args> {
      public generateFingerprints() {
        super("generateFingerprints");
      }

      protected generateFingerprints_args getEmptyArgsInstance() {
        return new generateFingerprints_args();
      }

      protected generateFingerprints_result getResult(I iface, generateFingerprints_args args) throws org.apache.thrift.TException {
        generateFingerprints_result result = new generateFingerprints_result();
        iface.generateFingerprints(args.DocumentId, args.Filename, args.Data);
        return result;
      }
    }

    private static class generateFingerprintsWithFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateFingerprintsWithFile_args> {
      public generateFingerprintsWithFile() {
        super("generateFingerprintsWithFile");
      }

      protected generateFingerprintsWithFile_args getEmptyArgsInstance() {
        return new generateFingerprintsWithFile_args();
      }

      protected generateFingerprintsWithFile_result getResult(I iface, generateFingerprintsWithFile_args args) throws org.apache.thrift.TException {
        generateFingerprintsWithFile_result result = new generateFingerprintsWithFile_result();
        iface.generateFingerprintsWithFile(args.DocumentId, args.Filename, args.Filepath);
        return result;
      }
    }

    private static class requeueIncident<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requeueIncident_args> {
      public requeueIncident() {
        super("requeueIncident");
      }

      protected requeueIncident_args getEmptyArgsInstance() {
        return new requeueIncident_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, requeueIncident_args args) throws org.apache.thrift.TException {
        iface.requeueIncident(args.Incidentid);
        return null;
      }
    }

    private static class registerUserAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerUserAddress_args> {
      public registerUserAddress() {
        super("registerUserAddress");
      }

      protected registerUserAddress_args getEmptyArgsInstance() {
        return new registerUserAddress_args();
      }

      protected registerUserAddress_result getResult(I iface, registerUserAddress_args args) throws org.apache.thrift.TException {
        registerUserAddress_result result = new registerUserAddress_result();
        result.success = iface.registerUserAddress(args.EndpointId, args.Ipaddress, args.Userh, args.Payload);
        return result;
      }
    }

    private static class saveLicenseKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveLicenseKey_args> {
      public saveLicenseKey() {
        super("saveLicenseKey");
      }

      protected saveLicenseKey_args getEmptyArgsInstance() {
        return new saveLicenseKey_args();
      }

      protected saveLicenseKey_result getResult(I iface, saveLicenseKey_args args) throws org.apache.thrift.TException {
        saveLicenseKey_result result = new saveLicenseKey_result();
        result.success = iface.saveLicenseKey(args.licenseKey);
        return result;
      }
    }

    private static class getLicense<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLicense_args> {
      public getLicense() {
        super("getLicense");
      }

      protected getLicense_args getEmptyArgsInstance() {
        return new getLicense_args();
      }

      protected getLicense_result getResult(I iface, getLicense_args args) throws org.apache.thrift.TException {
        getLicense_result result = new getLicense_result();
        result.success = iface.getLicense();
        return result;
      }
    }

    private static class apiQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apiQuery_args> {
      public apiQuery() {
        super("apiQuery");
      }

      protected apiQuery_args getEmptyArgsInstance() {
        return new apiQuery_args();
      }

      protected apiQuery_result getResult(I iface, apiQuery_args args) throws org.apache.thrift.TException {
        apiQuery_result result = new apiQuery_result();
        result.success = iface.apiQuery(args.Ipaddress, args.Filename, args.User, args.Data);
        return result;
      }
    }

    private static class startDiscoveryOnDemand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startDiscoveryOnDemand_args> {
      public startDiscoveryOnDemand() {
        super("startDiscoveryOnDemand");
      }

      protected startDiscoveryOnDemand_args getEmptyArgsInstance() {
        return new startDiscoveryOnDemand_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, startDiscoveryOnDemand_args args) throws org.apache.thrift.TException {
        iface.startDiscoveryOnDemand(args.RuleId);
        return null;
      }
    }

    private static class stopDiscoveryOnDemand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopDiscoveryOnDemand_args> {
      public stopDiscoveryOnDemand() {
        super("stopDiscoveryOnDemand");
      }

      protected stopDiscoveryOnDemand_args getEmptyArgsInstance() {
        return new stopDiscoveryOnDemand_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, stopDiscoveryOnDemand_args args) throws org.apache.thrift.TException {
        iface.stopDiscoveryOnDemand(args.RuleId);
        return null;
      }
    }

    private static class pauseDiscoveryOnDemand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseDiscoveryOnDemand_args> {
      public pauseDiscoveryOnDemand() {
        super("pauseDiscoveryOnDemand");
      }

      protected pauseDiscoveryOnDemand_args getEmptyArgsInstance() {
        return new pauseDiscoveryOnDemand_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, pauseDiscoveryOnDemand_args args) throws org.apache.thrift.TException {
        iface.pauseDiscoveryOnDemand(args.RuleId);
        return null;
      }
    }

    private static class stopReportBeforeRemoveRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopReportBeforeRemoveRule_args> {
      public stopReportBeforeRemoveRule() {
        super("stopReportBeforeRemoveRule");
      }

      protected stopReportBeforeRemoveRule_args getEmptyArgsInstance() {
        return new stopReportBeforeRemoveRule_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, stopReportBeforeRemoveRule_args args) throws org.apache.thrift.TException {
        iface.stopReportBeforeRemoveRule(args.RuleId);
        return null;
      }
    }

    private static class getRemoteStorageDir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRemoteStorageDir_args> {
      public getRemoteStorageDir() {
        super("getRemoteStorageDir");
      }

      protected getRemoteStorageDir_args getEmptyArgsInstance() {
        return new getRemoteStorageDir_args();
      }

      protected getRemoteStorageDir_result getResult(I iface, getRemoteStorageDir_args args) throws org.apache.thrift.TException {
        getRemoteStorageDir_result result = new getRemoteStorageDir_result();
        result.success = iface.getRemoteStorageDir(args.RSId);
        return result;
      }
    }

    private static class startFingerprinting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startFingerprinting_args> {
      public startFingerprinting() {
        super("startFingerprinting");
      }

      protected startFingerprinting_args getEmptyArgsInstance() {
        return new startFingerprinting_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, startFingerprinting_args args) throws org.apache.thrift.TException {
        iface.startFingerprinting(args.DDId);
        return null;
      }
    }

    private static class stopFingerprinting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopFingerprinting_args> {
      public stopFingerprinting() {
        super("stopFingerprinting");
      }

      protected stopFingerprinting_args getEmptyArgsInstance() {
        return new stopFingerprinting_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, stopFingerprinting_args args) throws org.apache.thrift.TException {
        iface.stopFingerprinting(args.DDId);
        return null;
      }
    }

    private static class testConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testConnection_args> {
      public testConnection() {
        super("testConnection");
      }

      protected testConnection_args getEmptyArgsInstance() {
        return new testConnection_args();
      }

      protected testConnection_result getResult(I iface, testConnection_args args) throws org.apache.thrift.TException {
        testConnection_result result = new testConnection_result();
        result.success = iface.testConnection(args.RemoteStorage);
        return result;
      }
    }

    private static class testWebServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testWebServer_args> {
      public testWebServer() {
        super("testWebServer");
      }

      protected testWebServer_args getEmptyArgsInstance() {
        return new testWebServer_args();
      }

      protected testWebServer_result getResult(I iface, testWebServer_args args) throws org.apache.thrift.TException {
        testWebServer_result result = new testWebServer_result();
        result.success = iface.testWebServer(args.URL);
        return result;
      }
    }

  }

  public static class compileCustomer_args implements org.apache.thrift.TBase<compileCustomer_args, compileCustomer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileCustomer_args");

    private static final org.apache.thrift.protocol.TField CUSTOMERID_FIELD_DESC = new org.apache.thrift.protocol.TField("Customerid", org.apache.thrift.protocol.TType.I32, (short)1);

    public int Customerid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CUSTOMERID((short)1, "Customerid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CUSTOMERID
            return CUSTOMERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CUSTOMERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CUSTOMERID, new org.apache.thrift.meta_data.FieldMetaData("Customerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileCustomer_args.class, metaDataMap);
    }

    public compileCustomer_args() {
    }

    public compileCustomer_args(
      int Customerid)
    {
      this();
      this.Customerid = Customerid;
      setCustomeridIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileCustomer_args(compileCustomer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.Customerid = other.Customerid;
    }

    public compileCustomer_args deepCopy() {
      return new compileCustomer_args(this);
    }

    @Override
    public void clear() {
      setCustomeridIsSet(false);
      this.Customerid = 0;
    }

    public int getCustomerid() {
      return this.Customerid;
    }

    public compileCustomer_args setCustomerid(int Customerid) {
      this.Customerid = Customerid;
      setCustomeridIsSet(true);
      return this;
    }

    public void unsetCustomerid() {
      __isset_bit_vector.clear(__CUSTOMERID_ISSET_ID);
    }

    /** Returns true if field Customerid is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomerid() {
      return __isset_bit_vector.get(__CUSTOMERID_ISSET_ID);
    }

    public void setCustomeridIsSet(boolean value) {
      __isset_bit_vector.set(__CUSTOMERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CUSTOMERID:
        if (value == null) {
          unsetCustomerid();
        } else {
          setCustomerid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CUSTOMERID:
        return Integer.valueOf(getCustomerid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CUSTOMERID:
        return isSetCustomerid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compileCustomer_args)
        return this.equals((compileCustomer_args)that);
      return false;
    }

    public boolean equals(compileCustomer_args that) {
      if (that == null)
        return false;

      boolean this_present_Customerid = true;
      boolean that_present_Customerid = true;
      if (this_present_Customerid || that_present_Customerid) {
        if (!(this_present_Customerid && that_present_Customerid))
          return false;
        if (this.Customerid != that.Customerid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compileCustomer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compileCustomer_args typedOther = (compileCustomer_args)other;

      lastComparison = Boolean.valueOf(isSetCustomerid()).compareTo(typedOther.isSetCustomerid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomerid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Customerid, typedOther.Customerid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CUSTOMERID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Customerid = iprot.readI32();
              setCustomeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUSTOMERID_FIELD_DESC);
      oprot.writeI32(this.Customerid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compileCustomer_args(");
      boolean first = true;

      sb.append("Customerid:");
      sb.append(this.Customerid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class compileCustomer_result implements org.apache.thrift.TBase<compileCustomer_result, compileCustomer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileCustomer_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileCustomer_result.class, metaDataMap);
    }

    public compileCustomer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileCustomer_result(compileCustomer_result other) {
    }

    public compileCustomer_result deepCopy() {
      return new compileCustomer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compileCustomer_result)
        return this.equals((compileCustomer_result)that);
      return false;
    }

    public boolean equals(compileCustomer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(compileCustomer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      compileCustomer_result typedOther = (compileCustomer_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compileCustomer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCompileStatus_args implements org.apache.thrift.TBase<getCompileStatus_args, getCompileStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompileStatus_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompileStatus_args.class, metaDataMap);
    }

    public getCompileStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompileStatus_args(getCompileStatus_args other) {
    }

    public getCompileStatus_args deepCopy() {
      return new getCompileStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompileStatus_args)
        return this.equals((getCompileStatus_args)that);
      return false;
    }

    public boolean equals(getCompileStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCompileStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCompileStatus_args typedOther = (getCompileStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompileStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getCompileStatus_result implements org.apache.thrift.TBase<getCompileStatus_result, getCompileStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompileStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompileStatus_result.class, metaDataMap);
    }

    public getCompileStatus_result() {
    }

    public getCompileStatus_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompileStatus_result(getCompileStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getCompileStatus_result deepCopy() {
      return new getCompileStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getCompileStatus_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompileStatus_result)
        return this.equals((getCompileStatus_result)that);
      return false;
    }

    public boolean equals(getCompileStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCompileStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCompileStatus_result typedOther = (getCompileStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompileStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRuletable_args implements org.apache.thrift.TBase<getRuletable_args, getRuletable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuletable_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("EndpointId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REVISIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("Revisionid", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String EndpointId; // required
    public String Revisionid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_ID((short)1, "EndpointId"),
      REVISIONID((short)2, "Revisionid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_ID
            return ENDPOINT_ID;
          case 2: // REVISIONID
            return REVISIONID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_ID, new org.apache.thrift.meta_data.FieldMetaData("EndpointId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVISIONID, new org.apache.thrift.meta_data.FieldMetaData("Revisionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuletable_args.class, metaDataMap);
    }

    public getRuletable_args() {
    }

    public getRuletable_args(
      String EndpointId,
      String Revisionid)
    {
      this();
      this.EndpointId = EndpointId;
      this.Revisionid = Revisionid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuletable_args(getRuletable_args other) {
      if (other.isSetEndpointId()) {
        this.EndpointId = other.EndpointId;
      }
      if (other.isSetRevisionid()) {
        this.Revisionid = other.Revisionid;
      }
    }

    public getRuletable_args deepCopy() {
      return new getRuletable_args(this);
    }

    @Override
    public void clear() {
      this.EndpointId = null;
      this.Revisionid = null;
    }

    public String getEndpointId() {
      return this.EndpointId;
    }

    public getRuletable_args setEndpointId(String EndpointId) {
      this.EndpointId = EndpointId;
      return this;
    }

    public void unsetEndpointId() {
      this.EndpointId = null;
    }

    /** Returns true if field EndpointId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointId() {
      return this.EndpointId != null;
    }

    public void setEndpointIdIsSet(boolean value) {
      if (!value) {
        this.EndpointId = null;
      }
    }

    public String getRevisionid() {
      return this.Revisionid;
    }

    public getRuletable_args setRevisionid(String Revisionid) {
      this.Revisionid = Revisionid;
      return this;
    }

    public void unsetRevisionid() {
      this.Revisionid = null;
    }

    /** Returns true if field Revisionid is set (has been assigned a value) and false otherwise */
    public boolean isSetRevisionid() {
      return this.Revisionid != null;
    }

    public void setRevisionidIsSet(boolean value) {
      if (!value) {
        this.Revisionid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_ID:
        if (value == null) {
          unsetEndpointId();
        } else {
          setEndpointId((String)value);
        }
        break;

      case REVISIONID:
        if (value == null) {
          unsetRevisionid();
        } else {
          setRevisionid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_ID:
        return getEndpointId();

      case REVISIONID:
        return getRevisionid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_ID:
        return isSetEndpointId();
      case REVISIONID:
        return isSetRevisionid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRuletable_args)
        return this.equals((getRuletable_args)that);
      return false;
    }

    public boolean equals(getRuletable_args that) {
      if (that == null)
        return false;

      boolean this_present_EndpointId = true && this.isSetEndpointId();
      boolean that_present_EndpointId = true && that.isSetEndpointId();
      if (this_present_EndpointId || that_present_EndpointId) {
        if (!(this_present_EndpointId && that_present_EndpointId))
          return false;
        if (!this.EndpointId.equals(that.EndpointId))
          return false;
      }

      boolean this_present_Revisionid = true && this.isSetRevisionid();
      boolean that_present_Revisionid = true && that.isSetRevisionid();
      if (this_present_Revisionid || that_present_Revisionid) {
        if (!(this_present_Revisionid && that_present_Revisionid))
          return false;
        if (!this.Revisionid.equals(that.Revisionid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRuletable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRuletable_args typedOther = (getRuletable_args)other;

      lastComparison = Boolean.valueOf(isSetEndpointId()).compareTo(typedOther.isSetEndpointId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EndpointId, typedOther.EndpointId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRevisionid()).compareTo(typedOther.isSetRevisionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRevisionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Revisionid, typedOther.Revisionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ENDPOINT_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.EndpointId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REVISIONID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Revisionid = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.EndpointId != null) {
        oprot.writeFieldBegin(ENDPOINT_ID_FIELD_DESC);
        oprot.writeString(this.EndpointId);
        oprot.writeFieldEnd();
      }
      if (this.Revisionid != null) {
        oprot.writeFieldBegin(REVISIONID_FIELD_DESC);
        oprot.writeString(this.Revisionid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRuletable_args(");
      boolean first = true;

      sb.append("EndpointId:");
      if (this.EndpointId == null) {
        sb.append("null");
      } else {
        sb.append(this.EndpointId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Revisionid:");
      if (this.Revisionid == null) {
        sb.append("null");
      } else {
        sb.append(this.Revisionid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRuletable_result implements org.apache.thrift.TBase<getRuletable_result, getRuletable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRuletable_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRuletable_result.class, metaDataMap);
    }

    public getRuletable_result() {
    }

    public getRuletable_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRuletable_result(getRuletable_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public getRuletable_result deepCopy() {
      return new getRuletable_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public getRuletable_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public getRuletable_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRuletable_result)
        return this.equals((getRuletable_result)that);
      return false;
    }

    public boolean equals(getRuletable_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRuletable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRuletable_result typedOther = (getRuletable_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRuletable_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveBegin_args implements org.apache.thrift.TBase<receiveBegin_args, receiveBegin_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveBegin_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("EndpointId", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String EndpointId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_ID((short)1, "EndpointId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_ID
            return ENDPOINT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_ID, new org.apache.thrift.meta_data.FieldMetaData("EndpointId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveBegin_args.class, metaDataMap);
    }

    public receiveBegin_args() {
    }

    public receiveBegin_args(
      String EndpointId)
    {
      this();
      this.EndpointId = EndpointId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveBegin_args(receiveBegin_args other) {
      if (other.isSetEndpointId()) {
        this.EndpointId = other.EndpointId;
      }
    }

    public receiveBegin_args deepCopy() {
      return new receiveBegin_args(this);
    }

    @Override
    public void clear() {
      this.EndpointId = null;
    }

    public String getEndpointId() {
      return this.EndpointId;
    }

    public receiveBegin_args setEndpointId(String EndpointId) {
      this.EndpointId = EndpointId;
      return this;
    }

    public void unsetEndpointId() {
      this.EndpointId = null;
    }

    /** Returns true if field EndpointId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointId() {
      return this.EndpointId != null;
    }

    public void setEndpointIdIsSet(boolean value) {
      if (!value) {
        this.EndpointId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_ID:
        if (value == null) {
          unsetEndpointId();
        } else {
          setEndpointId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_ID:
        return getEndpointId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_ID:
        return isSetEndpointId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveBegin_args)
        return this.equals((receiveBegin_args)that);
      return false;
    }

    public boolean equals(receiveBegin_args that) {
      if (that == null)
        return false;

      boolean this_present_EndpointId = true && this.isSetEndpointId();
      boolean that_present_EndpointId = true && that.isSetEndpointId();
      if (this_present_EndpointId || that_present_EndpointId) {
        if (!(this_present_EndpointId && that_present_EndpointId))
          return false;
        if (!this.EndpointId.equals(that.EndpointId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveBegin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveBegin_args typedOther = (receiveBegin_args)other;

      lastComparison = Boolean.valueOf(isSetEndpointId()).compareTo(typedOther.isSetEndpointId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EndpointId, typedOther.EndpointId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ENDPOINT_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.EndpointId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.EndpointId != null) {
        oprot.writeFieldBegin(ENDPOINT_ID_FIELD_DESC);
        oprot.writeString(this.EndpointId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveBegin_args(");
      boolean first = true;

      sb.append("EndpointId:");
      if (this.EndpointId == null) {
        sb.append("null");
      } else {
        sb.append(this.EndpointId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveBegin_result implements org.apache.thrift.TBase<receiveBegin_result, receiveBegin_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveBegin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveBegin_result.class, metaDataMap);
    }

    public receiveBegin_result() {
    }

    public receiveBegin_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveBegin_result(receiveBegin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public receiveBegin_result deepCopy() {
      return new receiveBegin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public receiveBegin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveBegin_result)
        return this.equals((receiveBegin_result)that);
      return false;
    }

    public boolean equals(receiveBegin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveBegin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveBegin_result typedOther = (receiveBegin_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveBegin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveChunk_args implements org.apache.thrift.TBase<receiveChunk_args, receiveChunk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveChunk_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("EndpointId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEMID_FIELD_DESC = new org.apache.thrift.protocol.TField("Itemid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CHUNKDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunkdata", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHUNKNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunknum", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CHUNKNUMTOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("Chunknumtotal", org.apache.thrift.protocol.TType.I32, (short)5);

    public String EndpointId; // required
    public long Itemid; // required
    public ByteBuffer Chunkdata; // required
    public int Chunknum; // required
    public int Chunknumtotal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_ID((short)1, "EndpointId"),
      ITEMID((short)2, "Itemid"),
      CHUNKDATA((short)3, "Chunkdata"),
      CHUNKNUM((short)4, "Chunknum"),
      CHUNKNUMTOTAL((short)5, "Chunknumtotal");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_ID
            return ENDPOINT_ID;
          case 2: // ITEMID
            return ITEMID;
          case 3: // CHUNKDATA
            return CHUNKDATA;
          case 4: // CHUNKNUM
            return CHUNKNUM;
          case 5: // CHUNKNUMTOTAL
            return CHUNKNUMTOTAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ITEMID_ISSET_ID = 0;
    private static final int __CHUNKNUM_ISSET_ID = 1;
    private static final int __CHUNKNUMTOTAL_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_ID, new org.apache.thrift.meta_data.FieldMetaData("EndpointId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEMID, new org.apache.thrift.meta_data.FieldMetaData("Itemid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHUNKDATA, new org.apache.thrift.meta_data.FieldMetaData("Chunkdata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CHUNKNUM, new org.apache.thrift.meta_data.FieldMetaData("Chunknum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHUNKNUMTOTAL, new org.apache.thrift.meta_data.FieldMetaData("Chunknumtotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveChunk_args.class, metaDataMap);
    }

    public receiveChunk_args() {
    }

    public receiveChunk_args(
      String EndpointId,
      long Itemid,
      ByteBuffer Chunkdata,
      int Chunknum,
      int Chunknumtotal)
    {
      this();
      this.EndpointId = EndpointId;
      this.Itemid = Itemid;
      setItemidIsSet(true);
      this.Chunkdata = Chunkdata;
      this.Chunknum = Chunknum;
      setChunknumIsSet(true);
      this.Chunknumtotal = Chunknumtotal;
      setChunknumtotalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveChunk_args(receiveChunk_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetEndpointId()) {
        this.EndpointId = other.EndpointId;
      }
      this.Itemid = other.Itemid;
      if (other.isSetChunkdata()) {
        this.Chunkdata = org.apache.thrift.TBaseHelper.copyBinary(other.Chunkdata);
;
      }
      this.Chunknum = other.Chunknum;
      this.Chunknumtotal = other.Chunknumtotal;
    }

    public receiveChunk_args deepCopy() {
      return new receiveChunk_args(this);
    }

    @Override
    public void clear() {
      this.EndpointId = null;
      setItemidIsSet(false);
      this.Itemid = 0;
      this.Chunkdata = null;
      setChunknumIsSet(false);
      this.Chunknum = 0;
      setChunknumtotalIsSet(false);
      this.Chunknumtotal = 0;
    }

    public String getEndpointId() {
      return this.EndpointId;
    }

    public receiveChunk_args setEndpointId(String EndpointId) {
      this.EndpointId = EndpointId;
      return this;
    }

    public void unsetEndpointId() {
      this.EndpointId = null;
    }

    /** Returns true if field EndpointId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointId() {
      return this.EndpointId != null;
    }

    public void setEndpointIdIsSet(boolean value) {
      if (!value) {
        this.EndpointId = null;
      }
    }

    public long getItemid() {
      return this.Itemid;
    }

    public receiveChunk_args setItemid(long Itemid) {
      this.Itemid = Itemid;
      setItemidIsSet(true);
      return this;
    }

    public void unsetItemid() {
      __isset_bit_vector.clear(__ITEMID_ISSET_ID);
    }

    /** Returns true if field Itemid is set (has been assigned a value) and false otherwise */
    public boolean isSetItemid() {
      return __isset_bit_vector.get(__ITEMID_ISSET_ID);
    }

    public void setItemidIsSet(boolean value) {
      __isset_bit_vector.set(__ITEMID_ISSET_ID, value);
    }

    public byte[] getChunkdata() {
      setChunkdata(org.apache.thrift.TBaseHelper.rightSize(Chunkdata));
      return Chunkdata == null ? null : Chunkdata.array();
    }

    public ByteBuffer bufferForChunkdata() {
      return Chunkdata;
    }

    public receiveChunk_args setChunkdata(byte[] Chunkdata) {
      setChunkdata(Chunkdata == null ? (ByteBuffer)null : ByteBuffer.wrap(Chunkdata));
      return this;
    }

    public receiveChunk_args setChunkdata(ByteBuffer Chunkdata) {
      this.Chunkdata = Chunkdata;
      return this;
    }

    public void unsetChunkdata() {
      this.Chunkdata = null;
    }

    /** Returns true if field Chunkdata is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkdata() {
      return this.Chunkdata != null;
    }

    public void setChunkdataIsSet(boolean value) {
      if (!value) {
        this.Chunkdata = null;
      }
    }

    public int getChunknum() {
      return this.Chunknum;
    }

    public receiveChunk_args setChunknum(int Chunknum) {
      this.Chunknum = Chunknum;
      setChunknumIsSet(true);
      return this;
    }

    public void unsetChunknum() {
      __isset_bit_vector.clear(__CHUNKNUM_ISSET_ID);
    }

    /** Returns true if field Chunknum is set (has been assigned a value) and false otherwise */
    public boolean isSetChunknum() {
      return __isset_bit_vector.get(__CHUNKNUM_ISSET_ID);
    }

    public void setChunknumIsSet(boolean value) {
      __isset_bit_vector.set(__CHUNKNUM_ISSET_ID, value);
    }

    public int getChunknumtotal() {
      return this.Chunknumtotal;
    }

    public receiveChunk_args setChunknumtotal(int Chunknumtotal) {
      this.Chunknumtotal = Chunknumtotal;
      setChunknumtotalIsSet(true);
      return this;
    }

    public void unsetChunknumtotal() {
      __isset_bit_vector.clear(__CHUNKNUMTOTAL_ISSET_ID);
    }

    /** Returns true if field Chunknumtotal is set (has been assigned a value) and false otherwise */
    public boolean isSetChunknumtotal() {
      return __isset_bit_vector.get(__CHUNKNUMTOTAL_ISSET_ID);
    }

    public void setChunknumtotalIsSet(boolean value) {
      __isset_bit_vector.set(__CHUNKNUMTOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_ID:
        if (value == null) {
          unsetEndpointId();
        } else {
          setEndpointId((String)value);
        }
        break;

      case ITEMID:
        if (value == null) {
          unsetItemid();
        } else {
          setItemid((Long)value);
        }
        break;

      case CHUNKDATA:
        if (value == null) {
          unsetChunkdata();
        } else {
          setChunkdata((ByteBuffer)value);
        }
        break;

      case CHUNKNUM:
        if (value == null) {
          unsetChunknum();
        } else {
          setChunknum((Integer)value);
        }
        break;

      case CHUNKNUMTOTAL:
        if (value == null) {
          unsetChunknumtotal();
        } else {
          setChunknumtotal((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_ID:
        return getEndpointId();

      case ITEMID:
        return Long.valueOf(getItemid());

      case CHUNKDATA:
        return getChunkdata();

      case CHUNKNUM:
        return Integer.valueOf(getChunknum());

      case CHUNKNUMTOTAL:
        return Integer.valueOf(getChunknumtotal());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_ID:
        return isSetEndpointId();
      case ITEMID:
        return isSetItemid();
      case CHUNKDATA:
        return isSetChunkdata();
      case CHUNKNUM:
        return isSetChunknum();
      case CHUNKNUMTOTAL:
        return isSetChunknumtotal();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveChunk_args)
        return this.equals((receiveChunk_args)that);
      return false;
    }

    public boolean equals(receiveChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_EndpointId = true && this.isSetEndpointId();
      boolean that_present_EndpointId = true && that.isSetEndpointId();
      if (this_present_EndpointId || that_present_EndpointId) {
        if (!(this_present_EndpointId && that_present_EndpointId))
          return false;
        if (!this.EndpointId.equals(that.EndpointId))
          return false;
      }

      boolean this_present_Itemid = true;
      boolean that_present_Itemid = true;
      if (this_present_Itemid || that_present_Itemid) {
        if (!(this_present_Itemid && that_present_Itemid))
          return false;
        if (this.Itemid != that.Itemid)
          return false;
      }

      boolean this_present_Chunkdata = true && this.isSetChunkdata();
      boolean that_present_Chunkdata = true && that.isSetChunkdata();
      if (this_present_Chunkdata || that_present_Chunkdata) {
        if (!(this_present_Chunkdata && that_present_Chunkdata))
          return false;
        if (!this.Chunkdata.equals(that.Chunkdata))
          return false;
      }

      boolean this_present_Chunknum = true;
      boolean that_present_Chunknum = true;
      if (this_present_Chunknum || that_present_Chunknum) {
        if (!(this_present_Chunknum && that_present_Chunknum))
          return false;
        if (this.Chunknum != that.Chunknum)
          return false;
      }

      boolean this_present_Chunknumtotal = true;
      boolean that_present_Chunknumtotal = true;
      if (this_present_Chunknumtotal || that_present_Chunknumtotal) {
        if (!(this_present_Chunknumtotal && that_present_Chunknumtotal))
          return false;
        if (this.Chunknumtotal != that.Chunknumtotal)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveChunk_args typedOther = (receiveChunk_args)other;

      lastComparison = Boolean.valueOf(isSetEndpointId()).compareTo(typedOther.isSetEndpointId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EndpointId, typedOther.EndpointId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemid()).compareTo(typedOther.isSetItemid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Itemid, typedOther.Itemid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunkdata()).compareTo(typedOther.isSetChunkdata());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkdata()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunkdata, typedOther.Chunkdata);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunknum()).compareTo(typedOther.isSetChunknum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunknum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunknum, typedOther.Chunknum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChunknumtotal()).compareTo(typedOther.isSetChunknumtotal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunknumtotal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Chunknumtotal, typedOther.Chunknumtotal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ENDPOINT_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.EndpointId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ITEMID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.Itemid = iprot.readI64();
              setItemidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CHUNKDATA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Chunkdata = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CHUNKNUM
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Chunknum = iprot.readI32();
              setChunknumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CHUNKNUMTOTAL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.Chunknumtotal = iprot.readI32();
              setChunknumtotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.EndpointId != null) {
        oprot.writeFieldBegin(ENDPOINT_ID_FIELD_DESC);
        oprot.writeString(this.EndpointId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEMID_FIELD_DESC);
      oprot.writeI64(this.Itemid);
      oprot.writeFieldEnd();
      if (this.Chunkdata != null) {
        oprot.writeFieldBegin(CHUNKDATA_FIELD_DESC);
        oprot.writeBinary(this.Chunkdata);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHUNKNUM_FIELD_DESC);
      oprot.writeI32(this.Chunknum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHUNKNUMTOTAL_FIELD_DESC);
      oprot.writeI32(this.Chunknumtotal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveChunk_args(");
      boolean first = true;

      sb.append("EndpointId:");
      if (this.EndpointId == null) {
        sb.append("null");
      } else {
        sb.append(this.EndpointId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Itemid:");
      sb.append(this.Itemid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunkdata:");
      if (this.Chunkdata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Chunkdata, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunknum:");
      sb.append(this.Chunknum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Chunknumtotal:");
      sb.append(this.Chunknumtotal);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class receiveChunk_result implements org.apache.thrift.TBase<receiveChunk_result, receiveChunk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveChunk_result.class, metaDataMap);
    }

    public receiveChunk_result() {
    }

    public receiveChunk_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveChunk_result(receiveChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public receiveChunk_result deepCopy() {
      return new receiveChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public receiveChunk_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiveChunk_result)
        return this.equals((receiveChunk_result)that);
      return false;
    }

    public boolean equals(receiveChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(receiveChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      receiveChunk_result typedOther = (receiveChunk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiveChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generateFingerprints_args implements org.apache.thrift.TBase<generateFingerprints_args, generateFingerprints_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateFingerprints_args");

    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("DocumentId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filename", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("Data", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long DocumentId; // required
    public String Filename; // required
    public ByteBuffer Data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCUMENT_ID((short)1, "DocumentId"),
      FILENAME((short)2, "Filename"),
      DATA((short)3, "Data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 2: // FILENAME
            return FILENAME;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("DocumentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("Filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("Data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateFingerprints_args.class, metaDataMap);
    }

    public generateFingerprints_args() {
    }

    public generateFingerprints_args(
      long DocumentId,
      String Filename,
      ByteBuffer Data)
    {
      this();
      this.DocumentId = DocumentId;
      setDocumentIdIsSet(true);
      this.Filename = Filename;
      this.Data = Data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateFingerprints_args(generateFingerprints_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.DocumentId = other.DocumentId;
      if (other.isSetFilename()) {
        this.Filename = other.Filename;
      }
      if (other.isSetData()) {
        this.Data = org.apache.thrift.TBaseHelper.copyBinary(other.Data);
;
      }
    }

    public generateFingerprints_args deepCopy() {
      return new generateFingerprints_args(this);
    }

    @Override
    public void clear() {
      setDocumentIdIsSet(false);
      this.DocumentId = 0;
      this.Filename = null;
      this.Data = null;
    }

    public long getDocumentId() {
      return this.DocumentId;
    }

    public generateFingerprints_args setDocumentId(long DocumentId) {
      this.DocumentId = DocumentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bit_vector.clear(__DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field DocumentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return __isset_bit_vector.get(__DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bit_vector.set(__DOCUMENTID_ISSET_ID, value);
    }

    public String getFilename() {
      return this.Filename;
    }

    public generateFingerprints_args setFilename(String Filename) {
      this.Filename = Filename;
      return this;
    }

    public void unsetFilename() {
      this.Filename = null;
    }

    /** Returns true if field Filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.Filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.Filename = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(Data));
      return Data == null ? null : Data.array();
    }

    public ByteBuffer bufferForData() {
      return Data;
    }

    public generateFingerprints_args setData(byte[] Data) {
      setData(Data == null ? (ByteBuffer)null : ByteBuffer.wrap(Data));
      return this;
    }

    public generateFingerprints_args setData(ByteBuffer Data) {
      this.Data = Data;
      return this;
    }

    public void unsetData() {
      this.Data = null;
    }

    /** Returns true if field Data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.Data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.Data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case FILENAME:
        return getFilename();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCUMENT_ID:
        return isSetDocumentId();
      case FILENAME:
        return isSetFilename();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateFingerprints_args)
        return this.equals((generateFingerprints_args)that);
      return false;
    }

    public boolean equals(generateFingerprints_args that) {
      if (that == null)
        return false;

      boolean this_present_DocumentId = true;
      boolean that_present_DocumentId = true;
      if (this_present_DocumentId || that_present_DocumentId) {
        if (!(this_present_DocumentId && that_present_DocumentId))
          return false;
        if (this.DocumentId != that.DocumentId)
          return false;
      }

      boolean this_present_Filename = true && this.isSetFilename();
      boolean that_present_Filename = true && that.isSetFilename();
      if (this_present_Filename || that_present_Filename) {
        if (!(this_present_Filename && that_present_Filename))
          return false;
        if (!this.Filename.equals(that.Filename))
          return false;
      }

      boolean this_present_Data = true && this.isSetData();
      boolean that_present_Data = true && that.isSetData();
      if (this_present_Data || that_present_Data) {
        if (!(this_present_Data && that_present_Data))
          return false;
        if (!this.Data.equals(that.Data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateFingerprints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateFingerprints_args typedOther = (generateFingerprints_args)other;

      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(typedOther.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DocumentId, typedOther.DocumentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filename, typedOther.Filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Data, typedOther.Data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCUMENT_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.DocumentId = iprot.readI64();
              setDocumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILENAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Filename = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DATA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Data = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
      oprot.writeI64(this.DocumentId);
      oprot.writeFieldEnd();
      if (this.Filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.Filename);
        oprot.writeFieldEnd();
      }
      if (this.Data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(this.Data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateFingerprints_args(");
      boolean first = true;

      sb.append("DocumentId:");
      sb.append(this.DocumentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Filename:");
      if (this.Filename == null) {
        sb.append("null");
      } else {
        sb.append(this.Filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Data:");
      if (this.Data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generateFingerprints_result implements org.apache.thrift.TBase<generateFingerprints_result, generateFingerprints_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateFingerprints_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateFingerprints_result.class, metaDataMap);
    }

    public generateFingerprints_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateFingerprints_result(generateFingerprints_result other) {
    }

    public generateFingerprints_result deepCopy() {
      return new generateFingerprints_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateFingerprints_result)
        return this.equals((generateFingerprints_result)that);
      return false;
    }

    public boolean equals(generateFingerprints_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateFingerprints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateFingerprints_result typedOther = (generateFingerprints_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateFingerprints_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generateFingerprintsWithFile_args implements org.apache.thrift.TBase<generateFingerprintsWithFile_args, generateFingerprintsWithFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateFingerprintsWithFile_args");

    private static final org.apache.thrift.protocol.TField DOCUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("DocumentId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filename", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("Filepath", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long DocumentId; // required
    public String Filename; // required
    public String Filepath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCUMENT_ID((short)1, "DocumentId"),
      FILENAME((short)2, "Filename"),
      FILEPATH((short)3, "Filepath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCUMENT_ID
            return DOCUMENT_ID;
          case 2: // FILENAME
            return FILENAME;
          case 3: // FILEPATH
            return FILEPATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DOCUMENTID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("DocumentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("Filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("Filepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateFingerprintsWithFile_args.class, metaDataMap);
    }

    public generateFingerprintsWithFile_args() {
    }

    public generateFingerprintsWithFile_args(
      long DocumentId,
      String Filename,
      String Filepath)
    {
      this();
      this.DocumentId = DocumentId;
      setDocumentIdIsSet(true);
      this.Filename = Filename;
      this.Filepath = Filepath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateFingerprintsWithFile_args(generateFingerprintsWithFile_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.DocumentId = other.DocumentId;
      if (other.isSetFilename()) {
        this.Filename = other.Filename;
      }
      if (other.isSetFilepath()) {
        this.Filepath = other.Filepath;
      }
    }

    public generateFingerprintsWithFile_args deepCopy() {
      return new generateFingerprintsWithFile_args(this);
    }

    @Override
    public void clear() {
      setDocumentIdIsSet(false);
      this.DocumentId = 0;
      this.Filename = null;
      this.Filepath = null;
    }

    public long getDocumentId() {
      return this.DocumentId;
    }

    public generateFingerprintsWithFile_args setDocumentId(long DocumentId) {
      this.DocumentId = DocumentId;
      setDocumentIdIsSet(true);
      return this;
    }

    public void unsetDocumentId() {
      __isset_bit_vector.clear(__DOCUMENTID_ISSET_ID);
    }

    /** Returns true if field DocumentId is set (has been assigned a value) and false otherwise */
    public boolean isSetDocumentId() {
      return __isset_bit_vector.get(__DOCUMENTID_ISSET_ID);
    }

    public void setDocumentIdIsSet(boolean value) {
      __isset_bit_vector.set(__DOCUMENTID_ISSET_ID, value);
    }

    public String getFilename() {
      return this.Filename;
    }

    public generateFingerprintsWithFile_args setFilename(String Filename) {
      this.Filename = Filename;
      return this;
    }

    public void unsetFilename() {
      this.Filename = null;
    }

    /** Returns true if field Filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.Filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.Filename = null;
      }
    }

    public String getFilepath() {
      return this.Filepath;
    }

    public generateFingerprintsWithFile_args setFilepath(String Filepath) {
      this.Filepath = Filepath;
      return this;
    }

    public void unsetFilepath() {
      this.Filepath = null;
    }

    /** Returns true if field Filepath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilepath() {
      return this.Filepath != null;
    }

    public void setFilepathIsSet(boolean value) {
      if (!value) {
        this.Filepath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCUMENT_ID:
        if (value == null) {
          unsetDocumentId();
        } else {
          setDocumentId((Long)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case FILEPATH:
        if (value == null) {
          unsetFilepath();
        } else {
          setFilepath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCUMENT_ID:
        return Long.valueOf(getDocumentId());

      case FILENAME:
        return getFilename();

      case FILEPATH:
        return getFilepath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCUMENT_ID:
        return isSetDocumentId();
      case FILENAME:
        return isSetFilename();
      case FILEPATH:
        return isSetFilepath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateFingerprintsWithFile_args)
        return this.equals((generateFingerprintsWithFile_args)that);
      return false;
    }

    public boolean equals(generateFingerprintsWithFile_args that) {
      if (that == null)
        return false;

      boolean this_present_DocumentId = true;
      boolean that_present_DocumentId = true;
      if (this_present_DocumentId || that_present_DocumentId) {
        if (!(this_present_DocumentId && that_present_DocumentId))
          return false;
        if (this.DocumentId != that.DocumentId)
          return false;
      }

      boolean this_present_Filename = true && this.isSetFilename();
      boolean that_present_Filename = true && that.isSetFilename();
      if (this_present_Filename || that_present_Filename) {
        if (!(this_present_Filename && that_present_Filename))
          return false;
        if (!this.Filename.equals(that.Filename))
          return false;
      }

      boolean this_present_Filepath = true && this.isSetFilepath();
      boolean that_present_Filepath = true && that.isSetFilepath();
      if (this_present_Filepath || that_present_Filepath) {
        if (!(this_present_Filepath && that_present_Filepath))
          return false;
        if (!this.Filepath.equals(that.Filepath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateFingerprintsWithFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateFingerprintsWithFile_args typedOther = (generateFingerprintsWithFile_args)other;

      lastComparison = Boolean.valueOf(isSetDocumentId()).compareTo(typedOther.isSetDocumentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDocumentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DocumentId, typedOther.DocumentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filename, typedOther.Filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(typedOther.isSetFilepath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilepath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filepath, typedOther.Filepath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DOCUMENT_ID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.DocumentId = iprot.readI64();
              setDocumentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILENAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Filename = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FILEPATH
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Filepath = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DOCUMENT_ID_FIELD_DESC);
      oprot.writeI64(this.DocumentId);
      oprot.writeFieldEnd();
      if (this.Filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.Filename);
        oprot.writeFieldEnd();
      }
      if (this.Filepath != null) {
        oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
        oprot.writeString(this.Filepath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateFingerprintsWithFile_args(");
      boolean first = true;

      sb.append("DocumentId:");
      sb.append(this.DocumentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("Filename:");
      if (this.Filename == null) {
        sb.append("null");
      } else {
        sb.append(this.Filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Filepath:");
      if (this.Filepath == null) {
        sb.append("null");
      } else {
        sb.append(this.Filepath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generateFingerprintsWithFile_result implements org.apache.thrift.TBase<generateFingerprintsWithFile_result, generateFingerprintsWithFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateFingerprintsWithFile_result");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateFingerprintsWithFile_result.class, metaDataMap);
    }

    public generateFingerprintsWithFile_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateFingerprintsWithFile_result(generateFingerprintsWithFile_result other) {
    }

    public generateFingerprintsWithFile_result deepCopy() {
      return new generateFingerprintsWithFile_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateFingerprintsWithFile_result)
        return this.equals((generateFingerprintsWithFile_result)that);
      return false;
    }

    public boolean equals(generateFingerprintsWithFile_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generateFingerprintsWithFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generateFingerprintsWithFile_result typedOther = (generateFingerprintsWithFile_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generateFingerprintsWithFile_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class requeueIncident_args implements org.apache.thrift.TBase<requeueIncident_args, requeueIncident_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requeueIncident_args");

    private static final org.apache.thrift.protocol.TField INCIDENTID_FIELD_DESC = new org.apache.thrift.protocol.TField("Incidentid", org.apache.thrift.protocol.TType.I64, (short)1);

    public long Incidentid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INCIDENTID((short)1, "Incidentid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INCIDENTID
            return INCIDENTID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INCIDENTID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INCIDENTID, new org.apache.thrift.meta_data.FieldMetaData("Incidentid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requeueIncident_args.class, metaDataMap);
    }

    public requeueIncident_args() {
    }

    public requeueIncident_args(
      long Incidentid)
    {
      this();
      this.Incidentid = Incidentid;
      setIncidentidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requeueIncident_args(requeueIncident_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.Incidentid = other.Incidentid;
    }

    public requeueIncident_args deepCopy() {
      return new requeueIncident_args(this);
    }

    @Override
    public void clear() {
      setIncidentidIsSet(false);
      this.Incidentid = 0;
    }

    public long getIncidentid() {
      return this.Incidentid;
    }

    public requeueIncident_args setIncidentid(long Incidentid) {
      this.Incidentid = Incidentid;
      setIncidentidIsSet(true);
      return this;
    }

    public void unsetIncidentid() {
      __isset_bit_vector.clear(__INCIDENTID_ISSET_ID);
    }

    /** Returns true if field Incidentid is set (has been assigned a value) and false otherwise */
    public boolean isSetIncidentid() {
      return __isset_bit_vector.get(__INCIDENTID_ISSET_ID);
    }

    public void setIncidentidIsSet(boolean value) {
      __isset_bit_vector.set(__INCIDENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INCIDENTID:
        if (value == null) {
          unsetIncidentid();
        } else {
          setIncidentid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INCIDENTID:
        return Long.valueOf(getIncidentid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INCIDENTID:
        return isSetIncidentid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requeueIncident_args)
        return this.equals((requeueIncident_args)that);
      return false;
    }

    public boolean equals(requeueIncident_args that) {
      if (that == null)
        return false;

      boolean this_present_Incidentid = true;
      boolean that_present_Incidentid = true;
      if (this_present_Incidentid || that_present_Incidentid) {
        if (!(this_present_Incidentid && that_present_Incidentid))
          return false;
        if (this.Incidentid != that.Incidentid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requeueIncident_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requeueIncident_args typedOther = (requeueIncident_args)other;

      lastComparison = Boolean.valueOf(isSetIncidentid()).compareTo(typedOther.isSetIncidentid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncidentid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Incidentid, typedOther.Incidentid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // INCIDENTID
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.Incidentid = iprot.readI64();
              setIncidentidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INCIDENTID_FIELD_DESC);
      oprot.writeI64(this.Incidentid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requeueIncident_args(");
      boolean first = true;

      sb.append("Incidentid:");
      sb.append(this.Incidentid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class registerUserAddress_args implements org.apache.thrift.TBase<registerUserAddress_args, registerUserAddress_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUserAddress_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("EndpointId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ipaddress", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERH_FIELD_DESC = new org.apache.thrift.protocol.TField("Userh", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("Payload", org.apache.thrift.protocol.TType.STRING, (short)4);

    public String EndpointId; // required
    public String Ipaddress; // required
    public String Userh; // required
    public ByteBuffer Payload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT_ID((short)1, "EndpointId"),
      IPADDRESS((short)2, "Ipaddress"),
      USERH((short)3, "Userh"),
      PAYLOAD((short)4, "Payload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT_ID
            return ENDPOINT_ID;
          case 2: // IPADDRESS
            return IPADDRESS;
          case 3: // USERH
            return USERH;
          case 4: // PAYLOAD
            return PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT_ID, new org.apache.thrift.meta_data.FieldMetaData("EndpointId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Ipaddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERH, new org.apache.thrift.meta_data.FieldMetaData("Userh", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("Payload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUserAddress_args.class, metaDataMap);
    }

    public registerUserAddress_args() {
    }

    public registerUserAddress_args(
      String EndpointId,
      String Ipaddress,
      String Userh,
      ByteBuffer Payload)
    {
      this();
      this.EndpointId = EndpointId;
      this.Ipaddress = Ipaddress;
      this.Userh = Userh;
      this.Payload = Payload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserAddress_args(registerUserAddress_args other) {
      if (other.isSetEndpointId()) {
        this.EndpointId = other.EndpointId;
      }
      if (other.isSetIpaddress()) {
        this.Ipaddress = other.Ipaddress;
      }
      if (other.isSetUserh()) {
        this.Userh = other.Userh;
      }
      if (other.isSetPayload()) {
        this.Payload = org.apache.thrift.TBaseHelper.copyBinary(other.Payload);
;
      }
    }

    public registerUserAddress_args deepCopy() {
      return new registerUserAddress_args(this);
    }

    @Override
    public void clear() {
      this.EndpointId = null;
      this.Ipaddress = null;
      this.Userh = null;
      this.Payload = null;
    }

    public String getEndpointId() {
      return this.EndpointId;
    }

    public registerUserAddress_args setEndpointId(String EndpointId) {
      this.EndpointId = EndpointId;
      return this;
    }

    public void unsetEndpointId() {
      this.EndpointId = null;
    }

    /** Returns true if field EndpointId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpointId() {
      return this.EndpointId != null;
    }

    public void setEndpointIdIsSet(boolean value) {
      if (!value) {
        this.EndpointId = null;
      }
    }

    public String getIpaddress() {
      return this.Ipaddress;
    }

    public registerUserAddress_args setIpaddress(String Ipaddress) {
      this.Ipaddress = Ipaddress;
      return this;
    }

    public void unsetIpaddress() {
      this.Ipaddress = null;
    }

    /** Returns true if field Ipaddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddress() {
      return this.Ipaddress != null;
    }

    public void setIpaddressIsSet(boolean value) {
      if (!value) {
        this.Ipaddress = null;
      }
    }

    public String getUserh() {
      return this.Userh;
    }

    public registerUserAddress_args setUserh(String Userh) {
      this.Userh = Userh;
      return this;
    }

    public void unsetUserh() {
      this.Userh = null;
    }

    /** Returns true if field Userh is set (has been assigned a value) and false otherwise */
    public boolean isSetUserh() {
      return this.Userh != null;
    }

    public void setUserhIsSet(boolean value) {
      if (!value) {
        this.Userh = null;
      }
    }

    public byte[] getPayload() {
      setPayload(org.apache.thrift.TBaseHelper.rightSize(Payload));
      return Payload == null ? null : Payload.array();
    }

    public ByteBuffer bufferForPayload() {
      return Payload;
    }

    public registerUserAddress_args setPayload(byte[] Payload) {
      setPayload(Payload == null ? (ByteBuffer)null : ByteBuffer.wrap(Payload));
      return this;
    }

    public registerUserAddress_args setPayload(ByteBuffer Payload) {
      this.Payload = Payload;
      return this;
    }

    public void unsetPayload() {
      this.Payload = null;
    }

    /** Returns true if field Payload is set (has been assigned a value) and false otherwise */
    public boolean isSetPayload() {
      return this.Payload != null;
    }

    public void setPayloadIsSet(boolean value) {
      if (!value) {
        this.Payload = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENDPOINT_ID:
        if (value == null) {
          unsetEndpointId();
        } else {
          setEndpointId((String)value);
        }
        break;

      case IPADDRESS:
        if (value == null) {
          unsetIpaddress();
        } else {
          setIpaddress((String)value);
        }
        break;

      case USERH:
        if (value == null) {
          unsetUserh();
        } else {
          setUserh((String)value);
        }
        break;

      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          setPayload((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT_ID:
        return getEndpointId();

      case IPADDRESS:
        return getIpaddress();

      case USERH:
        return getUserh();

      case PAYLOAD:
        return getPayload();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT_ID:
        return isSetEndpointId();
      case IPADDRESS:
        return isSetIpaddress();
      case USERH:
        return isSetUserh();
      case PAYLOAD:
        return isSetPayload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserAddress_args)
        return this.equals((registerUserAddress_args)that);
      return false;
    }

    public boolean equals(registerUserAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_EndpointId = true && this.isSetEndpointId();
      boolean that_present_EndpointId = true && that.isSetEndpointId();
      if (this_present_EndpointId || that_present_EndpointId) {
        if (!(this_present_EndpointId && that_present_EndpointId))
          return false;
        if (!this.EndpointId.equals(that.EndpointId))
          return false;
      }

      boolean this_present_Ipaddress = true && this.isSetIpaddress();
      boolean that_present_Ipaddress = true && that.isSetIpaddress();
      if (this_present_Ipaddress || that_present_Ipaddress) {
        if (!(this_present_Ipaddress && that_present_Ipaddress))
          return false;
        if (!this.Ipaddress.equals(that.Ipaddress))
          return false;
      }

      boolean this_present_Userh = true && this.isSetUserh();
      boolean that_present_Userh = true && that.isSetUserh();
      if (this_present_Userh || that_present_Userh) {
        if (!(this_present_Userh && that_present_Userh))
          return false;
        if (!this.Userh.equals(that.Userh))
          return false;
      }

      boolean this_present_Payload = true && this.isSetPayload();
      boolean that_present_Payload = true && that.isSetPayload();
      if (this_present_Payload || that_present_Payload) {
        if (!(this_present_Payload && that_present_Payload))
          return false;
        if (!this.Payload.equals(that.Payload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerUserAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerUserAddress_args typedOther = (registerUserAddress_args)other;

      lastComparison = Boolean.valueOf(isSetEndpointId()).compareTo(typedOther.isSetEndpointId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpointId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EndpointId, typedOther.EndpointId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpaddress()).compareTo(typedOther.isSetIpaddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ipaddress, typedOther.Ipaddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserh()).compareTo(typedOther.isSetUserh());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserh()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Userh, typedOther.Userh);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPayload()).compareTo(typedOther.isSetPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Payload, typedOther.Payload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ENDPOINT_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.EndpointId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IPADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Ipaddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // USERH
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Userh = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PAYLOAD
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Payload = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.EndpointId != null) {
        oprot.writeFieldBegin(ENDPOINT_ID_FIELD_DESC);
        oprot.writeString(this.EndpointId);
        oprot.writeFieldEnd();
      }
      if (this.Ipaddress != null) {
        oprot.writeFieldBegin(IPADDRESS_FIELD_DESC);
        oprot.writeString(this.Ipaddress);
        oprot.writeFieldEnd();
      }
      if (this.Userh != null) {
        oprot.writeFieldBegin(USERH_FIELD_DESC);
        oprot.writeString(this.Userh);
        oprot.writeFieldEnd();
      }
      if (this.Payload != null) {
        oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
        oprot.writeBinary(this.Payload);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUserAddress_args(");
      boolean first = true;

      sb.append("EndpointId:");
      if (this.EndpointId == null) {
        sb.append("null");
      } else {
        sb.append(this.EndpointId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Ipaddress:");
      if (this.Ipaddress == null) {
        sb.append("null");
      } else {
        sb.append(this.Ipaddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Userh:");
      if (this.Userh == null) {
        sb.append("null");
      } else {
        sb.append(this.Userh);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Payload:");
      if (this.Payload == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Payload, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class registerUserAddress_result implements org.apache.thrift.TBase<registerUserAddress_result, registerUserAddress_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerUserAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerUserAddress_result.class, metaDataMap);
    }

    public registerUserAddress_result() {
    }

    public registerUserAddress_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserAddress_result(registerUserAddress_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public registerUserAddress_result deepCopy() {
      return new registerUserAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public registerUserAddress_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserAddress_result)
        return this.equals((registerUserAddress_result)that);
      return false;
    }

    public boolean equals(registerUserAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerUserAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerUserAddress_result typedOther = (registerUserAddress_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  this.success.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter4 : this.success.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerUserAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveLicenseKey_args implements org.apache.thrift.TBase<saveLicenseKey_args, saveLicenseKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveLicenseKey_args");

    private static final org.apache.thrift.protocol.TField LICENSE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("licenseKey", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String licenseKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LICENSE_KEY((short)1, "licenseKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LICENSE_KEY
            return LICENSE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LICENSE_KEY, new org.apache.thrift.meta_data.FieldMetaData("licenseKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveLicenseKey_args.class, metaDataMap);
    }

    public saveLicenseKey_args() {
    }

    public saveLicenseKey_args(
      String licenseKey)
    {
      this();
      this.licenseKey = licenseKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveLicenseKey_args(saveLicenseKey_args other) {
      if (other.isSetLicenseKey()) {
        this.licenseKey = other.licenseKey;
      }
    }

    public saveLicenseKey_args deepCopy() {
      return new saveLicenseKey_args(this);
    }

    @Override
    public void clear() {
      this.licenseKey = null;
    }

    public String getLicenseKey() {
      return this.licenseKey;
    }

    public saveLicenseKey_args setLicenseKey(String licenseKey) {
      this.licenseKey = licenseKey;
      return this;
    }

    public void unsetLicenseKey() {
      this.licenseKey = null;
    }

    /** Returns true if field licenseKey is set (has been assigned a value) and false otherwise */
    public boolean isSetLicenseKey() {
      return this.licenseKey != null;
    }

    public void setLicenseKeyIsSet(boolean value) {
      if (!value) {
        this.licenseKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LICENSE_KEY:
        if (value == null) {
          unsetLicenseKey();
        } else {
          setLicenseKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LICENSE_KEY:
        return getLicenseKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LICENSE_KEY:
        return isSetLicenseKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveLicenseKey_args)
        return this.equals((saveLicenseKey_args)that);
      return false;
    }

    public boolean equals(saveLicenseKey_args that) {
      if (that == null)
        return false;

      boolean this_present_licenseKey = true && this.isSetLicenseKey();
      boolean that_present_licenseKey = true && that.isSetLicenseKey();
      if (this_present_licenseKey || that_present_licenseKey) {
        if (!(this_present_licenseKey && that_present_licenseKey))
          return false;
        if (!this.licenseKey.equals(that.licenseKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveLicenseKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveLicenseKey_args typedOther = (saveLicenseKey_args)other;

      lastComparison = Boolean.valueOf(isSetLicenseKey()).compareTo(typedOther.isSetLicenseKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLicenseKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.licenseKey, typedOther.licenseKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // LICENSE_KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.licenseKey = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.licenseKey != null) {
        oprot.writeFieldBegin(LICENSE_KEY_FIELD_DESC);
        oprot.writeString(this.licenseKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveLicenseKey_args(");
      boolean first = true;

      sb.append("licenseKey:");
      if (this.licenseKey == null) {
        sb.append("null");
      } else {
        sb.append(this.licenseKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class saveLicenseKey_result implements org.apache.thrift.TBase<saveLicenseKey_result, saveLicenseKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveLicenseKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveLicenseKey_result.class, metaDataMap);
    }

    public saveLicenseKey_result() {
    }

    public saveLicenseKey_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveLicenseKey_result(saveLicenseKey_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public saveLicenseKey_result deepCopy() {
      return new saveLicenseKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public saveLicenseKey_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveLicenseKey_result)
        return this.equals((saveLicenseKey_result)that);
      return false;
    }

    public boolean equals(saveLicenseKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveLicenseKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveLicenseKey_result typedOther = (saveLicenseKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveLicenseKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLicense_args implements org.apache.thrift.TBase<getLicense_args, getLicense_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLicense_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLicense_args.class, metaDataMap);
    }

    public getLicense_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLicense_args(getLicense_args other) {
    }

    public getLicense_args deepCopy() {
      return new getLicense_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLicense_args)
        return this.equals((getLicense_args)that);
      return false;
    }

    public boolean equals(getLicense_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLicense_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLicense_args typedOther = (getLicense_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLicense_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getLicense_result implements org.apache.thrift.TBase<getLicense_result, getLicense_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLicense_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    public LicenseObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LicenseObject.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLicense_result.class, metaDataMap);
    }

    public getLicense_result() {
    }

    public getLicense_result(
      LicenseObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLicense_result(getLicense_result other) {
      if (other.isSetSuccess()) {
        this.success = new LicenseObject(other.success);
      }
    }

    public getLicense_result deepCopy() {
      return new getLicense_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LicenseObject getSuccess() {
      return this.success;
    }

    public getLicense_result setSuccess(LicenseObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LicenseObject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLicense_result)
        return this.equals((getLicense_result)that);
      return false;
    }

    public boolean equals(getLicense_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLicense_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLicense_result typedOther = (getLicense_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new LicenseObject();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLicense_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class apiQuery_args implements org.apache.thrift.TBase<apiQuery_args, apiQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apiQuery_args");

    private static final org.apache.thrift.protocol.TField IPADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("Ipaddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filename", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("User", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("Data", org.apache.thrift.protocol.TType.STRING, (short)4);

    public String Ipaddress; // required
    public String Filename; // required
    public String User; // required
    public ByteBuffer Data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IPADDRESS((short)1, "Ipaddress"),
      FILENAME((short)2, "Filename"),
      USER((short)3, "User"),
      DATA((short)4, "Data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IPADDRESS
            return IPADDRESS;
          case 2: // FILENAME
            return FILENAME;
          case 3: // USER
            return USER;
          case 4: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IPADDRESS, new org.apache.thrift.meta_data.FieldMetaData("Ipaddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("Filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("User", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("Data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apiQuery_args.class, metaDataMap);
    }

    public apiQuery_args() {
    }

    public apiQuery_args(
      String Ipaddress,
      String Filename,
      String User,
      ByteBuffer Data)
    {
      this();
      this.Ipaddress = Ipaddress;
      this.Filename = Filename;
      this.User = User;
      this.Data = Data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apiQuery_args(apiQuery_args other) {
      if (other.isSetIpaddress()) {
        this.Ipaddress = other.Ipaddress;
      }
      if (other.isSetFilename()) {
        this.Filename = other.Filename;
      }
      if (other.isSetUser()) {
        this.User = other.User;
      }
      if (other.isSetData()) {
        this.Data = org.apache.thrift.TBaseHelper.copyBinary(other.Data);
;
      }
    }

    public apiQuery_args deepCopy() {
      return new apiQuery_args(this);
    }

    @Override
    public void clear() {
      this.Ipaddress = null;
      this.Filename = null;
      this.User = null;
      this.Data = null;
    }

    public String getIpaddress() {
      return this.Ipaddress;
    }

    public apiQuery_args setIpaddress(String Ipaddress) {
      this.Ipaddress = Ipaddress;
      return this;
    }

    public void unsetIpaddress() {
      this.Ipaddress = null;
    }

    /** Returns true if field Ipaddress is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddress() {
      return this.Ipaddress != null;
    }

    public void setIpaddressIsSet(boolean value) {
      if (!value) {
        this.Ipaddress = null;
      }
    }

    public String getFilename() {
      return this.Filename;
    }

    public apiQuery_args setFilename(String Filename) {
      this.Filename = Filename;
      return this;
    }

    public void unsetFilename() {
      this.Filename = null;
    }

    /** Returns true if field Filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.Filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.Filename = null;
      }
    }

    public String getUser() {
      return this.User;
    }

    public apiQuery_args setUser(String User) {
      this.User = User;
      return this;
    }

    public void unsetUser() {
      this.User = null;
    }

    /** Returns true if field User is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.User != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.User = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(Data));
      return Data == null ? null : Data.array();
    }

    public ByteBuffer bufferForData() {
      return Data;
    }

    public apiQuery_args setData(byte[] Data) {
      setData(Data == null ? (ByteBuffer)null : ByteBuffer.wrap(Data));
      return this;
    }

    public apiQuery_args setData(ByteBuffer Data) {
      this.Data = Data;
      return this;
    }

    public void unsetData() {
      this.Data = null;
    }

    /** Returns true if field Data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.Data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.Data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IPADDRESS:
        if (value == null) {
          unsetIpaddress();
        } else {
          setIpaddress((String)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IPADDRESS:
        return getIpaddress();

      case FILENAME:
        return getFilename();

      case USER:
        return getUser();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IPADDRESS:
        return isSetIpaddress();
      case FILENAME:
        return isSetFilename();
      case USER:
        return isSetUser();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apiQuery_args)
        return this.equals((apiQuery_args)that);
      return false;
    }

    public boolean equals(apiQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_Ipaddress = true && this.isSetIpaddress();
      boolean that_present_Ipaddress = true && that.isSetIpaddress();
      if (this_present_Ipaddress || that_present_Ipaddress) {
        if (!(this_present_Ipaddress && that_present_Ipaddress))
          return false;
        if (!this.Ipaddress.equals(that.Ipaddress))
          return false;
      }

      boolean this_present_Filename = true && this.isSetFilename();
      boolean that_present_Filename = true && that.isSetFilename();
      if (this_present_Filename || that_present_Filename) {
        if (!(this_present_Filename && that_present_Filename))
          return false;
        if (!this.Filename.equals(that.Filename))
          return false;
      }

      boolean this_present_User = true && this.isSetUser();
      boolean that_present_User = true && that.isSetUser();
      if (this_present_User || that_present_User) {
        if (!(this_present_User && that_present_User))
          return false;
        if (!this.User.equals(that.User))
          return false;
      }

      boolean this_present_Data = true && this.isSetData();
      boolean that_present_Data = true && that.isSetData();
      if (this_present_Data || that_present_Data) {
        if (!(this_present_Data && that_present_Data))
          return false;
        if (!this.Data.equals(that.Data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(apiQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      apiQuery_args typedOther = (apiQuery_args)other;

      lastComparison = Boolean.valueOf(isSetIpaddress()).compareTo(typedOther.isSetIpaddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Ipaddress, typedOther.Ipaddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(typedOther.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filename, typedOther.Filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.User, typedOther.User);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Data, typedOther.Data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IPADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Ipaddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILENAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Filename = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // USER
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.User = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DATA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.Data = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.Ipaddress != null) {
        oprot.writeFieldBegin(IPADDRESS_FIELD_DESC);
        oprot.writeString(this.Ipaddress);
        oprot.writeFieldEnd();
      }
      if (this.Filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(this.Filename);
        oprot.writeFieldEnd();
      }
      if (this.User != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(this.User);
        oprot.writeFieldEnd();
      }
      if (this.Data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(this.Data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("apiQuery_args(");
      boolean first = true;

      sb.append("Ipaddress:");
      if (this.Ipaddress == null) {
        sb.append("null");
      } else {
        sb.append(this.Ipaddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Filename:");
      if (this.Filename == null) {
        sb.append("null");
      } else {
        sb.append(this.Filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("User:");
      if (this.User == null) {
        sb.append("null");
      } else {
        sb.append(this.User);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Data:");
      if (this.Data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class apiQuery_result implements org.apache.thrift.TBase<apiQuery_result, apiQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apiQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apiQuery_result.class, metaDataMap);
    }

    public apiQuery_result() {
    }

    public apiQuery_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apiQuery_result(apiQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public apiQuery_result deepCopy() {
      return new apiQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public apiQuery_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apiQuery_result)
        return this.equals((apiQuery_result)that);
      return false;
    }

    public boolean equals(apiQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(apiQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      apiQuery_result typedOther = (apiQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("apiQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class startDiscoveryOnDemand_args implements org.apache.thrift.TBase<startDiscoveryOnDemand_args, startDiscoveryOnDemand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startDiscoveryOnDemand_args");

    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("RuleId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int RuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE_ID((short)1, "RuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("RuleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startDiscoveryOnDemand_args.class, metaDataMap);
    }

    public startDiscoveryOnDemand_args() {
    }

    public startDiscoveryOnDemand_args(
      int RuleId)
    {
      this();
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startDiscoveryOnDemand_args(startDiscoveryOnDemand_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.RuleId = other.RuleId;
    }

    public startDiscoveryOnDemand_args deepCopy() {
      return new startDiscoveryOnDemand_args(this);
    }

    @Override
    public void clear() {
      setRuleIdIsSet(false);
      this.RuleId = 0;
    }

    public int getRuleId() {
      return this.RuleId;
    }

    public startDiscoveryOnDemand_args setRuleId(int RuleId) {
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bit_vector.clear(__RULEID_ISSET_ID);
    }

    /** Returns true if field RuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return __isset_bit_vector.get(__RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bit_vector.set(__RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE_ID:
        return Integer.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startDiscoveryOnDemand_args)
        return this.equals((startDiscoveryOnDemand_args)that);
      return false;
    }

    public boolean equals(startDiscoveryOnDemand_args that) {
      if (that == null)
        return false;

      boolean this_present_RuleId = true;
      boolean that_present_RuleId = true;
      if (this_present_RuleId || that_present_RuleId) {
        if (!(this_present_RuleId && that_present_RuleId))
          return false;
        if (this.RuleId != that.RuleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startDiscoveryOnDemand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startDiscoveryOnDemand_args typedOther = (startDiscoveryOnDemand_args)other;

      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(typedOther.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RuleId, typedOther.RuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // RULE_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.RuleId = iprot.readI32();
              setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI32(this.RuleId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startDiscoveryOnDemand_args(");
      boolean first = true;

      sb.append("RuleId:");
      sb.append(this.RuleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class stopDiscoveryOnDemand_args implements org.apache.thrift.TBase<stopDiscoveryOnDemand_args, stopDiscoveryOnDemand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopDiscoveryOnDemand_args");

    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("RuleId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int RuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE_ID((short)1, "RuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("RuleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopDiscoveryOnDemand_args.class, metaDataMap);
    }

    public stopDiscoveryOnDemand_args() {
    }

    public stopDiscoveryOnDemand_args(
      int RuleId)
    {
      this();
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopDiscoveryOnDemand_args(stopDiscoveryOnDemand_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.RuleId = other.RuleId;
    }

    public stopDiscoveryOnDemand_args deepCopy() {
      return new stopDiscoveryOnDemand_args(this);
    }

    @Override
    public void clear() {
      setRuleIdIsSet(false);
      this.RuleId = 0;
    }

    public int getRuleId() {
      return this.RuleId;
    }

    public stopDiscoveryOnDemand_args setRuleId(int RuleId) {
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bit_vector.clear(__RULEID_ISSET_ID);
    }

    /** Returns true if field RuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return __isset_bit_vector.get(__RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bit_vector.set(__RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE_ID:
        return Integer.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopDiscoveryOnDemand_args)
        return this.equals((stopDiscoveryOnDemand_args)that);
      return false;
    }

    public boolean equals(stopDiscoveryOnDemand_args that) {
      if (that == null)
        return false;

      boolean this_present_RuleId = true;
      boolean that_present_RuleId = true;
      if (this_present_RuleId || that_present_RuleId) {
        if (!(this_present_RuleId && that_present_RuleId))
          return false;
        if (this.RuleId != that.RuleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopDiscoveryOnDemand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopDiscoveryOnDemand_args typedOther = (stopDiscoveryOnDemand_args)other;

      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(typedOther.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RuleId, typedOther.RuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // RULE_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.RuleId = iprot.readI32();
              setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI32(this.RuleId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopDiscoveryOnDemand_args(");
      boolean first = true;

      sb.append("RuleId:");
      sb.append(this.RuleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class pauseDiscoveryOnDemand_args implements org.apache.thrift.TBase<pauseDiscoveryOnDemand_args, pauseDiscoveryOnDemand_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseDiscoveryOnDemand_args");

    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("RuleId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int RuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE_ID((short)1, "RuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("RuleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseDiscoveryOnDemand_args.class, metaDataMap);
    }

    public pauseDiscoveryOnDemand_args() {
    }

    public pauseDiscoveryOnDemand_args(
      int RuleId)
    {
      this();
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseDiscoveryOnDemand_args(pauseDiscoveryOnDemand_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.RuleId = other.RuleId;
    }

    public pauseDiscoveryOnDemand_args deepCopy() {
      return new pauseDiscoveryOnDemand_args(this);
    }

    @Override
    public void clear() {
      setRuleIdIsSet(false);
      this.RuleId = 0;
    }

    public int getRuleId() {
      return this.RuleId;
    }

    public pauseDiscoveryOnDemand_args setRuleId(int RuleId) {
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bit_vector.clear(__RULEID_ISSET_ID);
    }

    /** Returns true if field RuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return __isset_bit_vector.get(__RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bit_vector.set(__RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE_ID:
        return Integer.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseDiscoveryOnDemand_args)
        return this.equals((pauseDiscoveryOnDemand_args)that);
      return false;
    }

    public boolean equals(pauseDiscoveryOnDemand_args that) {
      if (that == null)
        return false;

      boolean this_present_RuleId = true;
      boolean that_present_RuleId = true;
      if (this_present_RuleId || that_present_RuleId) {
        if (!(this_present_RuleId && that_present_RuleId))
          return false;
        if (this.RuleId != that.RuleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pauseDiscoveryOnDemand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pauseDiscoveryOnDemand_args typedOther = (pauseDiscoveryOnDemand_args)other;

      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(typedOther.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RuleId, typedOther.RuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // RULE_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.RuleId = iprot.readI32();
              setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI32(this.RuleId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseDiscoveryOnDemand_args(");
      boolean first = true;

      sb.append("RuleId:");
      sb.append(this.RuleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class stopReportBeforeRemoveRule_args implements org.apache.thrift.TBase<stopReportBeforeRemoveRule_args, stopReportBeforeRemoveRule_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopReportBeforeRemoveRule_args");

    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("RuleId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int RuleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RULE_ID((short)1, "RuleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("RuleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopReportBeforeRemoveRule_args.class, metaDataMap);
    }

    public stopReportBeforeRemoveRule_args() {
    }

    public stopReportBeforeRemoveRule_args(
      int RuleId)
    {
      this();
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopReportBeforeRemoveRule_args(stopReportBeforeRemoveRule_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.RuleId = other.RuleId;
    }

    public stopReportBeforeRemoveRule_args deepCopy() {
      return new stopReportBeforeRemoveRule_args(this);
    }

    @Override
    public void clear() {
      setRuleIdIsSet(false);
      this.RuleId = 0;
    }

    public int getRuleId() {
      return this.RuleId;
    }

    public stopReportBeforeRemoveRule_args setRuleId(int RuleId) {
      this.RuleId = RuleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bit_vector.clear(__RULEID_ISSET_ID);
    }

    /** Returns true if field RuleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return __isset_bit_vector.get(__RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bit_vector.set(__RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RULE_ID:
        return Integer.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopReportBeforeRemoveRule_args)
        return this.equals((stopReportBeforeRemoveRule_args)that);
      return false;
    }

    public boolean equals(stopReportBeforeRemoveRule_args that) {
      if (that == null)
        return false;

      boolean this_present_RuleId = true;
      boolean that_present_RuleId = true;
      if (this_present_RuleId || that_present_RuleId) {
        if (!(this_present_RuleId && that_present_RuleId))
          return false;
        if (this.RuleId != that.RuleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopReportBeforeRemoveRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopReportBeforeRemoveRule_args typedOther = (stopReportBeforeRemoveRule_args)other;

      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(typedOther.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RuleId, typedOther.RuleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // RULE_ID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.RuleId = iprot.readI32();
              setRuleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
      oprot.writeI32(this.RuleId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopReportBeforeRemoveRule_args(");
      boolean first = true;

      sb.append("RuleId:");
      sb.append(this.RuleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRemoteStorageDir_args implements org.apache.thrift.TBase<getRemoteStorageDir_args, getRemoteStorageDir_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRemoteStorageDir_args");

    private static final org.apache.thrift.protocol.TField RSID_FIELD_DESC = new org.apache.thrift.protocol.TField("RSId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int RSId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RSID((short)1, "RSId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RSID
            return RSID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RSID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RSID, new org.apache.thrift.meta_data.FieldMetaData("RSId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRemoteStorageDir_args.class, metaDataMap);
    }

    public getRemoteStorageDir_args() {
    }

    public getRemoteStorageDir_args(
      int RSId)
    {
      this();
      this.RSId = RSId;
      setRSIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRemoteStorageDir_args(getRemoteStorageDir_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.RSId = other.RSId;
    }

    public getRemoteStorageDir_args deepCopy() {
      return new getRemoteStorageDir_args(this);
    }

    @Override
    public void clear() {
      setRSIdIsSet(false);
      this.RSId = 0;
    }

    public int getRSId() {
      return this.RSId;
    }

    public getRemoteStorageDir_args setRSId(int RSId) {
      this.RSId = RSId;
      setRSIdIsSet(true);
      return this;
    }

    public void unsetRSId() {
      __isset_bit_vector.clear(__RSID_ISSET_ID);
    }

    /** Returns true if field RSId is set (has been assigned a value) and false otherwise */
    public boolean isSetRSId() {
      return __isset_bit_vector.get(__RSID_ISSET_ID);
    }

    public void setRSIdIsSet(boolean value) {
      __isset_bit_vector.set(__RSID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RSID:
        if (value == null) {
          unsetRSId();
        } else {
          setRSId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RSID:
        return Integer.valueOf(getRSId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RSID:
        return isSetRSId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRemoteStorageDir_args)
        return this.equals((getRemoteStorageDir_args)that);
      return false;
    }

    public boolean equals(getRemoteStorageDir_args that) {
      if (that == null)
        return false;

      boolean this_present_RSId = true;
      boolean that_present_RSId = true;
      if (this_present_RSId || that_present_RSId) {
        if (!(this_present_RSId && that_present_RSId))
          return false;
        if (this.RSId != that.RSId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRemoteStorageDir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRemoteStorageDir_args typedOther = (getRemoteStorageDir_args)other;

      lastComparison = Boolean.valueOf(isSetRSId()).compareTo(typedOther.isSetRSId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRSId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RSId, typedOther.RSId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // RSID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.RSId = iprot.readI32();
              setRSIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RSID_FIELD_DESC);
      oprot.writeI32(this.RSId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRemoteStorageDir_args(");
      boolean first = true;

      sb.append("RSId:");
      sb.append(this.RSId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class getRemoteStorageDir_result implements org.apache.thrift.TBase<getRemoteStorageDir_result, getRemoteStorageDir_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRemoteStorageDir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRemoteStorageDir_result.class, metaDataMap);
    }

    public getRemoteStorageDir_result() {
    }

    public getRemoteStorageDir_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRemoteStorageDir_result(getRemoteStorageDir_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getRemoteStorageDir_result deepCopy() {
      return new getRemoteStorageDir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getRemoteStorageDir_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRemoteStorageDir_result)
        return this.equals((getRemoteStorageDir_result)that);
      return false;
    }

    public boolean equals(getRemoteStorageDir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRemoteStorageDir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRemoteStorageDir_result typedOther = (getRemoteStorageDir_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list5 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list5.size);
                for (int _i6 = 0; _i6 < _list5.size; ++_i6)
                {
                  String _elem7; // required
                  _elem7 = iprot.readString();
                  this.success.add(_elem7);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (String _iter8 : this.success)
          {
            oprot.writeString(_iter8);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRemoteStorageDir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class startFingerprinting_args implements org.apache.thrift.TBase<startFingerprinting_args, startFingerprinting_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startFingerprinting_args");

    private static final org.apache.thrift.protocol.TField DDID_FIELD_DESC = new org.apache.thrift.protocol.TField("DDId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int DDId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDID((short)1, "DDId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDID
            return DDID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDID, new org.apache.thrift.meta_data.FieldMetaData("DDId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startFingerprinting_args.class, metaDataMap);
    }

    public startFingerprinting_args() {
    }

    public startFingerprinting_args(
      int DDId)
    {
      this();
      this.DDId = DDId;
      setDDIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFingerprinting_args(startFingerprinting_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.DDId = other.DDId;
    }

    public startFingerprinting_args deepCopy() {
      return new startFingerprinting_args(this);
    }

    @Override
    public void clear() {
      setDDIdIsSet(false);
      this.DDId = 0;
    }

    public int getDDId() {
      return this.DDId;
    }

    public startFingerprinting_args setDDId(int DDId) {
      this.DDId = DDId;
      setDDIdIsSet(true);
      return this;
    }

    public void unsetDDId() {
      __isset_bit_vector.clear(__DDID_ISSET_ID);
    }

    /** Returns true if field DDId is set (has been assigned a value) and false otherwise */
    public boolean isSetDDId() {
      return __isset_bit_vector.get(__DDID_ISSET_ID);
    }

    public void setDDIdIsSet(boolean value) {
      __isset_bit_vector.set(__DDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DDID:
        if (value == null) {
          unsetDDId();
        } else {
          setDDId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DDID:
        return Integer.valueOf(getDDId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DDID:
        return isSetDDId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startFingerprinting_args)
        return this.equals((startFingerprinting_args)that);
      return false;
    }

    public boolean equals(startFingerprinting_args that) {
      if (that == null)
        return false;

      boolean this_present_DDId = true;
      boolean that_present_DDId = true;
      if (this_present_DDId || that_present_DDId) {
        if (!(this_present_DDId && that_present_DDId))
          return false;
        if (this.DDId != that.DDId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startFingerprinting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startFingerprinting_args typedOther = (startFingerprinting_args)other;

      lastComparison = Boolean.valueOf(isSetDDId()).compareTo(typedOther.isSetDDId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDId, typedOther.DDId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DDID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.DDId = iprot.readI32();
              setDDIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DDID_FIELD_DESC);
      oprot.writeI32(this.DDId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startFingerprinting_args(");
      boolean first = true;

      sb.append("DDId:");
      sb.append(this.DDId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class stopFingerprinting_args implements org.apache.thrift.TBase<stopFingerprinting_args, stopFingerprinting_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopFingerprinting_args");

    private static final org.apache.thrift.protocol.TField DDID_FIELD_DESC = new org.apache.thrift.protocol.TField("DDId", org.apache.thrift.protocol.TType.I32, (short)1);

    public int DDId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DDID((short)1, "DDId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DDID
            return DDID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DDID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DDID, new org.apache.thrift.meta_data.FieldMetaData("DDId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopFingerprinting_args.class, metaDataMap);
    }

    public stopFingerprinting_args() {
    }

    public stopFingerprinting_args(
      int DDId)
    {
      this();
      this.DDId = DDId;
      setDDIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopFingerprinting_args(stopFingerprinting_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.DDId = other.DDId;
    }

    public stopFingerprinting_args deepCopy() {
      return new stopFingerprinting_args(this);
    }

    @Override
    public void clear() {
      setDDIdIsSet(false);
      this.DDId = 0;
    }

    public int getDDId() {
      return this.DDId;
    }

    public stopFingerprinting_args setDDId(int DDId) {
      this.DDId = DDId;
      setDDIdIsSet(true);
      return this;
    }

    public void unsetDDId() {
      __isset_bit_vector.clear(__DDID_ISSET_ID);
    }

    /** Returns true if field DDId is set (has been assigned a value) and false otherwise */
    public boolean isSetDDId() {
      return __isset_bit_vector.get(__DDID_ISSET_ID);
    }

    public void setDDIdIsSet(boolean value) {
      __isset_bit_vector.set(__DDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DDID:
        if (value == null) {
          unsetDDId();
        } else {
          setDDId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DDID:
        return Integer.valueOf(getDDId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DDID:
        return isSetDDId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopFingerprinting_args)
        return this.equals((stopFingerprinting_args)that);
      return false;
    }

    public boolean equals(stopFingerprinting_args that) {
      if (that == null)
        return false;

      boolean this_present_DDId = true;
      boolean that_present_DDId = true;
      if (this_present_DDId || that_present_DDId) {
        if (!(this_present_DDId && that_present_DDId))
          return false;
        if (this.DDId != that.DDId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopFingerprinting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopFingerprinting_args typedOther = (stopFingerprinting_args)other;

      lastComparison = Boolean.valueOf(isSetDDId()).compareTo(typedOther.isSetDDId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDDId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DDId, typedOther.DDId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DDID
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.DDId = iprot.readI32();
              setDDIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DDID_FIELD_DESC);
      oprot.writeI32(this.DDId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopFingerprinting_args(");
      boolean first = true;

      sb.append("DDId:");
      sb.append(this.DDId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class testConnection_args implements org.apache.thrift.TBase<testConnection_args, testConnection_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_args");

    private static final org.apache.thrift.protocol.TField REMOTE_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("RemoteStorage", org.apache.thrift.protocol.TType.MAP, (short)1);

    public Map<String,String> RemoteStorage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMOTE_STORAGE((short)1, "RemoteStorage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMOTE_STORAGE
            return REMOTE_STORAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMOTE_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("RemoteStorage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_args.class, metaDataMap);
    }

    public testConnection_args() {
    }

    public testConnection_args(
      Map<String,String> RemoteStorage)
    {
      this();
      this.RemoteStorage = RemoteStorage;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_args(testConnection_args other) {
      if (other.isSetRemoteStorage()) {
        Map<String,String> __this__RemoteStorage = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.RemoteStorage.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__RemoteStorage_copy_key = other_element_key;

          String __this__RemoteStorage_copy_value = other_element_value;

          __this__RemoteStorage.put(__this__RemoteStorage_copy_key, __this__RemoteStorage_copy_value);
        }
        this.RemoteStorage = __this__RemoteStorage;
      }
    }

    public testConnection_args deepCopy() {
      return new testConnection_args(this);
    }

    @Override
    public void clear() {
      this.RemoteStorage = null;
    }

    public int getRemoteStorageSize() {
      return (this.RemoteStorage == null) ? 0 : this.RemoteStorage.size();
    }

    public void putToRemoteStorage(String key, String val) {
      if (this.RemoteStorage == null) {
        this.RemoteStorage = new HashMap<String,String>();
      }
      this.RemoteStorage.put(key, val);
    }

    public Map<String,String> getRemoteStorage() {
      return this.RemoteStorage;
    }

    public testConnection_args setRemoteStorage(Map<String,String> RemoteStorage) {
      this.RemoteStorage = RemoteStorage;
      return this;
    }

    public void unsetRemoteStorage() {
      this.RemoteStorage = null;
    }

    /** Returns true if field RemoteStorage is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteStorage() {
      return this.RemoteStorage != null;
    }

    public void setRemoteStorageIsSet(boolean value) {
      if (!value) {
        this.RemoteStorage = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REMOTE_STORAGE:
        if (value == null) {
          unsetRemoteStorage();
        } else {
          setRemoteStorage((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REMOTE_STORAGE:
        return getRemoteStorage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REMOTE_STORAGE:
        return isSetRemoteStorage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_args)
        return this.equals((testConnection_args)that);
      return false;
    }

    public boolean equals(testConnection_args that) {
      if (that == null)
        return false;

      boolean this_present_RemoteStorage = true && this.isSetRemoteStorage();
      boolean that_present_RemoteStorage = true && that.isSetRemoteStorage();
      if (this_present_RemoteStorage || that_present_RemoteStorage) {
        if (!(this_present_RemoteStorage && that_present_RemoteStorage))
          return false;
        if (!this.RemoteStorage.equals(that.RemoteStorage))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testConnection_args typedOther = (testConnection_args)other;

      lastComparison = Boolean.valueOf(isSetRemoteStorage()).compareTo(typedOther.isSetRemoteStorage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteStorage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RemoteStorage, typedOther.RemoteStorage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REMOTE_STORAGE
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                this.RemoteStorage = new HashMap<String,String>(2*_map9.size);
                for (int _i10 = 0; _i10 < _map9.size; ++_i10)
                {
                  String _key11; // required
                  String _val12; // required
                  _key11 = iprot.readString();
                  _val12 = iprot.readString();
                  this.RemoteStorage.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.RemoteStorage != null) {
        oprot.writeFieldBegin(REMOTE_STORAGE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.RemoteStorage.size()));
          for (Map.Entry<String, String> _iter13 : this.RemoteStorage.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_args(");
      boolean first = true;

      sb.append("RemoteStorage:");
      if (this.RemoteStorage == null) {
        sb.append("null");
      } else {
        sb.append(this.RemoteStorage);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class testConnection_result implements org.apache.thrift.TBase<testConnection_result, testConnection_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_result.class, metaDataMap);
    }

    public testConnection_result() {
    }

    public testConnection_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_result(testConnection_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public testConnection_result deepCopy() {
      return new testConnection_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public testConnection_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_result)
        return this.equals((testConnection_result)that);
      return false;
    }

    public boolean equals(testConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testConnection_result typedOther = (testConnection_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class testWebServer_args implements org.apache.thrift.TBase<testWebServer_args, testWebServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testWebServer_args");

    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("URL", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String URL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URL((short)1, "URL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("URL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testWebServer_args.class, metaDataMap);
    }

    public testWebServer_args() {
    }

    public testWebServer_args(
      String URL)
    {
      this();
      this.URL = URL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testWebServer_args(testWebServer_args other) {
      if (other.isSetURL()) {
        this.URL = other.URL;
      }
    }

    public testWebServer_args deepCopy() {
      return new testWebServer_args(this);
    }

    @Override
    public void clear() {
      this.URL = null;
    }

    public String getURL() {
      return this.URL;
    }

    public testWebServer_args setURL(String URL) {
      this.URL = URL;
      return this;
    }

    public void unsetURL() {
      this.URL = null;
    }

    /** Returns true if field URL is set (has been assigned a value) and false otherwise */
    public boolean isSetURL() {
      return this.URL != null;
    }

    public void setURLIsSet(boolean value) {
      if (!value) {
        this.URL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URL:
        if (value == null) {
          unsetURL();
        } else {
          setURL((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URL:
        return getURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URL:
        return isSetURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testWebServer_args)
        return this.equals((testWebServer_args)that);
      return false;
    }

    public boolean equals(testWebServer_args that) {
      if (that == null)
        return false;

      boolean this_present_URL = true && this.isSetURL();
      boolean that_present_URL = true && that.isSetURL();
      if (this_present_URL || that_present_URL) {
        if (!(this_present_URL && that_present_URL))
          return false;
        if (!this.URL.equals(that.URL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testWebServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testWebServer_args typedOther = (testWebServer_args)other;

      lastComparison = Boolean.valueOf(isSetURL()).compareTo(typedOther.isSetURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.URL, typedOther.URL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // URL
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.URL = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.URL != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.URL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testWebServer_args(");
      boolean first = true;

      sb.append("URL:");
      if (this.URL == null) {
        sb.append("null");
      } else {
        sb.append(this.URL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class testWebServer_result implements org.apache.thrift.TBase<testWebServer_result, testWebServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testWebServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testWebServer_result.class, metaDataMap);
    }

    public testWebServer_result() {
    }

    public testWebServer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testWebServer_result(testWebServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public testWebServer_result deepCopy() {
      return new testWebServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public testWebServer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testWebServer_result)
        return this.equals((testWebServer_result)that);
      return false;
    }

    public boolean equals(testWebServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(testWebServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      testWebServer_result typedOther = (testWebServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testWebServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
