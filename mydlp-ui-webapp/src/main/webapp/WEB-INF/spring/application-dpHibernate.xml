<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xmlns:p="http://www.springframework.org/schema/p"
 xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:flex="http://www.springframework.org/schema/flex"
 xsi:schemaLocation="
  http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-3.0.xsd
  http://www.springframework.org/schema/tx
  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
  http://www.springframework.org/schema/flex 
  http://www.springframework.org/schema/flex/spring-flex-1.0.xsd
  ">

  <!-- Defines the remoting adapter, which intercepts inbound & outbound messages, and routes them thruogh dpHibernate -->
  <bean id="dpHibernateRemotingAdapter" class="org.springframework.flex.core.ManageableComponentFactoryBean">
    <constructor-arg value="org.dphibernate.adapters.RemotingAdapter" />
    <property name="properties">
      <value>
        {"dpHibernate" :
          {
            "serializerFactory" : "org.dphibernate.serialization.SpringContextSerializerFactory"
          }
        }
      </value>
    </property>
  </bean>
  
  <bean id="dpHibernateMessagingAdapter" class="org.springframework.flex.core.ManageableComponentFactoryBean">
    <constructor-arg value="org.dphibernate.adapters.MessagingAdapter" />
  </bean>
  <!--
    Provides a basic service for lazy loading operations through
    dpHibernate. It's also exported as a remoting destination, which makes
    it accessible to flex clients
  -->
  <bean id="dataAccessService" class="org.dphibernate.services.SpringLazyLoadService" autowire="constructor">
    <flex:remoting-destination />
    <constructor-arg ref="policySessionFactory" />
  </bean>
  <!-- 
    ProxyBatchLoader enabled batched loading of objects.  A single request is sent for many objects,
    rather than several individual requests.  This is optional, but provides significant performance improvements
  -->
  <bean id="proxyBatchLoader" class="org.dphibernate.services.ProxyBatchLoader" autowire="constructor" >
    <constructor-arg ref="policySessionFactory" />
  </bean>
  <!-- Required 
  <bean id="hibernateSessionFilter" class="org.dphibernate.filters.SpringHibernateSessionServletFilter" >
    <property name="sessionFactory" ref="policySessionFactory"/>
  </bean>-->
  <!--
    The main serializer. Converts outbound POJO's to ASObjects with
    dpHibernate proxies for lazy loading. Required
  -->
  <bean id="dpHibernateSerializer" class="org.dphibernate.serialization.HibernateSerializer" scope="prototype">
    <property name="pageSize" value="10" />
  </bean>
  <bean id="dpHibernateDeserializer" class="org.dphibernate.serialization.HibernateDeserializer" scope="prototype" />

  <!--  
    Handles entity updates (CRUD).  Required if using entity persistence. 
  <bean id="objectChangeUpdater" class="org.dphibernate.persistence.state.AuthenticatedObjectChangeUpdater" scope="prototype" />

    Used in update process, for resolving proxies back to the entity 
  <bean id="hibernateProxyResolver" class="org.dphibernate.persistence.state.DbProxyResolver" scope="prototype">
    <constructor-arg ref="sessionFactory" />
  </bean>
-->  

</beans>